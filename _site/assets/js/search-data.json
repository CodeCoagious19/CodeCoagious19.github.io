{"0": {
    "doc": "Javascript",
    "title": "Javascript",
    "content": " ",
    "url": "http://localhost:4000/javascript/",
    "relUrl": "/javascript/"
  },"1": {
    "doc": "Javascript",
    "title": "Prerequisiti al corso",
    "content": "Prima di iniziare questo modulo, dovresti avere familiarità con i linguaggi HTML e CSS. ",
    "url": "http://localhost:4000/javascript/#prerequisiti-al-corso",
    "relUrl": "/javascript/#prerequisiti-al-corso"
  },"2": {
    "doc": "Javascript",
    "title": "Approccio al corso",
    "content": "Questo corso è stato scritto con l’intento di imparare il linguaggio attraverso esempi pratici. Se all’inizio pensate di trovare troppo pesanti alcuni capitoli puramente “teorici” vi capisco, lo penserei anch’io quindi evitate con leggerezza queste sezioni. Faccio notare anche l’approccio a “Lezioni” brevi che ho preferito rispetto all’approccio classico a “Libro/capitoli” che dal mio punto di vista allunga il tempo di apprendimento specialmente per chi non mastica già un po’ il linguaggio e che comunque può essere seguito parallelamente per approfondimenti. Concludo nella speranza che il corso possa piacervi e risultare snello per l’apprendimento. ",
    "url": "http://localhost:4000/javascript/#approccio-al-corso",
    "relUrl": "/javascript/#approccio-al-corso"
  },"3": {
    "doc": "Javascript",
    "title": "Strumenti Necessari",
    "content": "Per questo corso sarà necessario un web browser e un editor di testo. Come web browser utilizzeremo Google Chrome mentre come editor di testo utilizzeremo Visual Studio Code. ",
    "url": "http://localhost:4000/javascript/#strumenti-necessari",
    "relUrl": "/javascript/#strumenti-necessari"
  },"4": {
    "doc": "Javascript",
    "title": "Introduzione",
    "content": "JavaScript è un linguaggio di scripting cross-platform e object-oriented. È un linguaggio piccolo e leggero. All interno di un ambiente ospite (ad esempio un web browser), JavaScript può essere connesso agli oggetti del suo ambiente per fornire controllo programmatico su di essi. JavaScript contiene una libreria standard di oggetti come Array, Date e Math, ed una serie di elementi base del linguaggio come operatori, strutture di controllo e dichiarazioni. La base di JavaScript può essere estesa per una varietà di scopi fornendogli oggetti aggiuntivi; ad esempio: . | Client-side JavaScript estende il linguaggio base fornendo oggetti per controllare il browser ed il suo Document Object Model (DOM). Per esempio, le estensioni client-side permettono ad una applicazione di inserire elementi in un form HTML e rispondere ad eventi dell’utente come il click del mouse, input nei form e navigazione delle pagine. | Server-side JavaScript estende il linguaggio base fornendo oggetti rilevanti per eseguire JavaScript in un server. Per esempio le estensioni server-side consentono ad una applicazione di comunicare con un database, forniscono continuità di informazioni da una chiamata ad un altra dell’applicazione, o permettono la manipolazione di files nel server. | . MDN - Introduzione . ",
    "url": "http://localhost:4000/javascript/#introduzione",
    "relUrl": "/javascript/#introduzione"
  },"5": {
    "doc": "Chi sono",
    "title": "Chi sono",
    "content": "Ciao! Sono Simone, Ingegnere elettronico specializzato nella programmazione embedded per il settore automotive da sempre appassionato di Informatica ed Elettronica. Ho deciso in tempi recenti di mettere online questa semplice pagina web a supporto per l’apprendimento dell’informtica e della programmazione. Ho iniziato giovanissimo con la programmazione con il linguaggio Visual Basic per ambienti desktop e MikroBasic per microcontrollori della famiglia PIC. Successivamente ho studiato l’assembly e il C ampliando le conoscenze nella programmazione embedded per i microcontrollori Atmel e realizzando svariati progetti che fra non molto caricherò qua sopra. All’università ho avuto modo di portare avanti lo studio del C/C++ e assembly continuando lo sviluppo di applicativi desktop e per piattaforme Atmel embdedded. Ho lavorato per più di un anno in STMicroelectronics collaborando in un progetto di programmazione driver per microcontrollori ST destinati al mercato automobilistico. In questo ultimo anno ho appreso da autoditatta anche linguaggi di più alto livello come Python, html/css e Javascript . ",
    "url": "http://localhost:4000/chisono/",
    "relUrl": "/chisono/"
  },"6": {
    "doc": "Corsi",
    "title": "Corsi",
    "content": " ",
    "url": "http://localhost:4000/corsi/",
    "relUrl": "/corsi/"
  },"7": {
    "doc": "C++ per esempi",
    "title": "C++ per esempi",
    "content": "Raccolta di esempi in C++ ordinati secondo difficoltà . ",
    "url": "http://localhost:4000/cpp/",
    "relUrl": "/cpp/"
  },"8": {
    "doc": "C++ per esempi",
    "title": "Indice",
    "content": ". | Area e perimetro di un rettangolo | Da intero a decine centinaia e unita’ | Negativo, nullo o positivo? | Pari o Dispari? | Uguali ? | Da intero a carattere | Da carattere a intero | Da minuscolo a maiuscolo | Da maiuscolo a minuscolo | Da minuscolo a maiuscolo e viceversa | Risolvi equazioni di II grado | Conta dispari da sequenza illimitata | Stampa cifre | Tavola pitagorica | Conta dispari da sequenza limitata | Sequenza crescente, decrescente o non ordinata? | Vettore palindromo | Conta ricorrenza numerica | Conta ricorrenza letterale | Segno elementi di un vettore | Vettore - elementi dispari, nulli o pari? | Vettore - elementi ordinati? | Buffer circolare | Contenitore | . ",
    "url": "http://localhost:4000/cpp/#indice",
    "relUrl": "/cpp/#indice"
  },"9": {
    "doc": "C++ per esempi",
    "title": "Area e perimetro di un rettangolo",
    "content": "Restituisce area e perimetro di un rettangolo dati base e altezza immessi da tastiera . #include &lt;iostream&gt; using namespace std; int main() { cout &lt;&lt; \"Title: Area e perimetro di un rettangolo\" &lt;&lt; '\\n' &lt;&lt; \"Description: Restituisce area e perimetro di un rettangolo dati base e altezza immessi da tastiera\" &lt;&lt; '\\n'; double base, altezza, perimetro, area; cout &lt;&lt; '\\n' &lt;&lt; \"base:\"; cin &gt;&gt; base; cout &lt;&lt; \"altezza:\"; cin &gt;&gt; altezza; perimetro = 2 * ( base + altezza ); //Conversione implicita 2 -&gt; 2.0 area = base * altezza; cout &lt;&lt; '\\n' &lt;&lt; \"Perimetro: \" &lt;&lt; perimetro &lt;&lt; '\\n' &lt;&lt; \"Area: \" &lt;&lt; area &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#area-e-perimetro-di-un-rettangolo",
    "relUrl": "/cpp/#area-e-perimetro-di-un-rettangolo"
  },"10": {
    "doc": "C++ per esempi",
    "title": "Da intero a decine centinaia e unita’",
    "content": "Acquisisce un numero intero positivo minore o uguale a 999 immesso da tastiera e stampa la scomposizione in centinaia, decine, unita’. Modo 1: Uso del costrutto if ... else . #include &lt;iostream&gt; using namespace std; int main () { cout &lt;&lt; \"Title: Da intero a decine centinaia e unita'\" &lt;&lt; '\\n' &lt;&lt; \"Description: Acquisisce un numero intero positivo minore o uguale a 999 immesso da tastiera e stampa la scomposizione in centinaia, decine, unita'\" &lt;&lt; '\\n'; int numero, centinaia, decine, unita; cout &lt;&lt; '\\n' &lt;&lt; \"Inserisci un numero positivo minore o uguale a 999.\" &lt;&lt; '\\n' &lt;&lt; \"Numero:\"; cin &gt;&gt; numero; if ( ( numero &lt; 0 ) || ( numero &gt; 999 ) ) cout &lt;&lt; '\\n' &lt;&lt; \"Numero non valido\"; else { unita = numero % 10; decine = ( numero / 10 ) % 10; centinaia = numero / 100; cout &lt;&lt; '\\n' &lt;&lt; \"centinaia:\" &lt;&lt; centinaia &lt;&lt; '\\n' &lt;&lt; \"decine:\" &lt;&lt; decine &lt;&lt; '\\n' &lt;&lt; \"unita':\" &lt;&lt; unita &lt;&lt; '\\n'; } } . Modo 2 Uso del ternary operator ... ? ... : ... #include &lt;iostream&gt; using namespace std; int main () { cout &lt;&lt; \"Title: Da intero a decine centinaia e unita'\" &lt;&lt; '\\n' &lt;&lt; \"Description: Acquisisce un numero intero positivo minore o uguale a 999 immesso da tastiera e stampa la scomposizione in centinaia, decine, unita'\" &lt;&lt; '\\n'; int numero, centinaia, decine, unita; cout &lt;&lt; '\\n' &lt;&lt; \"Inserisci un numero positivo minore o uguale a 999.\" &lt;&lt; '\\n' &lt;&lt; \"Numero:\"; cin &gt;&gt; numero; //Forzo i numeri maggiori 999 a 999 e i numeri minori di 0 a 0. numero = ( numero &gt; 0) ? ( numero &lt; 999 ? numero : 999 ) : 0; unita = numero % 10; decine = ( numero / 10 ) % 10; centinaia = numero / 100; cout &lt;&lt; '\\n' &lt;&lt; \"centinaia:\" &lt;&lt; centinaia &lt;&lt; '\\n' &lt;&lt; \"decine:\" &lt;&lt; decine &lt;&lt; '\\n' &lt;&lt; \"unita':\" &lt;&lt; unita; &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#da-intero-a-decine-centinaia-e-unita",
    "relUrl": "/cpp/#da-intero-a-decine-centinaia-e-unita"
  },"11": {
    "doc": "C++ per esempi",
    "title": "Negativo, nullo o positivo?",
    "content": "Acquisisce un numero intero da tastiera e stampa se è negativo, nullo o positivo . Modo 1: Uso del costrutto if ... else . #include &lt;iostream&gt; using namespace std; int main () { cout &lt;&lt; \"Title: Negativo, nullo o positivo?\" &lt;&lt; '\\n' &lt;&lt; \"Description: Acquisisce un numero intero da tastiera e stampa se è negativo, nullo o positivo\" &lt;&lt; '\\n'; int numero; cout &lt;&lt; '\\n' &lt;&lt; \"Inserisci un numero intero.\" &lt;&lt; '\\n' &lt;&lt; \"Numero:\"; cin &gt;&gt; numero; if ( numero &lt; 0 ) cout &lt;&lt; '\\n' &lt;&lt; \"Negativo.\"; else if ( numero == 0 ) cout &lt;&lt; '\\n' &lt;&lt; \"Nullo.\"; else cout &lt;&lt; '\\n' &lt;&lt; \"Positivo.\"; cout &lt;&lt; '\\n'; } . Modo 2: Uso del ternary operator ... ? ... : ... #include &lt;iostream&gt; using namespace std; int main () { cout &lt;&lt; \"Title: Negativo, nullo o positivo?\" &lt;&lt; '\\n' &lt;&lt; \"Description: Acquisisce un numero intero da tastiera e stampa se è negativo, nullo o positivo\" &lt;&lt; '\\n'; int numero; cout &lt;&lt; '\\n' &lt;&lt; \"Inserisci un numero intero.\" &lt;&lt; '\\n' &lt;&lt; \"Numero:\"; cin &gt;&gt; numero; ( numero == 0 ) ? ( cout &lt;&lt; '\\n' &lt;&lt; \"Nullo.\" ) : ( (numero &gt; 0) ? (cout &lt;&lt; '\\n' &lt;&lt; \"Positivo.\") : (cout &lt;&lt; '\\n' &lt;&lt; \"Negativo.\") ); cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#negativo-nullo-o-positivo",
    "relUrl": "/cpp/#negativo-nullo-o-positivo"
  },"12": {
    "doc": "C++ per esempi",
    "title": "Pari o Dispari?",
    "content": "Acquisisce un numero intero da tastiera e stampa se è pari o dispari . # include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Ttitle: Pari o dispari?\" &lt;&lt; '\\n' &lt;&lt; \"Description: Acquisisce un numero intero da tastiera e stampa se è pari o dispari\\n\"; int n; cout &lt;&lt; \"Inserisci un numero:\"; cin &gt;&gt; n; (n%2) ? (cout &lt;&lt; \"Dispari.\") : (cout &lt;&lt; \"Pari.\"); cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#pari-o-dispari",
    "relUrl": "/cpp/#pari-o-dispari"
  },"13": {
    "doc": "C++ per esempi",
    "title": "Uguali ?",
    "content": "Acquisisce tre numeri interi da tastiera e stampa se sono uguali . #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Uguali ?\\n\" &lt;&lt; \"Acquisisce tre numeri interi da tastiera e stampa se sono uguali\\n\"; int n1, n2, n3; cout &lt;&lt; \"Inserisci tre numeri interi.\" &lt;&lt; '\\n'; cout &lt;&lt; '\\n' &lt;&lt; \"n1:\"; cin &gt;&gt; n1; cout &lt;&lt; \"n2:\"; cin &gt;&gt; n2; cout &lt;&lt; \"n3:\"; cin &gt;&gt; n3; if ( (n1 == n2) &amp;&amp; (n2 == n3) ) cout &lt;&lt; '\\n' &lt;&lt; \"Tutti uguali.\"; else if ( (n1 == n2) || (n1 == n3) || (n2 == n3) ) cout &lt;&lt; '\\n' &lt;&lt; \"Due uguali.\"; else cout &lt;&lt; '\\n' &lt;&lt; \"Diversi.\"; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#uguali-",
    "relUrl": "/cpp/#uguali-"
  },"14": {
    "doc": "C++ per esempi",
    "title": "Da intero a carattere",
    "content": "Acquisisce un numero intero da tastiera e lo converte in un carattere stampabile . #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Da intero a carattere\\n\" &lt;&lt; \"Description: Acquisisce un numero intero da tastiera e lo converte in un carattere stampabile\\n\"; int i; cout &lt;&lt; \"insercisci un numero:\"; cin &gt;&gt; i; //Se minore di 31 o maggiore di 127 forza a 32. i = ( (i &lt; 32) || (i &gt; 127) ) ? (i=32) : i; cout &lt;&lt; char(i); cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#da-intero-a-carattere",
    "relUrl": "/cpp/#da-intero-a-carattere"
  },"15": {
    "doc": "C++ per esempi",
    "title": "Da carattere a intero",
    "content": "Acquisisce un carattere da tastiera e lo converte nel corrispondente codice ASCII . #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Da carattere a intero\\n\" &lt;&lt; \"Description: Acquisisce un carattere da tastiera e lo converte nel corrispondente codice ASCII\\n\"; char c; cout &lt;&lt; \"Inserisci un carattere: \"; cin &gt;&gt; c; if ( ( (c &gt;= 'a') &amp;&amp; (c &lt;= 'z') ) || ( (c &gt;= 'A') &amp;&amp; (c &lt;= 'Z') ) ) cout &lt;&lt; \"\\nCodisce ASCII: \" &lt;&lt; int(c); else cout &lt;&lt; \"\\nNon e' una lettera dell'alfabeto.\"; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#da-carattere-a-intero",
    "relUrl": "/cpp/#da-carattere-a-intero"
  },"16": {
    "doc": "C++ per esempi",
    "title": "Da minuscolo a maiuscolo",
    "content": "Acquisisce un carattere letterale minuscolo da tastiera e lo converte in un carattere letterale maiuscolo . #include &lt;iostream&gt; using namespace std; //0100 0000 -&gt; MAIUSC //0110 0000 -&gt; min //Devo mettere a 0 il quinto bit. Quindi min = (xx1x xxxx) &amp; (1101 1111); // 1101 1111 --&gt; = ~(1&lt;&lt;5) // ATT: // 1&lt;&lt;5 = 0010 0000 // ~(1&lt;&lt;5) = 1101 1111 int main() { cout &lt;&lt; \"Title: Da minuscolo a maiuscolo\\n\" &lt;&lt; \"Description: Acquisisce un carattere letterale minuscolo da tastiera e lo converte in un carattere letterale maiuscolo\\n\"; char c; cout &lt;&lt; \"Inserisci un carattere minuscolo: \"; cin &gt;&gt; c; c &amp;= ~( 1 &lt;&lt; 5 ); cout &lt;&lt; \"Il carattere maiuscolo e': \" &lt;&lt; c; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#da-minuscolo-a-maiuscolo",
    "relUrl": "/cpp/#da-minuscolo-a-maiuscolo"
  },"17": {
    "doc": "C++ per esempi",
    "title": "Da maiuscolo a minuscolo",
    "content": "Acquisisce un carattere letterale maiuscolo da tastiera e lo converte in un carattere letterale minuscolo . #include &lt;iostream&gt; using namespace std; //0100 0000 -&gt; MAIUSC //0110 0000 -&gt; min //Devo mettere a 1 il quinto bit. Quindi min = (xx1x xxxx) | (0010 0000); // 0010 0000 --&gt; = (1&lt;&lt;5) int main() { cout &lt;&lt; \"Title: Da maiuscolo a minuscolo\\n\" &lt;&lt; \"Description: Acquisisce un carattere letterale maiuscolo da tastiera e lo converte in un carattere letterale minuscolo\\n\"; char c; cout &lt;&lt; \"Inserisci un carattere MAIUSCOLO: \"; cin &gt;&gt; c; c |= ( 1 &lt;&lt; 5 ); cout &lt;&lt; \"Il carattere minuscolo e': \" &lt;&lt; c; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#da-maiuscolo-a-minuscolo",
    "relUrl": "/cpp/#da-maiuscolo-a-minuscolo"
  },"18": {
    "doc": "C++ per esempi",
    "title": "Da minuscolo a maiuscolo e viceversa",
    "content": "Acquisisce un carattere letterale da tastiera e: . | Lo converte in maiuscolo se è minuscolo | Lo converte in minuscolo se è maiuscolo | Restituisce il carattere se non è una lettera | . #include &lt;iostream&gt; using namespace std; //010x xxxx -&gt; MAIUSC //011x xxxx -&gt; minusc //La lettera 'k' differisce di 2^5 rispetto alla lettera 'K' //Calcolo 'a' - 'A' int main (){ cout &lt;&lt; \"Title: Da minuscolo a maiuscolo e viceversa\\n\" &lt;&lt; \"Description: Acquisisce un carattere letterale da tastiera e:\\n\" &lt;&lt; \"- Lo converte in maiuscolo se è minuscolo\\n\" &lt;&lt; \"- Lo converte in minuscolo se è maiuscolo\\n\" &lt;&lt; \"- Restituisce il carattere se non è una lettera\\n\"; char c; cout &lt;&lt; \"Inserisci un carattere: \"; cin &gt;&gt; c; const int t = 'a' - 'A'; //Costante di conversione min&lt;-&gt;MAIUSC if ( c &gt;= 'a' &amp;&amp; c &lt;= 'z' ){ c -= t; //Trasformo min-&gt;MAIUSC cout &lt;&lt; \"Il carattere maiuscolo e': \" &lt;&lt; c; } else if ( c &gt;= 'A' &amp;&amp; c &lt;= 'Z' ){ c += t; //Trasformo MAIUSC-min cout &lt;&lt; \"Il carattere minuscolo e': \" &lt;&lt; c; } else cout &lt;&lt; \"Il carattere inserito e': \" &lt;&lt; c; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#da-minuscolo-a-maiuscolo-e-viceversa",
    "relUrl": "/cpp/#da-minuscolo-a-maiuscolo-e-viceversa"
  },"19": {
    "doc": "C++ per esempi",
    "title": "Risolvi equazioni di II grado",
    "content": "Calcola i risultati di un equazione di secondo grado del tipo: . ax^2 + bx + c = 0 . Inserendo da tastiera i valori dei coefficienti a, b, c . #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std; int main (){ cout &lt;&lt; \"Ttile: Risolvi equazioni di II grado\\n\" &lt;&lt; \"Description: Calcola i risultati di un equazione di secondo grado del tipo:\\n\" &lt;&lt; \"ax^2 + bx +c = 0\\n\" &lt;&lt; \"Inserendo da tastiera i valori dei coefficienti a, b, c\\n\"; double a,b,c, x1, x2, delta; cout &lt;&lt; \"\\nInserisci i coefficienti a, b, c.\\n\\n\"; cout &lt;&lt; \"a:\"; cin &gt;&gt; a; cout &lt;&lt; \"b:\"; cin &gt;&gt; b; cout &lt;&lt; \"c:\"; cin &gt;&gt; c; if ( (a==0) &amp;&amp; (b==0) &amp;&amp; (c==0) ) cout &lt;&lt; \"\\nEquazione DEGENERE.\"; else if ( (a==0) &amp;&amp; (b==0) ) cout &lt;&lt; \"\\nEquazione IMPOSSIBILE.\"; else if (a==0) { cout &lt;&lt; \"\\nEquazione di PRIMO grado.\"; x1 = -b/c; cout &lt;&lt; \"\\nx=\" &lt;&lt; x1; } else { delta = b*b - 4*a*c; if ( delta &lt; 0 ) cout &lt;&lt; \"\\nx1, x2, soluzioni immaginarie.\\n\"; else if ( delta == 0) { x1 = -b/(2*a); cout &lt;&lt; \"\\nx1=x2=\" &lt;&lt; x1; } else { cout &lt;&lt; \"\\nSoluzioni reali e distinte.\\n\"; x1 = ( -b + sqrt(delta) )/ ( 2 * a ); x2 = ( -b - sqrt(delta) )/ ( 2 * a ); cout &lt;&lt; \"\\nx1:\" &lt;&lt; x1 &lt;&lt; \"\\nx2:\" &lt;&lt; x2; } } cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#risolvi-equazioni-di-ii-grado",
    "relUrl": "/cpp/#risolvi-equazioni-di-ii-grado"
  },"20": {
    "doc": "C++ per esempi",
    "title": "Conta dispari da sequenza illimitata",
    "content": "Conta i numeri dispari inseriti da tastiera. Termina al primo negativo o nullo . Modo 1: Uso del ciclo while() . #include &lt;iostream&gt; using namespace std; /* NOTA: - Lo statemeant: conta += n%2; - Equivake a: conta = conta + n%2; - Equivale a: if ( n%2 ) conta++; */ int main (){ cout &lt;&lt; \"Title: Conta dispari\" &lt;&lt; \"Description: Conta i numeri dispari inseriti da tastiera. Termina al primo negativo o nullo.\\n\"; int n, conta = 0; cout &lt;&lt; \"n: \"; cin &gt;&gt; n; while ( n &gt; 0 ){ conta += n % 2; cout &lt;&lt; \"n: \"; cin &gt;&gt; n; } cout &lt;&lt; conta; cout &lt;&lt; '\\n'; } . Modo 2: Uso del ciclo for(;;) . #include &lt;iostream&gt; using namespace std; /* NOTA: - Lo statemeant: conta += n%2; - Equivake a: conta = conta + n%2; - Equivale a: if ( n%2 ) conta++; */ int main (){ cout &lt;&lt; \"Title: Conta dispari\\n\" &lt;&lt; \"Description: Conta i numeri dispari inseriti da tastiera. Termina al primo negativo o nullo.\\n\"; int n, conta = 0; cout &lt;&lt; \"n: \"; cin &gt;&gt; n; for (;;) { if ( n&gt;0 ) { conta += n % 2; cout &lt;&lt; \"n: \"; cin &gt;&gt; n; } else break; } cout &lt;&lt; conta; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#conta-dispari-da-sequenza-illimitata",
    "relUrl": "/cpp/#conta-dispari-da-sequenza-illimitata"
  },"21": {
    "doc": "C++ per esempi",
    "title": "Stampa cifre",
    "content": "Stampa le cifre di un numero intero inserito da tastiera a partire da quella meno significativa. #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Stampa cifre\\n\" &lt;&lt; \"Description: Stampa le cifre di un numero intero inserito da tastiera a partire da quella meno significativa.\\n\"; int n; cout &lt;&lt; \"Inserisci un numero intero\\n\"; cin &gt;&gt; n; n = ( n &gt; 0 ) ? n : -n; cout &lt;&lt; \"Cifre:\\n\"; do { cout &lt;&lt; '&gt;' &lt;&lt; n%10 &lt;&lt; '\\n'; n /= 10; } while ( n&gt;0 ); cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#stampa-cifre",
    "relUrl": "/cpp/#stampa-cifre"
  },"22": {
    "doc": "C++ per esempi",
    "title": "Tavola pitagorica",
    "content": "Costruisce la tavola pitagorica dato l’ordine “n” immesso da tastiera. #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Tavola pitagorica\" &lt;&lt; \"Description: Costruisce la tavola pitagorica dato l'ordine 'n' immesso da tastiera.\\n\"; int n; cout &lt;&lt; \"Inserisci l'ordine 'n' della tavola pitagorica:\"; cin &gt;&gt; n; cout &lt;&lt; '\\n'; n = n &lt; 1 ? 1 : n; for ( int i=1; i &lt;= n; i++ ){ for ( int j = 1; j &lt;= n; j++ ) cout &lt;&lt; i*j &lt;&lt; '\\t'; cout &lt;&lt; \"\\n\\n\\n\"; } cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#tavola-pitagorica",
    "relUrl": "/cpp/#tavola-pitagorica"
  },"23": {
    "doc": "C++ per esempi",
    "title": "Conta dispari da sequenza limitata",
    "content": "Riceve una sequenza di numeri da tastiera e conta i dispari. Termina anche se un numero inserito è nullo o negativo . #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Conta dispari da sequenza limitata\" &lt;&lt; \"Description: Riceve una sequenza di numeri da tastiera e conta i dispari. Termina anche se un numero inserito è nullo o negativo\\n\"; int M, n, conta = 0; cout &lt;&lt; \"Inserisci il numero di elementi della sequenza:\"; cin &gt;&gt; M; cout &lt;&lt; \"\\nInserisci la sequenza:\\n\"; cin &gt;&gt; n; conta += n % 2; for ( int i = 1; ( i &lt; M ) &amp;&amp; ( n &gt; 0 ); i++ ){ cin &gt;&gt; n; conta += n % 2; } cout &lt;&lt; \"\\nI numeri dispari della sequenza sono:\" &lt;&lt; conta; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#conta-dispari-da-sequenza-limitata",
    "relUrl": "/cpp/#conta-dispari-da-sequenza-limitata"
  },"24": {
    "doc": "C++ per esempi",
    "title": "Sequenza crescente, decrescente o non ordinata?",
    "content": "Riceve da tastiera una sequenza di numeri interi e calcola se la sequenza è ordinata in modo crescente, decrescente o non ordinata . #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Sequenza crescente, decrescente o non ordinata?\\n\" &lt;&lt; \"Description: Riceve da tastiera una sequenza di numeri interi e calcola se la sequenza è ordinata in modo crescente, decrescente o non ordinata\\n\"; int n, n1, n2, crescente = 0, decrescente = 0, uguale = 0; cout &lt;&lt; \"Immetti la Lunghezza della sequenza numerica:\"; cin &gt;&gt; n; cout &lt;&lt; \"\\nImmetti la sequenza:\\n\"; cin &gt;&gt; n1; for ( int i = 1; ( i &lt; n ) ; i++ ){ cin &gt;&gt; n2; crescente += n2 &gt; n1; decrescente += n2 &lt; n1; uguale += n2 == n1; n1 = n2; } if ( crescente == n-1 ) cout &lt;&lt; \"CRESCENTE\"; else if ( decrescente == n-1 ) cout &lt;&lt; \"DECRESCENTE\"; else if ( uguale == n-1 ) cout &lt;&lt; \"UGUALE.\"; else cout &lt;&lt; \"NON ORDINATA.\"; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#sequenza-crescente-decrescente-o-non-ordinata",
    "relUrl": "/cpp/#sequenza-crescente-decrescente-o-non-ordinata"
  },"25": {
    "doc": "C++ per esempi",
    "title": "Vettore palindromo",
    "content": "Calcola se il vettore immesso da tastiera è palindromo . #include &lt;iostream&gt; using namespace std; void riempi ( int*, int ); void stampa ( int*, int ); int palindromo ( int*, int ); int main(){ cout &lt;&lt; \"Title: Vettore palindromo\" &lt;&lt; \"Description: Calcola se il vettore immesso da tastiera è palindromo\\n\"; int nElem; cout &lt;&lt; \"Dimensione del vettore: \"; cin &gt;&gt; nElem; nElem = ( nElem &lt; 1 ) ? 1 : nElem; int *vett = new int[nElem]; riempi( vett, nElem ); stampa ( vett, nElem ); if ( palindromo ( vett, nElem ) ) cout &lt;&lt; \"Vettore palindromo.\"; else cout &lt;&lt; \"Vettore non palindromo.\"; cout &lt;&lt; '\\n'; } void riempi ( int *v, int n ){ for (int i = 0; i &lt; n; i++){ cout &lt;&lt; \"Elemento \" &lt;&lt; i+1 &lt;&lt; \": \"; cin &gt;&gt; v[i]; //v[i] = *(v+i) } } void stampa ( int *v, int n ){ cout &lt;&lt; \"\\n[\" &lt;&lt; n &lt;&lt; \"] &lt;\" &lt;&lt; v[0]; for ( int i = 1; i &lt; n; i++) cout &lt;&lt; \", \" &lt;&lt; v[i]; //v[i] = *(v+i) cout &lt;&lt; \"&gt;\\n\"; } int palindromo ( int *v, int n ){ for ( int i = 0, j = n-1; i &lt; j; i++, j--){ if ( v[i] != v[j] ) //v[i] != v[j] -&gt; *(v+i) != *(v+j) return 0; } return 1; } . ",
    "url": "http://localhost:4000/cpp/#vettore-palindromo",
    "relUrl": "/cpp/#vettore-palindromo"
  },"26": {
    "doc": "C++ per esempi",
    "title": "Conta ricorrenza numerica",
    "content": "Conta la ricorrenza delle cifre 0-9 presenti nella sequenza inserita da tastiera . #include &lt;iostream&gt; using namespace std; void azzera ( int*, int); void conta ( int*, int); void stampa ( int*, int); int main(){ cout &lt;&lt; \"Title: Conta ricorrenza numerica\\n\" &lt;&lt; \"Description: Conta la ricorrenza delle cifre 0-9 presenti nella sequenza inserita da tastiera.\\n\"; int LunghSeq, nElem = 10; int vettConta[nElem]; //Vettore conteggio cifre. azzera ( vettConta, nElem ); cout &lt;&lt; \"Lunghezza sequenza: \"; cin &gt;&gt; LunghSeq; cout &lt;&lt; \"Inserisci la sequenza:\\n\"; conta ( vettConta, LunghSeq ); stampa ( vettConta, nElem ); cout &lt;&lt; '\\n'; } void azzera ( int *v, int n ){ for ( int i = 0; i &lt; n; i++ ) v[i] = 0; } void conta ( int *v, int l ){ int num; for (int i = 0; i &lt; l; i++ ){ cin &gt;&gt; num; num = ( num &gt;= 0) ? num : -num; //Controllo sul segno. do{ v[ num % 10 ]++; num = num / 10; } while ( num &gt; 0 ); } } void stampa ( int *v, int n ){ for (int i = 0; i &lt; n; i++) cout &lt;&lt; '\\n' &lt;&lt; i &lt;&lt; ':' &lt;&lt; v[i]; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#conta-ricorrenza-numerica",
    "relUrl": "/cpp/#conta-ricorrenza-numerica"
  },"27": {
    "doc": "C++ per esempi",
    "title": "Conta ricorrenza letterale",
    "content": "Conta la ricorrenza delle lettere contenute in una stringa . | I caratteri non alfabetici vengono ignorati | Le maiuscole sono considerate muinuscole | . #include &lt;iostream&gt; using namespace std; void azzera ( int*, int ); void contaLettere ( char*, int* ); void stampaLettere ( int*, int ); int main (){ cout &lt;&lt; \"Title: Conta ricorrenza letterale\\n\" cout &lt;&lt; \"Description Conta la ricorrenza delle lettere contenute in una stringa\\n\" &lt;&lt; \"- I caratteri non alfabetici vengono ignorati\\n\" &lt;&lt; \"- Le maiuscole sono considerate muinuscole\\n\"; char stringa [100]; const int lettere = 26; int vettConta[lettere]; cout &lt;&lt; \"Inserisci la stringa:\"; cin &gt;&gt; stringa; azzera ( vettConta, lettere ); contaLettere ( stringa, vettConta ); stampaLettere ( vettConta, lettere ); cout &lt;&lt; '\\n'; } void azzera ( int *v, int n){ for ( int i = 0; i &lt; n; i++ ) v[i] = 0; } void contaLettere ( char *str, int *c ){ for ( int i = 0; str[i] != '\\0'; i++ ){ if ( str[i] &gt;= 'a' &amp;&amp; str[i] &lt;= 'z') c[ str[i] - 'a' ]++; else if ( str[i] &gt;= 'A' &amp;&amp; str[i] &lt;= 'Z' ) c[ str[i] - 'A' ]++; } } void stampaLettere ( int *v, int n ){ for ( int i = 0; i &lt; n ; i++ ) cout &lt;&lt; '\\n' &lt;&lt; char('a' + i) &lt;&lt; ':' &lt;&lt; v[i]; } . ",
    "url": "http://localhost:4000/cpp/#conta-ricorrenza-letterale",
    "relUrl": "/cpp/#conta-ricorrenza-letterale"
  },"28": {
    "doc": "C++ per esempi",
    "title": "Segno elementi di un vettore",
    "content": "Stampa il segno degli elementi di un vettore. #include &lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Title: Segno elementi di un vettore\\n\" &lt;&lt; \"Description: Stampa il segno degli elementi di un vettore\\n\"; int nElem, pos = 0, null = 0, neg = 0; cout &lt;&lt; \"Inserisci nElem: \"; cin &gt;&gt; nElem; nElem = ( nElem &gt; 0 ) ? nElem : 1; int *vett = new int[nElem]; for ( int i = 0; i &lt; nElem; i++ ){ cout &lt;&lt; \"Elemento \" &lt;&lt; i+1 &lt;&lt; ':'; cin &gt;&gt; vett[i]; } for ( int i = 0; i &lt; nElem; i++ ){ if ( vett[i] &gt; 0 ) pos++; else if ( vett[i] == 0 ) null++; else neg++; } cout &lt;&lt; \"\\nPos: \" &lt;&lt; pos &lt;&lt; \"\\nNull: \" &lt;&lt; null &lt;&lt; \"\\nNeg: \" &lt;&lt; neg; cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#segno-elementi-di-un-vettore",
    "relUrl": "/cpp/#segno-elementi-di-un-vettore"
  },"29": {
    "doc": "C++ per esempi",
    "title": "Vettore - elementi dispari, nulli o pari?",
    "content": "Acquisisce un vettore da tastiera e restituisce il numero degli elementi dispari, nulli e pari in un vettore . #include &lt;iostream&gt; using namespace std; void leggi ( int*, int ); int dzp ( int, int*, int ); int main (){ cout &lt;&lt; \"Title: Vettore - elementi dispari, nulli o pari?\\n\" &lt;&lt; \"Description: Acquisisce un vettore da tastiera Stampa il numero degli elementi dispari, nulli e pari in un vettore\\n\"; int nElem, selettore; cout &lt;&lt; \"Inserisci il numero di elementi del vettore, nElem: \"; cin &gt;&gt; nElem; nElem = nElem &gt; 1 ? nElem : 1; //Riempi vettore cout &lt;&lt; '\\n'; int *vett = new int[nElem]; leggi ( vett, nElem ); //Stampa il numero di elementi dispari selettore = -1; cout &lt;&lt; \"\\nDispari: \" &lt;&lt; dzp ( selettore, vett, nElem ); //Stampa il numero di elementi nulli selettore = 0; cout &lt;&lt; \"\\nNulli: \" &lt;&lt; dzp ( selettore, vett, nElem ); //Stampa il numero di elementi pari selettore = 1; cout &lt;&lt; \"\\nPari: \" &lt;&lt; dzp ( selettore, vett, nElem ); char c; cout &lt;&lt; '\\n' &lt;&lt; \"Comando?: (d = dispari, n = nulli, p = pari)\"; cin &gt;&gt; c; switch (c){ case 'd': cout &lt;&lt; \"\\nDispari: \" &lt;&lt; dzp ( -1, vett, nElem ); break; case 'n': cout &lt;&lt; \"\\nNulli: \" &lt;&lt; dzp ( 0, vett, nElem ); break; case 'p': cout &lt;&lt; \"\\nDispari: \" &lt;&lt; dzp ( 1, vett, nElem ); break; default: cout &lt;&lt; \"!!!\"; } cout &lt;&lt; '\\n'; } void leggi ( int *v, int n ){ for ( int i = 0; i &lt; n; i ++ ){ cout &lt;&lt; \"Elemento \" &lt;&lt; i + 1 &lt;&lt; ':'; cin &gt;&gt; v[i]; } } int dzp ( int sel, int *v, int n ){ int conta = 0; switch (sel){ case -1: for ( int i = 0; i &lt; n; i++ ){ v[i] = v[i] &lt; 0 ? -v[i] : v[i]; //NECESSARIO!! conta += v[i]%2; } break; case 0: for ( int i = 0; i &lt; n; i++ ){ v[i] = v[i] &lt; 0 ? -v[i] : v[i]; //NECESSARIO!! conta += ( v[i] == 0 ); } break; case 1: for ( int i = 0; i &lt; n; i++ ){ v[i] = v[i] &lt; 0 ? -v[i] : v[i]; //NECESSARIO!! conta += !( v[i]%2 || v[i] == 0 ); } break; } return conta; } . ",
    "url": "http://localhost:4000/cpp/#vettore---elementi-dispari-nulli-o-pari",
    "relUrl": "/cpp/#vettore---elementi-dispari-nulli-o-pari"
  },"30": {
    "doc": "C++ per esempi",
    "title": "Vettore - elementi ordinati?",
    "content": "Acquisisce un vettore da tastiera e restitusice se gli elementi sono in ordine crescente, descrescente o non ordinati . #include &lt;iostream&gt; using namespace std; void leggi ( int*, int ); int ordinato ( int*, int ); void stampa ( int ); int main (){ cout &lt;&lt; \"Title: Vettore - elementi ordinati? \\n\" &lt;&lt; \"Description: Acquisisce un vettore da tastiera e restitusice se gli elementi sono in ordine crescente, descrescente o non ordinati\\n\"; int nElem; cout &lt;&lt; \"nElem: \"; cin &gt;&gt; nElem; int *vett = new int [nElem]; leggi ( vett, nElem ); stampa ( ordinato( vett, nElem ) ); cout &lt;&lt; '\\n'; } void leggi ( int *v, int n ){ for ( int i = 0; i &lt; n; i++ ){ cout &lt;&lt; \"El \" &lt;&lt; i + 1 &lt;&lt; ':'; cin &gt;&gt; v[i]; } } int ordinato ( int *v, int n ){ int decrescente = 1; int crescente = 1; int uguale = 1; for ( int i = 0; i &lt; n - 1; i++ ){ decrescente &amp;= v[i] &gt; v[i+1]; crescente &amp;= v[i] &lt; v[i+1]; uguale &amp;= v[i] == v[i+1]; } if ( decrescente ) return -1; if ( uguale ) return 0; if ( crescente ) return +1; return +2; } void stampa ( int ord ){ switch ( ord ){ case -1: cout &lt;&lt; \"\\nVettore ordinato in senso decrescente.\"; break; case 0: cout &lt;&lt; \"\\nElementi del vettore uguali.\"; break; case +1: cout &lt;&lt; \"\\nVettore ordinato in senso crescente.\"; break; case +2: cout &lt;&lt; \"\\nElementi del vettore non ordinati.\"; } } . ",
    "url": "http://localhost:4000/cpp/#vettore---elementi-ordinati",
    "relUrl": "/cpp/#vettore---elementi-ordinati"
  },"31": {
    "doc": "C++ per esempi",
    "title": "Buffer circolare",
    "content": "Inizializza un buffer circolare di una dimensione impostata da tastiera. Sono disponibili i comandi: . | i: inserisci, inscerisce un elemento nel buffer | e: estrai, estrai il primo elemento dal buffer in modoalità LIFO (last input, first output) | &lt;: termina | . #include &lt;iostream&gt; using namespace std; // 'in' e 'out' devono essere inizialmente sovrapposti. // 'in' e 'out' sono INDICI. // COMANDO : // i = inserisci // e = estrai struct buffer { int dimensione; int in; int out; int nElem; int *pHEAP; }; void inizializza( buffer &amp;buf , int dim ); int inserisci ( buffer &amp;buf , int val ); int estrai ( buffer &amp;buf , int &amp;val ); int main () { cout &lt;&lt; \"Title: Buffer circolare\\n\" &lt;&lt; \"Description: Inizializza un buffer circolare di una dimensione impostata da tastiera.\\n\" &lt;&lt; \"Sono disponibili i comandi:\\n\" &lt;&lt; \"- 'i': inserisci, inscerisce un elemento nel buffer\\n\" &lt;&lt; \"- 'e': estrai, estrai il primo elemento dal buffer in modoalità LIFO (last input, first output)\\n\" &lt;&lt; \"- '&lt;': termina\\n\" buffer b1; int dim, val; char c; cout &lt;&lt; \"Inizializza il buffer.\\n\" &lt;&lt; \"Dimensione:\"; cin &gt;&gt; dim; inizializza ( b1, dim ); cout &lt;&lt; \"\\nInserisci un comando.\\n\" &lt;&lt; \"i -&gt; inserisci.\\n\" &lt;&lt; \"e -&gt; estrai.\\n\" &lt;&lt; \"&lt; -&gt; termina.\\n\"; for (;;){ cout &lt;&lt; \"\\n\\nComando?? \"; cin &gt;&gt; c; if ( c == '&lt;') break; switch (c){ case 'i':{ int i; cout &lt;&lt; \"\\nImmetti un valore:\"; cin &gt;&gt; val; i = inserisci ( b1, val); if ( !i ) cout &lt;&lt; \"\\n\\nBUFFER PIENO.\\n\"; break; } case 'e':{ int i; i = estrai ( b1, val ); if ( !i ){ cout &lt;&lt; \"\\n\\nBUFFER VUOTO.\\n\"; break; } else{ cout &lt;&lt; \"\\nL'elemento vale: \" &lt;&lt; val; break; } } default: break; } } cout &lt;&lt; '\\n'; } void inizializza ( buffer&amp; buf, int dim ){ buf.in = 0; buf.out = 0; buf.nElem = 0; buf.dimensione = dim &gt; 0 ? dim : 1; buf.pHEAP = new int [buf.dimensione]; } int inserisci ( buffer&amp; buf, int val){ // Controllo se e' pieno. if ( buf.nElem &gt;= buf.dimensione ){ return 0; } // Inserisco l'elemento nel primo posto vuoto. buf.pHEAP [buf.in++] = val; buf.in = buf.in == buf.dimensione ? 0 : buf.in; buf.nElem++; return 1; } int estrai ( buffer&amp; buf, int &amp;val ){ if ( buf.nElem &lt;= 0 ) return 0; val = buf.pHEAP [buf.out++]; buf.out = buf.out == buf.dimensione ? 0 : buf.out; buf.nElem--; return 1; } . ",
    "url": "http://localhost:4000/cpp/#buffer-circolare",
    "relUrl": "/cpp/#buffer-circolare"
  },"32": {
    "doc": "C++ per esempi",
    "title": "Contenitore",
    "content": "Inizializza due contenitori di una dimensione impostata da tastiera contenenti lettere. Sono disponibili i seguenti comandi: . | i: inizializza, inizializza un contenitore | &gt;: inserisci, iscerisce un elemento immesso da tastiera nel contenitore | &lt;: estrai, estrae un elmento da un contenitore | u: Ritorna un contenitore con gli elementi a comune | d: Ritorna un contenitore con gli elementi diversi | . #include &lt;iostream&gt; using namespace std; struct contenitore { int nElem; int cap; int ee[26]; }; void inizializza ( contenitore &amp;c, int N ){ N = N &gt; 1 ? N : 1; c.cap = N; for ( int i = 0; i &lt; 26; i++ ) c.ee[i] = 0; c.nElem = 0; } void inserisci ( contenitore &amp;c, char p ){ if ( c.nElem &gt;= c.cap || p &lt; 'a' || p &gt; 'z' ) return; c.ee[ p - 'a' ]++; c.nElem++; } void estrai ( contenitore &amp;c, char p ){ if ( p &lt; 'a' || p &gt; 'z' ) return; c.nElem -= c.ee[ p - 'a' ]; c.ee[ p - 'a' ] = 0; } void scrivi ( contenitore &amp;c ){ cout &lt;&lt; '&lt;'; if ( c.ee [0] &gt; 0 ) cout &lt;&lt; 'a' &lt;&lt; \": \" &lt;&lt; c.ee[0]; for ( int i = 1; i &lt; 25; i++ ){ if ( c.ee [i] == 0 ) continue; cout &lt;&lt; \", \" &lt;&lt; char ( 'a' + i ) &lt;&lt; \": \" &lt;&lt; c.ee[i]; } cout &lt;&lt; '&gt;'; } contenitore cambiaCapienza ( const contenitore &amp;c, int N ){ if ( N &lt; c.nElem ) return c; contenitore t; t = c; t.cap = N; return t; } contenitore diversiE ( const contenitore &amp;c1, const contenitore &amp;c2 ){ contenitore c3; int N; N = (c1.cap &lt;= c2.cap) ? c1.cap : c2.cap; inizializza ( c3, N ); for ( int i = 0; i &lt; 26; i++ ){ if ( c1.ee[i] == 0 || c2.ee[i] == 0 ) continue; c3.ee[i] = 1; c3.nElem++; } } contenitore diversiN ( const contenitore &amp;c1, const contenitore &amp;c2 ){ contenitore c3; int N; inizializza ( c3, c1.cap ); for ( int i = 0; i &lt; 26; i++ ){ if ( c1.ee[i] &gt; 0 || c2.ee[i] == 0 ){ c3.ee[i] = 1; c3.nElem++; } } return c3; } int capienza ( const contenitore c ){ return c.cap; } int quanti ( const contenitore c ) { return c.nElem; } int main (){ cout &lt;&lt; \"Title: Buffer\\n\" &lt;&lt; \"Description: Inizializza due contenitori di una dimensione impostata da tastiera contenenti lettere.\\n\" &lt;&lt; \"Sono disponibili i seguenti comandi:\\n\" &lt;&lt; \"- `i`: inizializza, inizializza un contenitore\\n\" &lt;&lt; \"- `&gt;`: inserisci, iscerisce un elemento immesso da tastiera nel contenitore\\n\" &lt;&lt; \"- `&lt;`: estrai, estrae un elmento da un contenitore\\n\" &lt;&lt; \"- `u`: Ritorna un contenitore con gli elementi a comune\\n\" &lt;&lt; \"- `d`: Ritorna un contenitore con gli elementi diversi\\n\" /* contenitore c1, c2; cout &lt;&lt; \"\\n\\n\" &lt;&lt; \"i: inizializza.\\n\" &lt;&lt; \"&gt;: inserisci.\\n\" &lt;&lt; \"&lt;: estrai.\\n\" &lt;&lt; \"c: cambia capienaza.\\n\" &lt;&lt; \"u: Ritorna un contenitore con gli elementi a comune.\\n\" &lt;&lt; \"d: Ritorna un contenitore con elementi diversi\" &lt;&lt; \"q:\" int capienza; int c; cout &lt;&lt; \"Inserisci capienza: \"; cin &gt;&gt; capienza; */ contenitore c1; inizializza ( c1, 5 ); inserisci ( c1, 'a' ); inserisci ( c1, 'b' ); inserisci ( c1, 'a' ); inserisci ( c1, 'a' ); inserisci ( c1, 'd' ); scrivi (c1); cout &lt;&lt; '\\n'; } . ",
    "url": "http://localhost:4000/cpp/#contenitore",
    "relUrl": "/cpp/#contenitore"
  },"33": {
    "doc": "Home",
    "title": "Benvenuto!",
    "content": "Questa pagina web nasce con l’intento di aiutare l’apprendimento dei linguaggi di programmazione utilizzando strumenti e metodi moderni. Imparerai i concetti basilari di programmazione dal basso livello alla programmazione Web seguendo un approccio snello orientato agli esercizi e alla pratica. Spero tu possa trovare utile il materiale a disposizione e ti auguro buon apprendimento! . Qui sotto trovi alcuni link rapidi.. Appunti, esempi e corsi completi su linguaggi di programmazione: C++ per esempi Python Javascript . Tutorial e guide su come installare ubuntu, creare una pagina web tramite Jekyll e GitHub e molto altro: Installa Ubuntu Crea la tua pagina web . ",
    "url": "http://localhost:4000/#benvenuto",
    "relUrl": "/#benvenuto"
  },"34": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"35": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Installazione e setup di Ubuntu in dual boot con Windows",
    "content": "Se stai leggendo questa guida avrai sentito parlare di Ubuntu e sarai quindi curioso di provarlo sul tuo PC tuttavia probabilmente sei un po’ titubante perchè non sai se riuscirai ad installarlo e soprattutto, qualora qualcosa andasse storto, a tornare indietro. Imbattendoti in altre guide ti sei trovato davanti in procedure mai viste e hai paura di scassare il tuo PC o peggio ancora a ricorrere all’assistenza per una stupida infatuazione del sistema operativo Ubuntu. In questa guida ti guiderò passo passo nell’installazione di Ubuntu 20.10 (ma va bene anche per la 20.04 LTS) e soprattutto ti darò la possibilità di “tornare indietro” alla tua attuale configurazione con Windows come se non fosse successo niente. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html"
  },"36": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Indice",
    "content": ". | E’ facile o difficile installare Ubuntu? | Installazione di Ubuntu . | 1. Collegati alla pagina ufficiale | 2. Crea un disco di avvio tramite penna USB . | Creazione di un disco di avvio tramite penna USB su Windows | Creazione di un disco di avvio tramite penna USB su Ubuntu | . | 3. Riavvia il PC nel bios/uefi menu | 4. Avvia ubuntu tramite penna USB | 5. Prova o installa ubuntu | 6. Installa Ubuntu | 7. GRUB Manager | . | Post-Installazione | Applicazioni utili per tutti . | VLC media player | Chromium web browser | Telegram | Gimp | GNOME tweaks | . | Applicazioni utili per programmatori . | git | Visual studio code | peek - gif video recorder | . | Qualche configurazione . | Installazione/rimozione pacchetti e applicazioni | File manager Nautilus | . | Rimozione di Ubuntu da dual-boot tramite Windows | . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#indice",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#indice"
  },"37": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "E’ facile o difficile installare Ubuntu?",
    "content": "Se non hai mai installato o ripristinato un sistema operativo sul tuo PC come Windows potresti non essere a conoscenza di certe procedure che potrebbero spaventarti, mi riferisco al punto 3. Riavvia il PC nel bios/uefi menu. Prima di iniziare questo tutorial dovresti dare un’occhiata a questa sezione e vedere se riesci a muoverti con il tuo PC come descritto. Se trovi difficoltà o trovi un’interfaccia diversa da quella mostrata in figura capisco che tu possa spaventarti, purtroppo ogni computer ha il suo software di gestione del BIOS. In questo caso è richiesta la massima attenzione e per questo ti consiglio di leggere più e più volte questa sezione finchè non sarà tutto chiaro prima di procedere con l’installazione di Ubunutu. Questa è l’unica potenziale difficoltà che troverai. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#e-facile-o-difficile-installare-ubuntu",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#e-facile-o-difficile-installare-ubuntu"
  },"38": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Installazione di Ubuntu",
    "content": ". | 1. Collegati alla pagina ufficiale | 2. Crea un disco di avvio tramite penna USB . | Creazione di un disco di avvio tramite penna USB su Windows | Creazione di un disco di avvio tramite penna USB su Ubuntu | . | 3. Riavvia il PC nel bios/uefi menu | 4. Avvia ubuntu tramite penna USB | 5. Prova o installa ubuntu | 6. Installa Ubuntu | 7. GRUB Manager | . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#installazione-di-ubuntu",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#installazione-di-ubuntu"
  },"39": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "1. Collegati alla pagina ufficiale",
    "content": "ubuntu.com e scarica la versione di Ubuntu che preferisci. Consiglio sempre di installare le versioni LTS (come la 20.04 LTS) poichè sono quelle più supportate e stabili. In questa guida installerò la versione 20.10 ma la procedura è la stessa anche per la 20.04 LTS . A fine download verrà scaricato un file con estensione .iso, ad esempio nel caso della versione 20.10 sarà ubuntu-20.10-desktop-amd64.iso. Il file appena scaricato è detto file immagine e deve essere trasferito e scompattato su CD o su penna USB creando un disco di avvio. Ti consiglio di procurarti una penna USB da almeno 8Gb vuota o con dei file che non ritieni importanti. L’intero contenuto della penna USB verrà sovra-iscritto con il contenuto del file immagine di Ubuntu . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#1-collegati-alla-pagina-ufficiale",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#1-collegati-alla-pagina-ufficiale"
  },"40": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "2. Crea un disco di avvio tramite penna USB",
    "content": "Procurati una penna USB da almeno 8Gb e inseriscila nel PC. Se sei su Windows segui la procedura Creazione di un disco di avvio tramite penna USB su Windows, se sei su ubuntu segui invece Creazione di un disco di avvio tramite penna USB su Ubuntu . Creazione di un disco di avvio tramite penna USB su Windows . Scarica ed esegui il software Rufus. Dovrai selezionare nella scheda Dispositivo/unità la penna USB appena inserita, dopodichè tramite il pulsante SELEZIONA dovrai scegliere il file immagine di ubuntu ubuntu-20.10-desktop-amd64.iso. Delle impostazioni successive ti consiglio di impostare: . | Schema partizione: MBR | Sistema destinazione: UEFI (non CSM) | . Premi su AVVIA e attendi che abbia finito . Nota: Potrebbe comparire un messaggio chiedendo la connessione ad internet per scaricare dalla rete alcuni file importanti per il boot di Ubunut, acconsenti e procedi . Creazione di un disco di avvio tramite penna USB su Ubuntu . Apri il software “Creatore dischi di avvio” e seleziona, nella scheda superiore, la sorgente che nel nostro caso sarà ubuntu-20.10-desktop-amd64.iso e, nella scheda inferiore, il disco da usare ovvero la penna USB appena inserita. Dopodichè clicca su Crea disco di avvio. Una volta terminata la procedura sarai pronto per lanciare ubuntu e installarlo . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#2-crea-un-disco-di-avvio-tramite-penna-usb",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#2-crea-un-disco-di-avvio-tramite-penna-usb"
  },"41": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "3. Riavvia il PC nel bios/uefi menu",
    "content": "Una volta che hai caricato il sistema operativo Ubuntu sulla penna USB dovrai istruire il tuo PC ad accendersi e leggere il contenuto della penna USB anzichè il sistema operativo Windows installato sul tuo hard disk interno. Per far ciò dovrai ravviare il computer in un menù speciale detto BIOS e cambiare il cosìdetto boot order. Devi sapere infatti che all’accensione del PC, questo software fa una semplice scansione tra tutti i dischi rigidi alla ricerca di un sistema avviabile, nel nostro caso un sistema operativo. Poichè in prima posizione c’è di default la voce Internal hard drive o qualcosa del genere significa che all’accensione verrà sempre controllato se c’è un sistema operativo sull’hard disk interno, troverà Windows installato e lo caricherà. Se per qualche assurdo motivo (l’hard disk viene danneggiato o formattato) il BIOS non troverà un sistema avviabile nell’hard disk, passerà alla seconda voce che probabilmente sarà CD-ROM drive e quindi cercherà un sistema avviabile all’interno del CD inserito nel lettore CD e così via. Tra queste voci c’è anche la voce Removable devices o USB o USB Hard Disk o USB HDD o voci simili che rappresenta proprio la penna USB. Quello che dobbiamo riuscire a fare sarà semplicemente spostare questa voce in prima posizione in modo da poter finalmente istruire il PC a partire tramite il sistema avviabile che sta sulla penna USB, Ubuntu. Per accedere al BIOS menu’ dovrai riavviare il PC e probabilmente dovrai premere ripetutamente il tasto F2 o F12 oppure ESC o F10. Se fai attenzione, appena si avvia il PC in basso compare per un istante una scritta con le indicazioni del tasto da premere per entrare nel BIOS menu. Ecco un esempio in cui per accedere al menu’ è necessario premere il tasto DEL . Lifewire - Change the Boot Order in BIOS . Se siete riusciti ad entrare nel BIOS menu probabilmente vi apparirà a schermo un’interfaccia del genere: . Lifewire - Change the Boot Order in BIOS . Il BIOS è un software essenziale ben lontano dalle attuali app Android. Per muoversi all’interno del menu’ è possibile consultare le indicazioni riportate in fondo allo schermo. In genere ci si muove con i tasti freccia, si esce con il tasto ESC e si esce salvando le impostazioni con F10. Devi raggiungere la scheda Boot. A questo punto appariranno le opzioni di boot elencate in ordine di priorità. Lifewire - Change the Boot Order in BIOS . Devi riuscire a spostare l’opzione relativa al disco USB, Removable devices o USB o USB Hard Disk o USB HDD o voci simili alla prima posizione. In molti casi per spostare le voci su utilizzano i tasti F5/F6 oppure i tasti +/-. Quando sarai riuscito a spostarla in prima posizione premi F10, salverai le modifiche e al prossimo avvio il PC scansionerà i dischi a partire dalla penna USB che hai inserito con Ubuntu pronto a partire. E’ tutto! . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#3-riavvia-il-pc-nel-biosuefi-menu",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#3-riavvia-il-pc-nel-biosuefi-menu"
  },"42": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "4. Avvia ubuntu tramite penna USB",
    "content": "Una volta settato l’avvio tramite penna USB, mantieni collegata la penna USB e riavvia il PC. Apparirà una schermata simile alla seguente . linux.org . Scegli la prima opzione Ubuntu e attendi che la procedura abbia finito. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#4-avvia-ubuntu-tramite-penna-usb",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#4-avvia-ubuntu-tramite-penna-usb"
  },"43": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "5. Prova o installa ubuntu",
    "content": "Appena avviato, si aprirà la procedura di installazione. Vi chiederà se vorrete provare Ubuntu (Try Ubuntu) o se vorrete installarlo (Install Ubunutu) . Se per voi è la prima volta vi consiglio l’opzione Try Ubuntu. Potrete navigare tra le applicazioni, nel file manager o nelle impostazioni per prendere familiarità con i settaggi principali. Non abbiate paura di fare pasticci. Ubuntu “vive” nella vostra penna USB. Troverete comunque il link di accesso rapido al setup di installazione sul desktop . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#5-prova-o-installa-ubuntu",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#5-prova-o-installa-ubuntu"
  },"44": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "6. Installa Ubuntu",
    "content": "Riporto passo passo la procedura wizard per l’installazione di ubuntu. Se avete scelto Install Ubuntu o avete aperto il link rapido alla wizard sul desktop seguite i seguenti passaggi. Selziona una lingua . Selziona il tipo di tastiera . Seleziona una rete wifi . Scegli il tipo di installazione . Se è la prima volta che installate Ubuntu, ti consiglio Installazione normale. Con questo tipo di installazione verranno aggiunti software e altri pacchetti utili e ti aiuta in fase di post-installazione. Spunta anche le altre opzioni come in figura . Dual boot? . Se è la prima volta che installate Ubuntu, ti consiglio di installare ubuntu a fianco di windows, nella cosìdetta modalità dual-boot. Ciò ti consentirà di avere sia Windows che Ubuntu sul tuo PC e di poter scegliere quale dei due sistemi operativi lanciare all’accensione del PC. E’ fortemente consigliata questa modalità per chi è alle prime armi con Ubuntu perchè per qualsiasi pasticcio tu possa combinare con Ubuntu potrai sempre riavviare il PC e lanciare windows per ripristinare il sistema. Personalmente uso questa modalità. Scegli la dimensione della partizione Ubuntu . E’ possibile scegliere quanta dimensione di spazio fisso allocare a Ubuntu e quanta lasciare per Windows. Se sei alla prima installazione di Ubuntu ti consiglio di allocare circa 100Gb in base anche ai programmi che hai intenzione di installare . Clicca su Installa e accetta i messaggi successivi. Imposta la località . Imposta lu tue informazioni personali . Scegli un nome per l’account e una password di accesso. Attendi la fine della procedura di installazione . Riavvia il pc . Togli la penna USB . Quando compare la seguente schermata (o simile), togli la penna USB e premi Invio . SHAILESHJHA.com . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#6-installa-ubuntu",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#6-installa-ubuntu"
  },"45": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "7. GRUB Manager",
    "content": "Al riavvio, se hai scelto la modalità dual boot dovrebbe apparire la schermata del software di gestione del dual boot, GRUB. Una cosa del genere.. Nel tuo caso apparirà la voce Ubuntu e Windows boot manager. Ogni volta che accenderai il PC avrai la possibilità di scegliere il sistema operativo da lanciare. Nota: normalmente il software ha un timeout di circa 10 secondi. Se non si sceglie nessuna opzione sceglierà la prima che in questo caso è Ubuntu . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#7-grub-manager",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#7-grub-manager"
  },"46": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Primo avvio",
    "content": "Una volta avviato Ubuntu da grub ti chiederà di effettuare l’accesso ad un account. Se effettuerai l’accesso tramite google, troverai tra i documenti il link rapido a google drive, indicato tramite l’email . Contemporaneamente si attiverà l’applicazione “Aggiornamenti software” che verificherà la presenza di aggiornamenti . Attendi che il processo finisca e riavvia il PC. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#primo-avvio",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#primo-avvio"
  },"47": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Post-Installazione",
    "content": "Una volta riavviato il PC apri il terminale con il comando Ctrl + Alt + T oppure tramite l’applicazione “Terminale” che puoi trovare nella lista delle applicazioni. Per un aggiornamento manuale del sistema digita: . sudo apt update &amp;&amp; sudo apt upgrade -y . Devo utilizzare obbligatoriamente il Terminale? 🤔 La maggior parte delle cose interessanti con Ubuntu si fanno attraverso il Terminale ma non devi spaventarti, non ha niente a che vedere con il prompt dei comandi di Windows. All’inizio ti limiterai a copiare qualche comando dal web senza capire molto (immagino che molti abbiano utilizzato questo approccio, il sottoscritto compreso) e non è raro che tu possa creare dei pasticci assolutamente rimediabili ma non certo da un utente inesperto ecco perchè ti ho consigliato di installare Ubuntu a fianco di Windows, così se avrai dei problemi potrai formattare la partizione di Ubuntu e riprovarci (non nego che l’ho fatto diverse volte) oppure abbandonare se pensi che il gioco non valga la candela.. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#post-installazione",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#post-installazione"
  },"48": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Applicazioni utili per tutti",
    "content": "Prima di installare qualche applicazione interessante apri il terminale con il comando Ctrl + Alt + T oppure tramite l’applicazione “Terminale” che puoi trovare nella lista delle applicazioni e aggiorna il sistema con il comando: . sudo apt-get upgrade . Ecco una breve lista di applicazioni utili per tutti che ho deciso di riportare: . | VLC media player | Chromium web browser | Telegram | Gimp | GNOME tweaks | . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#applicazioni-utili-per-tutti",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#applicazioni-utili-per-tutti"
  },"49": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "VLC media player",
    "content": "VLC media player è un software di riproduzione multimediale gratuito e open source, portatile, multipiattaforma e un server multimediale in streaming sviluppato dal progetto VideoLAN, VLC - official webpage . Per installarlo digita da terminale: . sudo snap install vlc . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#vlc-media-player",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#vlc-media-player"
  },"50": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Chromium web browser",
    "content": "Chromium è un browser per la navigazione web free e open source, chromium - offical webpage . Per installarlo digita da terminale: . sudo apt-get install chromium-browser . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#chromium-web-browser",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#chromium-web-browser"
  },"51": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Telegram",
    "content": "Telegram è un servizio di messaggistica istantanea, videochiamata e VoIP multipiattaforma basato su cloud, Telegram - offical webpage . Per installarlo digita da terminale: . sudo snap install telegram-desktop . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#telegram",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#telegram"
  },"52": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Gimp",
    "content": "GIMP è un editor di grafica raster gratuito e open source utilizzato per la manipolazione e l’editing di immagini o il disegno in forma libera, gimp - official webpage . Per installarlo digita da terminale: . sudo snap install gimp . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#gimp",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#gimp"
  },"53": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "GNOME tweaks",
    "content": "GNOME Tweak Tool è un’estensione della shell GNOME che puoi usare per modificare l’interfaccia GNOME . Cosa puoi fare con Gnome-tweaks? Puoi cambiare font o l’aspetto della barra superiore, togliere animazioni.. e richiamare altre estensioni che ti permettondo di estendere la personalizzazione dell’interfaccia grafica . E’ possibile installarlo dall’applicazione “Ubuntu Software” cercando nella barra di ricerca “Tweaks” o “Personalizzazioni” . Troverete l’applicazione sotto il nome di “Personalizzazioni”. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#gnome-tweaks",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#gnome-tweaks"
  },"54": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Applicazioni utili per programmatori",
    "content": "Ecco una breve lista di applicazioni utili per programmatori che ho deciso di riportare: . | git | Visual studio code | peek - gif video recorder | . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#applicazioni-utili-per-programmatori",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#applicazioni-utili-per-programmatori"
  },"55": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "git",
    "content": "Git è un sistema di controllo di versione distribuito gratuito e open source progettato per gestire qualsiasi progetto software, dai più piccoli ai più grandi vantando velocità ed efficienza, git - official webpage . Per installarlo digita da terminale: . sudo apt-get install git . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#git",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#git"
  },"56": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Visual studio code",
    "content": "Visual Studio Code è un editor di test gratuito realizzato da Microsoft per Windows, Linux e macOS, VS code - offical webpage . Per installarlo digita da terminale: . sudo snap install code --classic . Riporto anche alcune estensioni utili: . | Python (ms-python.python) | Live Server (ritwickdey.liveserver) | JavaScript (ES6) code snippets (xabikos.javascriptsnippets) | HTML Snippets (abusaidm.html-snippets) | Atom One Dark Theme (akamud.vscode-theme-onedark) | Markdown Preview Github Styling (bierner.markdown-preview-github-styles) | . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#visual-studio-code",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#visual-studio-code"
  },"57": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "peek - gif video recorder",
    "content": "peek è un semplice registratore di schermo che consente l’esportazione diretta in formato .gif. Il progetto è free e open source, peek - offical webpage . Per installarlo digita da terminale: . sudo add-apt-repository ppa:peek-developers/stable sudo apt update sudo apt install peek . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#peek---gif-video-recorder",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#peek---gif-video-recorder"
  },"58": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Qualche configurazione",
    "content": ". | Installazione/rimozione pacchetti e applicazioni | File manager Nautilus | . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#qualche-configurazione",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#qualche-configurazione"
  },"59": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Installazione/rimozione pacchetti e applicazioni.",
    "content": "Ubuntu non ha un software equivalente a windows come Disinstalla un programma da Pannello di controllo. Molte applicazioni puoi trovarle su Ubuntu Software e da questo centro è possibili disinstallarle. Molte altre invece, trovate sul web, è probabile che tu le abbia installate tramite il comando da terminale: . sudo apt install [package name]. In questo caso per disinstallarle devi digitare: . sudo apt remove [package name]. sudo apt autoremove. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#installazionerimozione-pacchetti-e-applicazioni",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#installazionerimozione-pacchetti-e-applicazioni"
  },"60": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "File manager Nautilus",
    "content": "Nautilus è il file manager di ubuntu. Di default la visualizzazione di file e cartelle è disposta orizzontalmente. E’ possibile cambiare la visualizzazione delle cartelle, le opzioni di antemprima dei file ed altre preferenze generali dai tre tasti in alto a destra. In alto, centralmente, Nautilus mostra il percorso attuale detto anche path-address o semplicemente path. Premendo Ctrl + L, il path diventa editabile ed è possibile inserire un percorso specifico (utile per raggiungere velocemente una directory). Personalmente ho preferito abilitare di default l’opzione del path editabile. Se vuoi farlo pure tu digita da terminale: . gsettings set org.gnome.nautilus.preferences always-use-location-entry true . Se vuoi tornare all’opzione di default digita: . gsettings set org.gnome.nautilus.preferences always-use-location-entry false . Inoltre ho impostato la visualizzazione di file nascoti e, dal menu’ preferenze/viste/viste a elenco, l’opzione Consentire l'espansione delle cartelle. Il risultato è il seguente. Un’altra cosa molto utile è richiamare il file manager da terminale. per far ciò basta digitare da terminale . nautilus . In questo modo aprirà tramite il file manager il path attuale a cui punta il terminale . Osservazione: E’ sempre possibile richiamare un’applicazione da terminale digitando il nome di esecuzione (che non coincide in generale con il nome esteso) . sudo apt remove [package name]. sudo apt autoremove . ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#file-manager-nautilus",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#file-manager-nautilus"
  },"61": {
    "doc": "Installazione e setup di Ubuntu in dual boot con Windows",
    "title": "Rimozione di Ubuntu da dual-boot tramite Windows",
    "content": "Qualcosa non va con Ubuntu? Vuoi tornare ad avere Windows come unica partizione? Nessun problema.. Una buona guida non dovrebbe solo aiutarti a raggiungere uno scopo ma anche a tornare indietro. | Clicca con il tasto destro su start e seleziona “Gestione disco”. Il software “Gestione disco” mostra tutte le partizioni presenti su disco. | Tra le partizioni troverai sicuramente (C:) ovvero la partizione principale Windows e altre partizioni che potranno essere identificate con il nome (Disco 0 partizione 0), (Disco 0 partizione 4) e così via.. Tra queste partizioni dovresti cercare una partizione che abbia una dimensione considerevole o, per essere più precisi, quella che hai impostato per ubuntu in fase di installazione dual-boot. Se ad esempio hai riservato 100Gb per ubuntu in fase di installazione, sarà la partizione da 100Gb ad dover essere eliminata. Non toccare le partizioni da qualche centinaia di Mb o pochi Gb, potrebbero essere riservate al sistema Windows. | . Nota: Nella scheda centrale di “Gestione disco” trovate una descrizione dettagliata delle partizioni. Dovresti essere in grado di individuare facilmente la Partizione Primaria che non rappresenta (C:) . Una volta individuata clicca con il tasto destro sulla partizione e seleziona Elimina Volume.. A questo punto non ti resta che estendere il volume (C:) (l’unica partizione valida) comprendendo la partizione non più allocata e ti ritroverai nella condizione esatta prima dell’installazione in dual boot di Ubunutu. Per far ciò clicca con il tasto destro sulla partizione (C:) e seleziona la voce Estendi Volume.. ",
    "url": "http://localhost:4000/tutorial/installa-ubunutu/installa-ubuntu.html#rimozione-di-ubuntu-da-dual-boot-tramite-windows",
    "relUrl": "/tutorial/installa-ubunutu/installa-ubuntu.html#rimozione-di-ubuntu-da-dual-boot-tramite-windows"
  },"62": {
    "doc": "Corso Javascript - 01",
    "title": "Cenni storici",
    "content": "Originariamente sviluppato da Brendan Eich della Netscape Communications con il nome di Mochan e successivamente di LiveScript, in seguito è stato rinominato “JavaScript” ed è stato formalizzato con una sintassi più vicina a quella del linguaggio Java di Sun Microsystems (che nel 2010 è stata acquistata da Oracle). Standardizzato per la prima volta il 1997 dalla ECMA con il nome ECMAScript, l’ultimo standard, di giugno 2017, è ECMA-262 Edition 8 ed è anche uno standard ISO (ISO/IEC 16262). Wikipedia - JavaScript . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-01.html#cenni-storici",
    "relUrl": "/corsi/javascript/Lezioni/js-01.html#cenni-storici"
  },"63": {
    "doc": "Corso Javascript - 01",
    "title": "Aspetti strutturali",
    "content": "Le caratteristiche principali di JavaScript sono: . | essere un linguaggio interpretato: il codice non viene compilato, ma eseguito direttamente; in JavaScript lato client, il codice viene eseguito dall’interprete contenuto nel browser dell’utente. | la sintassi è relativamente simile a quella dei linguaggi C, C++ e Java. | definisce le funzionalità tipiche dei linguaggi di programmazione ad alto livello (strutture di controllo, cicli, ecc.) e consente l’utilizzo del paradigma object oriented. | è un linguaggio debolmente tipizzato. | è un linguaggio debolmente orientato agli oggetti. Ad esempio, il meccanismo dell’ereditarietà è più simile a quello del Self e del NewtonScript che a quello del linguaggio Java, fortemente orientato agli oggetti. Gli oggetti stessi ricordano più gli array associativi del linguaggio Perl che gli oggetti di Java o C++. | . Altri aspetti di interesse: in JavaScript lato client, il codice viene eseguito direttamente sul client e non sul server. Il vantaggio di questo approccio è che, anche con la presenza di script particolarmente complessi, il web server non rischia sovraccarichi dato che il lavoro viene svolto dal client. Un rovescio della medaglia è che, nel caso di script particolarmente grandi, il tempo per il trasferimento dalla rete può diventare eccessivamente lungo. Inoltre ogni informazione che presuppone un accesso a dati memorizzati in una base di dati remota deve essere rimandata a un linguaggio che effettui materialmente la transazione, per poi restituire i risultati ad una o più variabili JavaScript; operazioni del genere richiedono un nuovo caricamento della pagina stessa. Questi limiti sono però stati superati in buona parte con la nascita di AJAX. Alcune altre caratteristiche di JavaScript degne di nota: . | Può usare caratteri Unicode | Può valutare le espressioni regolari (introdotte nella versione 1.2; supporto da parte dei browser: a partire da Netscape Navigator 4 e Internet Explorer 4) | Le espressioni JavaScript contenute in una stringa possono essere valutate usando la funzione eval. | . Wikipedia - JavaScript . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-01.html#aspetti-strutturali",
    "relUrl": "/corsi/javascript/Lezioni/js-01.html#aspetti-strutturali"
  },"64": {
    "doc": "Corso Javascript - 01",
    "title": "Versioni di Javascript",
    "content": "Un linguaggio di programmazione per essere definito uno standard ha bisogno di essere revisionato da un organo dedicato che prende il nome di ECMA International. Da questo lavoro è nato un nuovo standard che prende il nome di ECMAScript, anche se per tutti noi il termine JavaScript è rimasto sufficiente per definirlo. Nel corso degli anni lo standard ha definito nuove versioni e aggiornamenti del linguaggio e delle funzionalità. Nel contempo i browser si sono adattati alle modifiche introdotte per supportare il nuovo standard. Per orientarsi al supporto allo stato attuale da parte dei browser dei nuovi standard Javascript è possibile visionare la seguente tabella: . github - es6 table . Possiamo affermare che la versione più utilizzata ad oggi è ES6, la ES5 è obsoleta ma di fatto ormai anche la ES2016+ è supportata da tutti i browser. Indice riassuntivo: . | ECMAScript – un linguaggio standardizzato dal ECMA Internetional e supervisionato dal comitato T39; | JavaScript – il nome comune utilizzato per identificare lo standard ECMAScript. Con questo termine non ci rivolgiamo a una specifica versione dello standard, ma piuttosto al suo utilizzo a livello globale o parziale. | ECMAScript 5 (ES5) – questa rappresenta la quinta versione dello standard ECMAScript rilasciata nel 2009. Dato che a oggi i maggiori browser supportano questa versione è probabile che sarà la più comune da incontrare. | ECMAScript 6 (ES6)/ECMAScript 2015 (ES2015) – questa rappresenta la sesta versione dello standard ECMAScript rilasciata nel 2015. Al momento non è ancora supportata completamente dai nuovi browser e dato che presenta un gran numero di moduli ti consiglio di consultare questa tabella aggiornata. | ECMAScript 2016 – rilasciata a inizio 2016 presenta un esiguo numero di funzionalità implementate e non dovrebbe comportare grossi problemi di compatibilità nei browser in grado di supportare la versione ES2015. | . skillsandmore - Conosci tutte le versioni di Javascript? . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-01.html#versioni-di-javascript",
    "relUrl": "/corsi/javascript/Lezioni/js-01.html#versioni-di-javascript"
  },"65": {
    "doc": "Corso Javascript - 01",
    "title": "Configurazione di un IDE",
    "content": "Un ambiente di sviluppo integrato (in lingua inglese integrated development environment ovvero IDE, anche integrated design environment o integrated debugging environment, rispettivamente ambiente integrato di progettazione e ambiente integrato di debugging), in informatica, è un ambiente di sviluppo ovvero un software che, in fase di programmazione, supporta i programmatori nello sviluppo e debugging del codice sorgente di un programma: spesso l’IDE aiuta lo sviluppatore segnalando errori di sintassi del codice direttamente in fase di scrittura, oltre a tutta una serie di strumenti e funzionalità di supporto alla fase stessa di sviluppo e debugging. Wikipedia - Integrated development environment . Visual Studio Code - VS code . Visual Studio Code è un editor di codice sorgente sviluppato da Microsoft per Windows, Linux e macOS. Include il supporto per debugging, un controllo per Git integrato, Syntax highlighting, IntelliSense, Snippet e refactoring del codice. Sono personalizzabili il tema dell’editor, le scorciatoie da tastiera e le preferenze. È un software libero e gratuito, anche se la versione ufficiale è sotto una licenza proprietaria. Visual Studio Code è basato su Electron, un framework con cui è possibile sviluppare applicazioni Node.js. Wikipedia - Visual Studio Code . In questo corso useremo Visual Studio Code come IDE con le seguenti Estensioni: . | HTML snippets | javascript es6 code snippets | live server | . Per installare un’estensione con VS code vi rimando alla seguente immagine animata: . next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-01.html#configurazione-di-un-ide",
    "relUrl": "/corsi/javascript/Lezioni/js-01.html#configurazione-di-un-ide"
  },"66": {
    "doc": "Corso Javascript - 01",
    "title": "Corso Javascript - 01",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-01.html",
    "relUrl": "/corsi/javascript/Lezioni/js-01.html"
  },"67": {
    "doc": "Corso Javascript - 02",
    "title": "Primo script",
    "content": "Come integro codice javascript all’interno di una pagina html? . | Modo 1: E’ possibile inserire codice Javascript direttamente all’interno della pagina html tramite il tag &lt;script&gt;&lt;/script&gt;. | Modo 2: E’ possibile creare un collegamento con un file esterno con estensione .js che rappresenterà il file contente codice Javascript. Per creare tale collegamento è necessario inserire prima della chiusura del body il seguente link-tag &lt;script src=\"main.js\"&gt;&lt;/script&gt; . | . Modo 1: Codice Javascript interno alla pagina html . File html . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; //Stampa \"ciao mondo\" direttamente nella pagina html document.write(\"ciao mondo\"); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Una volta creato il file è possibile aprirlo direttamente con un web browser o tramite l’estensione di VS code live server che permette di lanciare l’aggiornamento della pagina in automatico quando si salva il file . Modo 2: Collegamento al file javascript main.js . File html . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script src=\"main.js\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . File JS . //Stampa \"ciao mondo\" direttamente nella pagina html document.write(\"ciao mondo\"); . Il modo migliore è sempre quello di creare file separati per dividere il contesto tra html / css / Javascript soprattutto per progetti grandi e strutturati. In questo corso per motivi di praticità invece utilizzeremo spesso codice Javascript all’interno della pagina html . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-02.html#primo-script",
    "relUrl": "/corsi/javascript/Lezioni/js-02.html#primo-script"
  },"68": {
    "doc": "Corso Javascript - 02",
    "title": "Corso Javascript - 02",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-02.html",
    "relUrl": "/corsi/javascript/Lezioni/js-02.html"
  },"69": {
    "doc": "Corso Javascript - 03",
    "title": "Console - Browser Web",
    "content": "La console è uno strumento molto utile in fase di sviluppo software all’interno del browser web. Segnala errori e warning sintattici dell’interprete javascript ed è molto utilizzata in fase di debug. E’ uno strumento interattivo, permette quindi la generazione di script Javascript in real-time e di stampare il valore di alcune variabili o strutture dati per monitorare il corretto funzionamento dello script. Il comando console.log() (o per meglio dire il metodo log() dell’oggetto Console, parleremo più avanti di metodi e oggetti..) stampa un messaggio sulla web console del browser. Il messaggio può essere una semplice stringa (opzionalmente, anche con valori sostituibili), o può essere uno qualsiasi o più oggetti JavaScript. File html . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; //Stampa \"ciao mondo\" direttamente nella pagina html console.log(\"ciao mondo\"); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Riporto qualche comando (metodo) aggiuntivo della console: . console.log('Ciao a tutti'); //stampa sulla console console.warn('Avvertimento'); //Genera un warning console.error('questo è un errore'); //Genera un errore console.table({name: 'simone'}); //Stampa in formato tabella console.clear(); //Pulisce la console . E’ bene comuqnue precisare che qualsiasi cosa venga stampata sulla console come log, errori o warning non saranno visibili all’utente ma solo in modalità sviluppatore. Una lista di tutti i metodi applicabili all’oggetto si trova alla pagina MDN - Console . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-03.html#console---browser-web",
    "relUrl": "/corsi/javascript/Lezioni/js-03.html#console---browser-web"
  },"70": {
    "doc": "Corso Javascript - 03",
    "title": "Alert &amp; prompt",
    "content": "alert() mostra una finestra di avviso contenente il testo specificato mentre prompt() mostra una finestra di dialogo che chiede all’utente di inserire del testo. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; //Salva l'input ricevuto in una variabile cioè un contenitore testuale myName = prompt('Come ti chiami?'); alert(\"Il tuo nome è ..\"); //Stampa il valore testuale contenuto nella variabile alert(myName); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Approfondimenti sul metodo alert() dell’oggetto Window li trovate su MDN - Window.alert() mentre approfondimenti sul metodo prompt() dell’oggetto Window li trovate su MDN - Window.prompt() . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-03.html#alert--prompt",
    "relUrl": "/corsi/javascript/Lezioni/js-03.html#alert--prompt"
  },"71": {
    "doc": "Corso Javascript - 03",
    "title": "Commenti",
    "content": "I commenti sono linee testuali non processate dall’interprete utili per la documentazione del codice. In javascritp ci sono due tipi di sintassi permesse per l’inserimento dei commenti. | // comment: per commenti inline | /* comment */: per commenti su linee multiple | . //inline comment /* multi line comment console.log('ciao a tutti'); */ . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-03.html#commenti",
    "relUrl": "/corsi/javascript/Lezioni/js-03.html#commenti"
  },"72": {
    "doc": "Corso Javascript - 03",
    "title": "Corso Javascript - 03",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-03.html",
    "relUrl": "/corsi/javascript/Lezioni/js-03.html"
  },"73": {
    "doc": "Corso Javascript - 04",
    "title": "Introduzione al DOM",
    "content": "E’ utile introdurre fin da subito il concetto di DOM per scrivere codice Javascript in grado di interagire con la pagina html altrimenti saremmo costretti ad utilizzare per tutto il corso console.log() e non vederne un’applicazione pratica. In informatica il Document Object Model (spesso abbreviato come DOM), letteralmente modello a oggetti del documento, è una forma di rappresentazione dei documenti strutturati come modello orientato agli oggetti. È lo standard ufficiale del W3C per la rappresentazione di documenti strutturati in maniera da essere neutrali sia per la lingua che per la piattaforma. È inoltre la base per una vasta gamma di interfacce di programmazione delle applicazioni, alcune di esse standardizzate dal W3C. Nativamente supportato dai browser per modificare gli elementi di un documento HTML, DOM è un modo per accedere e aggiornare dinamicamente il contenuto, la struttura e lo stile dei documenti. Per le numerose incompatibilità dovute al diverso tipo di gestione di DOM dai vari browser, il W3C ha stabilito delle specifiche standard. Wikipedia - Document Object Model . Nelle lezioni precedenti abbiamo già utilizzato il concetto di DOM. Un esempio è la stampa diretta sulla pagina html: . document.write(\"ciao mondo\"); . Il “comando” document.write() è in realtà un oggetto Javscript document a cui si applica un metodo write() ovvero una funzione richiamabile solo nel contesto di un particolare oggetto (DOM = Document Object Model). ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-04.html#introduzione-al-dom",
    "relUrl": "/corsi/javascript/Lezioni/js-04.html#introduzione-al-dom"
  },"74": {
    "doc": "Corso Javascript - 04",
    "title": "Introduzione alla libreria JQuery",
    "content": "Vediamo anche il metodo per aggiungere librerie esterne, necessario qualora volessimo utilizzare funzioni particolari di Javascript non presenti nel linguaggio standard. Installeremo JQuery perchè è una libreria popolare molto utilizzata proprio per la manipolazione del DOM ovvero degli elementi (oggetti) html. jQuery è una libreria JavaScript per applicazioni web, distribuita come software libero, distribuito sotto i termini della Licenza MIT. Nasce con l’obiettivo di semplificare la selezione, la manipolazione, la gestione degli eventi e l’animazione di elementi DOM in pagine HTML, nonché semplificare l’uso di funzionalità AJAX, la gestione degli eventi e la manipolazione dei CSS. Le sue caratteristiche permettono agli sviluppatori JavaScript di astrarre le interazioni a basso livello con i contenuti delle pagine HTML. L’approccio di tipo modulare di jQuery consente la creazione semplificata di applicazioni web e contenuti dinamici versatili. Nel 2020, jQuery risulta la libreria JavaScript più utilizzata in Internet, ovvero è presente nel 74,4% dei primi 10 milioni di siti Internet più popolari secondo W3Techs. Wikipedia - JQuery . Scaricate quindi la libreria JQeury da JQuery - download . Una volta scaricato il file è necessario copiarlo nella root del progetto e creare un collegamento al file html. Vediamo le funzioni base della libreria JQuery. Le approfondiremo quando necessario più avanti nel corso . | $(): Selettore di elementi html. E’ possibile selezionare un elemento tramite il suo id, la sua classe, un attributo.. | . Alcuni metodi: . | val(): legge/scrive l’attributo value dell’elemento selezionato | click(functionName): aggiunge l’evento click all’elemento selezionato e chiama la funzione functionName | . Vediamo un esempio: . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; table{border: 1px dashed black} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Nome&lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" id=\"myName\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Nuovo Nome&lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" id=\"new-name\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;input type=\"button\" value=\"OK\" id=\"btn-ok\"&gt; &lt;!-- Collegamento alla libreria JQuery.--&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; function cambiaNome(){ //Seleziono l'elemento con id \"new-name\" e ne prelevo il valore con il metodo \"val()\" //Memorizzo il risultato in una variabile di nome \"nuovoNome\" nuovoNome = $(\"#new-name\").val(); //Assegno all'elemento con id \"myName\" il valore associato alla variabile \"nuovoNome\" $(\"#myName\").val(nuovoNome); //Pulisco il contenuto del valore dell'elemento con id \"new-name\" $(\"#new-name\").val(\"\"); } //Associo all'elemento con id \"btn-ok\" un evento. //Al click sull'elemento con id \"btn-ok\" scatta la funzione \"cambiaNome\" $(\"#btn-ok\").click(cambiaNome) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ATTENZIONE: Il simbolo $ è un alias che sta per jQuery.E’ importante saperlo perchè ci sono altre librerie che utilizzano il simbolo $ e potrebbero quindi generare un conflitto. Per ovviare a ciò è possibile utilizzare il nome originale jQuery al posto del suo alias $. Con il comando $.noConflict() è possibile eliminare la definizione dell’ alias $ evitando quindi conflitti di ogni genere. A quel punto dovremmo però utilizzare necessariamente jQuery al posto di $ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-04.html#introduzione-alla-libreria-jquery",
    "relUrl": "/corsi/javascript/Lezioni/js-04.html#introduzione-alla-libreria-jquery"
  },"75": {
    "doc": "Corso Javascript - 04",
    "title": "DOM ed Eventi",
    "content": "Appena la pagina va in esecuzione il browser deve costruire il DOM ma nel contempo potrebbe già partire il codice Javascript e l’esecuzione potrebbe portare a qualche errore in certi casi a causa di asincronismo. L’esempio di sopra potrebbe essere uno di questi. Per ovviare a ciò è necessario racchiudere l’evento all’interno di una funzione anonima: . $( function(){ //evento }); . Vediamolo applicato all’esempio di prima: . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; table{border: 1px dashed black} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Nome&lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" id=\"myName\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Nuovo Nome&lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" id=\"new-name\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;input type=\"button\" value=\"OK\" id=\"btn-ok\"&gt; &lt;!-- Collegamento alla libreria JQuery.--&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; function cambiaNome(){ nuovoNome = $(\"#new-name\").val(); //Assegno all'elemento con id \"myName\" il valore associato alla variabile \"nuovoNome\" $(\"#myName\").val(nuovoNome); //Pulisco il contenuto del valore dell'elemento con id \"new-name\" $(\"#new-name\").val(\"\"); } //L'evento sarà pronto a scattare soltanto quando la struttura del DOM sarà preparata $( function(){ $(\"#btn-ok\").click(cambiaNome) }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . In questo modo si ha la sicurezza che il codice javascript e quindi l’evento possa scattare solo dopo la creazione del DOM. Il che non significa che comprende il caricamento di tutti gli oggetti come immagini, video o alcune formattazioni testuali ma solo la struttura html come oggetto Javascript che è tuttavia sufficiente al corretto funzionamento del codice Javascript. Altri metodi equivalenti: . $().ready(function (){ //event }) $(document).ready (function () { //event }) $(window).ready(function () { //event }) . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-04.html#dom-ed-eventi",
    "relUrl": "/corsi/javascript/Lezioni/js-04.html#dom-ed-eventi"
  },"76": {
    "doc": "Corso Javascript - 04",
    "title": "Corso Javascript - 04",
    "content": "Attenzione! Questa lezione sembrerà troppo approfondita e allo stesso tempo vaga considerato l’argomento che sto per trattare. Non preoccuparti se non capisci granchè, cerca comunque di cogliere il meccanismo di funzionamento dell’esempio che riporto in fondo alla lezione. Più avanti tratteremo questi argomenti in modo più dettagliato e diventerà tutto chiaro. Preferisco comunque affrontare questi argomenti “avanzati” fin da subito per evitare di basare l’apprendimento di Javascript sul solo comando console.log(). Mi sembra giusto passare all’interazione con html fin da subito per intuire con la pratica le potenzialità di questo linguaggio . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-04.html",
    "relUrl": "/corsi/javascript/Lezioni/js-04.html"
  },"77": {
    "doc": "Corso Javascript - 05",
    "title": "Variabili Javascript",
    "content": "Le variabili sono utilizzate per rappresentano dei valori attraverso un nome simbolico chiamato identificatore. var cognome = 'Rossi'; let nome = 'Mario'; const eta = 25; pi = 3.14; . Esistono tre tipi di keyword per la dichiarazione di variabili/costanti in JS. | var: Questa sintassi può essere usata per dichiarare sia variabili locali che globali | let: Introdotta nelle nuove versioni di JS può essere usata per dichiarare una variabile locale visibile in un blocco. | const: Introdotta nelle nuove versioni di JS è utilizzata per creare una costante in sola lettura. | Possono inoltre dichiarare una variabile senza nessuna keyword (come fatto negli esempi precedenti) ma è da evitare perchè sarà l’interprete ad assegnare a tale variabile delle proprietà | . Per le variabili dichiarate con let/var valgono le seguenti regole: . | Posso dichiarare una variabile e non inizializzarla. Se non inizializzata verrà attribuita ad essa il valore undefined | Posso assegnare il valore di una variabile successivamente nel programma e modificarne il contenuto a piacimento (Variable mutation) | . Per le variabili dichiarate con const valgono le seguenti regole: . | Una costante non può cambiare il suo valore attraverso ulteriori assegnazioni o essere ridichiarata mentre lo script è in esecuzione. | Deve essere sempre inizializzata ad un valore. | . let myVar = 4; //OK, inizializzazione (dichiarazzione + assegnamento) myVar = 23; //OK, assegnamento let myVar2; //OK, solo dichiarazione myVar2 = 29; //OK, assegnamento successivo alla dichiarazione const myVar = 4; //OK, inizializzazione (dichiarazione + assegnazione) myVar = 23; //EEROR!! - assegnazione successiva all'inizializzazione const myVar2; //EEROR!! - solo dichiarazione . Quando usare const, let o var . E’ sempre meglio usare const per tutte le strutture dati che non cambiano nel tempo, è più sicuro. E’ necessario usare let o var solo per le variabili o strutture dati che cambiano valore nel tempo. Tra let e var è preferibile usare let per mantenere la regola della visibilità all’interno di un blocco (l’argomento visibilità delle variabili verrà trattato più avanti). ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html#variabili-javascript",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html#variabili-javascript"
  },"78": {
    "doc": "Corso Javascript - 05",
    "title": "Tipi di dati in JS",
    "content": "L’ultimo standard ECMAScript definisce sette tipi di dati: . | Sei tipi di dato che sono primitives: . | Boolean. true e false. | null. Una parola chiave che denota un valore nullo. | undefined. Una proprietà il cui valore non è stato definito. | Number. 42 oppure 3.14159. | String. “Salve” | Symbol (nuovo in ECMAScript 2015). Un tipo di dato la cui istanza è unica e immutabile. | . | Due Reference Type . | Object | Array | . | . NOTA: typeof è una proprietà di Javascript che stampa (ritorna) il tipo di un oggetto o una variabile. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html#tipi-di-dati-in-js",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html#tipi-di-dati-in-js"
  },"79": {
    "doc": "Corso Javascript - 05",
    "title": "Dati nativi",
    "content": "//String //Le stringhe si indicano attraverso i singoli apici 'mystring' //attraverso i doppi apici \"myString\" o l'accento grave `myString` const nome = 'simone'; //Number const temp = -1.5; //Boolean const isMaggiorenne = true; //Null const value = null; //Interessante da vedere console.log (typeof value); //Undefined const cognome = undefined; //Symbol const mySymbol = Symbol(); . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html#dati-nativi",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html#dati-nativi"
  },"80": {
    "doc": "Corso Javascript - 05",
    "title": "Reference type",
    "content": "Gli array sono tipi di dato Reference Type utilizzati per raggruppare diversi dati appartenenti alla stessa categoria, ovvero un insieme di dati omogenei. Gli object anch’essi Reference Type sono utilizzati per raggruppare qualità / caratteristiche di una struttura dati più complessa, in genere eterogenea. //Arrays const nomi = ['simone', 'matteo', 'giovanni']; //Accedo ai campi di un array con l'operatore di indicizzazione [] // 0 1 2 //const nomi = ['simone', 'matteo', 'giovanni']; console.log(nomi[1]); //matteo //Objects const persona = { nome: 'simone', eta: 25, isMarry: true } //Accedo ai campi di un Object spcificando il nome della proprietà dell'oggetto console.log(persona.nome); //simone . Formalizzeremo più avanti sia la struttura dei dati primitivi sia la struttura dei reference type. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html#reference-type",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html#reference-type"
  },"81": {
    "doc": "Corso Javascript - 05",
    "title": "Alcune regole generali per dichiarazione di variabili",
    "content": ". | Usare sempre dei nomi significativi e esplicativi per le variabili | Usare sempre il camelCase quando la variabile è composta da due o più parole | Non si può usare un numero, un #, una @come inizio del nome di una variabile. E’ accettanto invece il simbolo`$ | Non si possono utilizzare, come identificatore, le keyword native di JS come: function, if, delete .. | E’ possibile dichiarare più variabili/costanti nello stesso statement, separando le dichiarazioni con una virgola. | . Vediamo qualche esempio qua sotto: . //Sintassi alternativa per dichiarare più costanti const na = 3, pigreco = 3.14; _iou = 0; $yui = 78; u-1 = 45; //ERROR!! 1T = 1; //ERROR!! . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html#alcune-regole-generali-per-dichiarazione-di-variabili",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html#alcune-regole-generali-per-dichiarazione-di-variabili"
  },"82": {
    "doc": "Corso Javascript - 05",
    "title": "Reference type Const",
    "content": "ATTENZIONE: Se un oggetto/array è dichiarato const non significa che non è possibile modificare i campi all’interno ma solo che non posso cambiare la natura dell’oggetto/array. QUesto proprio perchè gli oggetti/arrays sono, a differenza dei dati primitivi, dei reference type. Il loro nome rappresenta solo l’indirizzo per accedere al dato in memoria e non il dato in memoria. Questo concetto per adesso può sembrare poco chiaro ma i reference type verranno trattati ampiamente nelle sezioni più avanti. const myObj { nome: 'simone', cognome: 'di ricco', eta: 34 } myObj.nome = 'luca'; //OK myOby = 5; //ERROR perchè in questo caso cambierei la natura dell'oggetto. Da oggetto diventerebbe un &lt;number&gt; let myObj2 { ram: 4, rom: 5, anno: 2010 } myObj2.ram = 6; //OK myObj2 = 18; //OK è permesso in JS. Ecco perchè si dovrebbe usare &lt;const&gt; invece di &lt;let&gt; quando è possibile . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html#reference-type-const",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html#reference-type-const"
  },"83": {
    "doc": "Corso Javascript - 05",
    "title": "Approfondimento Null - undefined - NaN",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso . | undefined: Si verifica quando un oggetto o una variabile non assume nessun valore | null: E’ un valore attributo in fase di programmazione per identificare che un dato oggetto o variabile non assume nessun valore. Differisce da undefined poichè null è previsto deliberatamente in fase di programmazione | NaN: Viene restituito quando l’espressione numerica valutata non restituisce un Number | . Esempio 1: . console.log(null === undefined); //false . NOta: Per controllare gli stati di null e undefined è possibile utilizzare direttamente le keyword null e undefined come nell’esempio sopra illustrato. La stessa cosa non vale per NaN. In questo caso conviene utilizzare IsNaN(). //Attenzione console.log(NaN != NaN); //true !!!! . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html#approfondimento-null---undefined---nan",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html#approfondimento-null---undefined---nan"
  },"84": {
    "doc": "Corso Javascript - 05",
    "title": "Corso Javascript - 05",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-05.html",
    "relUrl": "/corsi/javascript/Lezioni/js-05.html"
  },"85": {
    "doc": "Corso Javascript - 06",
    "title": "Stringhe",
    "content": "Una stringa è un tipo di dato formato da zero o più caratteri racchiusi tra virgolette doppie \" \", singole ' ' o tramite accento grave. È possibile chiamare qualsiasi metodo dell’oggetto String su una stringa. const saluto = 'Ciao a tutti'; //Stringa multi-line. Attenzione all'apice -accento grave- var fraseFilosofica = `Il mattino ha l'oro in bocca. La sera no`; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html#stringhe",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html#stringhe"
  },"86": {
    "doc": "Corso Javascript - 06",
    "title": "Opearotri, Proprietà e Metodi su stringhe",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html#opearotri-propriet%C3%A0-e-metodi-su-stringhe",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html#opearotri-proprietà-e-metodi-su-stringhe"
  },"87": {
    "doc": "Corso Javascript - 06",
    "title": "Operatori",
    "content": ". | +: Uninione/concatenazione di stringhe. | [ index ]: Indicizzazione di una stringa come array di caratteri, in sola lettura | &lt;, &gt;: operatori di confronto tra stringhe. Ritornano un boolean, true/false | {}: Interpolazione di stringhe | . const nome = \"marco\"; const cognome = \"rossi\"; console.log(nome + \" \" + cognome); //marco rossi // 0,1,2,3,4 //const cognome = \"r o s s i\"; console.log(cognome[1]); //\"o\" console.log(nome &gt; cognome); //true . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html#operatori",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html#operatori"
  },"88": {
    "doc": "Corso Javascript - 06",
    "title": "Approfondimento Interpolazioni di stringhe",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso. E’ possibile utilizzare espressioni all’interno di un unica stringa. Per far cio’ si ricorre all’interpolazione di stringhe molto comune anche in altri linguaggi di programmazione. La sintassi prevede di usare SOLO l’accento grave e per le espressioni da valutare, l’operatore $ seguito dall’espressione racchiusa tra le parentesi graffe { } . let index = 0; //La variabile \"index\" viene valuta console.log(`${index} ciao`); //0 index = index + 1; console.log(`${index} ciao`); //1 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html#approfondimento-interpolazioni-di-stringhe",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html#approfondimento-interpolazioni-di-stringhe"
  },"89": {
    "doc": "Corso Javascript - 06",
    "title": "Le stringhe sono immutabili",
    "content": "!! LE STRINGHE SONO IMMUTABILI IN JAVASCRIPT !! Questo significa che dal punto di vista semantico le stringhe non possono essere trattate come array di caratteri e di fatto non è possibile applicare alle stringhe i metodi applicabili agli array. var saluto = \"ciao\" saluto[2] = 'Z'; //Attenzione! LE STRINGHE SONO IMMUTABILI console.log(saluto); //ciao . L’unico modo per cambiare un carattere all’interno di una stringa è distruggere l’intera stringa e ricostruirne un’altra con il carattere modificato tramite assegnamento. Non è possibile tuttavia modificre direttamente il singolo carattere di una stringa. var saluto = \"ciao\" saluto[2] = '2'; console.log(saluto); //ciao saluto = \"super ciao\" console.log(saluto); //super ciao . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html#le-stringhe-sono-immutabili",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html#le-stringhe-sono-immutabili"
  },"90": {
    "doc": "Corso Javascript - 06",
    "title": "Proprietà",
    "content": "La propietà .lenght restituisce il numero di caratteri presenti nella stringa. const nome = \"marco\"; console.log(nome.lenght); //5 console.log(\"ciao\".lenght); //4 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html#propriet%C3%A0",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html#proprietà"
  },"91": {
    "doc": "Corso Javascript - 06",
    "title": "Metodi",
    "content": "Vediamo adesso diversi metodi applicabili alle stringhe. Più avanti, quando tratteremo gli oggetti capiremo meglio la terminologia metodo/proprietà/operatore. Per adesso è importante capirne gli esempi applicativi e imparare ad usare le stringhe per intuirne le potenzialità. toUpperCase(): . | Parametri : | Tipo di Ritorno : String | Descrizione : Ritorna la stringa in caratteri maiuscoli console.log(\"simOne di rIcco\".toUpperCase()); //SIMONE DI RICCO . | . toLowerCase(): . | Parametri : | Tipo di Ritorno : String | Descrizione :Ritorna la stringa in caratteri minuscoli console.log(\"SimOne di rICco\".toLowerCase()); //simone di ricco . | . charAt(index): . | Parametri : index (Number) | Tipo di Ritorno : String | Descrizione : Restituisce il carattere all’interno della stringa corrispondente all’indice index (Ottenibile anche tramite l’indicizzazione [ ]) console.log(\"JaVascript\".charAt(3)); //a . | . substring(indexStart, indexEnd): . | Parametri : indexStart (Number), indexEnd (Number) | Tipo di Ritorno : String | Descrizione : Ritorna la porzione di stringa compresa tra indexStart incluso e indexEnd escluso. console.log(\"JaVascript language\".substring(0, 10)); //JaVascript . | . endsWith(param) . | Parametri : param (String) | Tipo di Ritorno : boolean | Descrizione :ritorna un boolean se la stringa termina o meno con la stringa param console.log(\"myPdfFile.pdf\".endsWith(\"pdf\")); //true console.log(\"01110000011\".endsWith(\"10\")); //false . | . startsWith(string): . | Parametri : param (String) | Tipo di Ritorno : boolean | Descrizione :ritorna un boolean (true/false) se la stringa inizia o meno con la stringa param console.log(\"01110000011\".startsWith(\"0111\")); //true . | .includes(param1, ?param2): . | Parametri : param1 (String), param2 (Number), | Tipo di Ritorno : boolean | Descrizione : cerca la stringa param1 a partire dall’indice opzionale param2, ritorna true o false. Se param2 è omesso cerca param1 in tutta la stringa console.log(\"JaVascript is programming language\".includes(\"is\")); //true console.log(\"JaVascript is programming language\".includes(\"is\", 16)); //false . | . indexOf(param1, ?param2) : . | Parametri : param1 (String), param2 (Number), | Tipo di Ritorno : Number | Descrizione : Cerca la prima occorrenza della stringa param1 a partire dall’indice opzionale param2. Restituisce l’indice della posizione di param1. Se non trova param1 nella stringa restituisce -1. Se param2 è omesso cerca param1 in tutta la stringa a partire dall’inizio della stringa. console.log(\"0011010111000110\".indexOf(\"111\")); //7 console.log(\"0011010111000110\".indexOf(\"111\", 10)); //-1 . | . lastIndexOf(param1, param2) : . | Parametri : param1 (String), param2 (Number), | Tipo di Ritorno : Number | Descrizione : Cerca l’ultima occorrenza della stringa param1 vincolato dall’indice limite param2. Restituisce l’indice della posizione di param1. Se param2 è omesso cerca param1 in tutta la stringa a partire dalla fine della stringa. | . padEnd(param1, param2): . | Parametri : param1 (Number), param2 (String), | Tipo di Ritorno : String | Descrizione : Riempie la stringa fino a una lunghezza massima di param1, aggiungendo come riempitivo in coda la stringa param2 | . console.log(\"100\".padEnd(5, \"-\")); //100-- console.log(\"100000\".padEnd(5, \"-\")); //100000 console.log(\"\".padEnd(5, \"-\")); //----- . padStart(param1, param2): . | Parametri : param1 (Number), param2 (String) | Tipo di Ritorno : String | Descrizione : Riempie la stringa fino a una lunghezza massima di param1, aggiungendo come riempitivo in testa la stringa param2 | . console.log(\"120\".padStart(5, \"0\")); //00120 console.log(\"9040\".padStart(5, \"0\")); //09040 console.log(\"2\".padStart(5, \"0\")); //00002 . repeat(param): . | Parametri : param (Number) | Tipo di Ritorno : String | Descrizione : Replica la stringa un numero di volte specificato da param | . console.log(\"0\".repeat(32)); //00000000000000000000000000000000 console.log(\"*-\".repeat(8)); //*-*-*-*-*-*-*-*- . replace(param1, param2): . | Parametri : param1 (String), param2 (String) | Tipo di Ritorno : String | Descrizione : Sostituisce la prima occorennza della stringa param1 con la stringa param2. Funziona anche se param1 è un’espressione regolare. | . console.log(\"Ciao a tutto il mondo\".replace(\"o\", \"0\")); //Cia0 a tutto il mondo //Uso interessante del metodo replace() con un'espressione regolare. /o/g &gt;&gt;&gt; cerca tutte le occorrenze //di \"o\". Nota che \"g\" sta per \"global\" cioè tutte console.log(\"Ciao a tutto il mondo\".replace(/o/g, \"0\")); //Cia0 a tutt0 il m0nd0 . search(param): . | Parametri : param (String) | Tipo di Ritorno : Number | Descrizione : cerca la prima occorenza di param e restituisce l’indece della posizione. Funziona anche se param è un’espressione regolare. console.log(\"Ciao a tutto il mondo\".search(\"mondo\")); //16 console.log(\"Ciao a tutto il mondo\".search(\"ill\")); //-1 . | . slice(indexStart, indexEnd): . | Parametri : indexStart (Number), indexEnd (Number) | Tipo di Ritorno : String | Descrizione : Restituisce una sottostringa tra indexStart e indexEnd | . console.log(\"DRCSMN91L22E715Q\".slice(6, 8)); //91 . split(separatore, ?max): . | Parametri : separatore (String), max (Number) | Tipo di Ritorno : Array of String | Descrizione : Può essere utilizzato per raggruppare delle stringhe sottoforma di array contenute in un unica grande stringa e separate tramite un separatore. Crea quindi un array di stringhe contenente porzioni di stringa derivate dalla stringa a cui è applicato il metodo separate dal carattere (o i caratteri) come indicato nel parametro separatore. Il secondo parametro, opzionale, indica il numero massimo di elementi dell’array. | . const myArray = \"Ciao a tutto il mondo\".split(\" \"); console.log(myArray); //(5) [\"Ciao\", \"a\", \"tutto\", \"il\", \"mondo\"] console.log(myArray[3]); //il const myArray2 = \"Ciao a tutto il mondo\".split(\" \", 3); console.log(myArray2); //(3) [\"Ciao\", \"a\", \"tutto\"] . trim(): . | Parametri : | Tipo di Ritorno : String | Descrizione : rimuove gli spazi all’inizio e alla fine di una stringa console.log(\"#\" + \" Ciao a tutto il mondo \".trim() + \"#\"); //#Ciao a tutto il mondo# . | . trimLeft(): . | Parametri : | Tipo di Ritorno : String | Descrizione : rimuove gli spazi in testa a una stringa. console.log(\"#\" + \" Ciao a tutto il mondo \".trimLeft() + \"#\"); //#Ciao a tutto il mondo # . | . trimRight(): . | Parametri : | Tipo di Ritorno : String | Descrizione : rimuove gli spazi in coda a una stringa console.log(\"#\" + \" Ciao a tutto il mondo \".trimRight() + \"#\"); //# Ciao a tutto il mondo# . | . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html#metodi",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html#metodi"
  },"92": {
    "doc": "Corso Javascript - 06",
    "title": "Corso Javascript - 06",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-06.html",
    "relUrl": "/corsi/javascript/Lezioni/js-06.html"
  },"93": {
    "doc": "Corso Javascript - 07 - Esercitazione",
    "title": "Conta parole",
    "content": "Il seguente esempio conta le parole inserite in un certo input testuale. Faremo uso dell’evento keypress che scatta ad ogni tasto premuto e del metodo su stringa split() . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Conta parole&lt;/h1&gt; &lt;table&gt; &lt;td&gt;Testo:&lt;/td&gt; &lt;tr&gt; &lt;td&gt;&lt;textarea cols=\"30\" rows=\"10\" id=\"myText\" &gt;&lt;/textarea&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Parole nel testo:&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=\"text\" id=\"word-count\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;!-- Collegamento alla libreria JQuery.--&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; function contaParole(){ //Prelievo il valore dell'elemento con id=\"myText\" lo converto a stringa e lo assegno alla variabile testoInserito let testoInserito = String($(\"#myText\").val()); //Prelievo la proprietà lenght di un array formato da parole separate da spazi. //ATTENZIONE. NON FUNZIONA CON I DOPPI SPAZI let conteggioParole = (testoInserito.split(\" \").length); $(\"#word-count\").val(conteggioParole) } $( function(){ $(\"#myText\").keypress(contaParole) }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-07-Esercitazione.html#conta-parole",
    "relUrl": "/corsi/javascript/Lezioni/js-07-Esercitazione.html#conta-parole"
  },"94": {
    "doc": "Corso Javascript - 07 - Esercitazione",
    "title": "Corso Javascript - 07 - Esercitazione",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-07-Esercitazione.html",
    "relUrl": "/corsi/javascript/Lezioni/js-07-Esercitazione.html"
  },"95": {
    "doc": "Corso Javascript - 08",
    "title": "Approfondimento - Rappresentazione numerica in Javascript",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-08.html#approfondimento---rappresentazione-numerica-in-javascript",
    "relUrl": "/corsi/javascript/Lezioni/js-08.html#approfondimento---rappresentazione-numerica-in-javascript"
  },"96": {
    "doc": "Corso Javascript - 08",
    "title": "Numeri in Fixed Point",
    "content": "Per il tipo nativo Number Javascript utilizza 64 bit per la memorizzazione in ram sia per i numeri interi sia per i numeri decimali a “virgola fissa” (fixed point). Vengono utilizzati 53 bit per la parte intera e i restanti 9 per la parte decimale anche se un numero è intero. Il numero intero (safe) più grande rappresentabile in JS è MAX_SAFE_INTEGER. | MAX_SAFE_INTEGER: E’ il numero intero più grande a cui posso applicare un incremento in modo affidabile. | . Il metodo isSafeInteger() applicato all’oggetto Number ritorna un boolean che indica se il numero è safe oppure no . console.log(Number.MAX_SAFE_INTEGER); //9007199254740991 /* (property) NumberConstructor.MAX_SAFE_INTEGER: number The value of the largest integer n such that n and n + 1 are both exactly representable as a Number value. The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1. */ let n1 = Number.MAX_SAFE_INTEGER; //OK, safe console.log(Number.isSafeInteger(n1)); //true let n2 = Number.MAX_SAFE_INTEGER + 1; //OK, safe console.log(Number.isSafeInteger(n2)); //true let n3 = Number.MAX_SAFE_INTEGER + 1 //NO, non safe, il risultato non è affidabile console.log(Number.isSafeInteger(n3)); //false . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-08.html#numeri-in-fixed-point",
    "relUrl": "/corsi/javascript/Lezioni/js-08.html#numeri-in-fixed-point"
  },"97": {
    "doc": "Corso Javascript - 08",
    "title": "Numeri in Floating Point",
    "content": "La rappresentazione dei numeri in “virgola mobile” (floating point) Javascript utilizza lo standard IEEE 754 . //MAX_VALUE rappresenta il più grande numero rappresentabile in virogla mobile console.log(Number.MAX_VALUE); //1.7976931348623157e+308 //Attenzione!! console.log(0.1 + 0.2 == 0.3); //false console.log(0.1 + 0.2); //0.30000000000000004 . Lo standard IEE754 rappresenta i numeri reali e come tale è necessario conoscere ed evitare alcune pratiche di cattivo utilizzo dei numeri reali. In generale con i numeri reali è da evitare l’utilizzo di espressioni di uguglianza. E’ possibile tuttavia trasformare un’espressione di uguaglianza esatta con un’espressione di “vicinanza” definendo un’accuratezza in questo modo: . const accuracy = 0.0000001; console.log( (0.1 + 0.2) - 0.3 &lt; accuracy); //true . Il più piccolo valore rappresentabile (vicino allo zero) in floating point è: . console.log(Number.MIN_VALUE); //5e-324 . E’ bene ricordare che la rappresentazione dei numeri con lo standard IEEE 754 è su scala logaritimica quindi non lineare. Questo significa che posso rappresentare numeri estremamente grandi e numeri estremamente piccoli ma la distanza tra due numeri diventa sempre più grande (e quindi meno accurata) mano a mano che i numeri diventano grandi e diventa più piccola (quindi più accurata) mano a mano che i numeri diventano piccoli . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-08.html#numeri-in-floating-point",
    "relUrl": "/corsi/javascript/Lezioni/js-08.html#numeri-in-floating-point"
  },"98": {
    "doc": "Corso Javascript - 08",
    "title": "Not A Number NaN",
    "content": "Javascript restituisce NaN quando valuta che un’espressione non può essere svolta e darebbe errore. console.log( 10/\"ciao\" ); //NaN console.log( 0/0 ); //NaN . E’ buona norma evitare NaN in special modo per quelle espressioni numeriche non prevedibili o che ricevono valori dall’esterno. La funzione isNaN() restituisce un boolean se un dato valore risulta o meno un NaN. let myVar = 12 / 0.9; if ( !isNaN(myVar) ) { console.log(myVar); } . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-08.html#not-a-number-nan",
    "relUrl": "/corsi/javascript/Lezioni/js-08.html#not-a-number-nan"
  },"99": {
    "doc": "Corso Javascript - 08",
    "title": "Corso Javascript - 08",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-08.html",
    "relUrl": "/corsi/javascript/Lezioni/js-08.html"
  },"100": {
    "doc": "Corso Javascript - 09",
    "title": "Approfondimento - Codifica caratteri Javascript",
    "content": "Questa parte per adesso potrebbe essere troppo approfondita, è possibile saltarla senza pregiudicare il corso . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-09.html#approfondimento---codifica-caratteri-javascript",
    "relUrl": "/corsi/javascript/Lezioni/js-09.html#approfondimento---codifica-caratteri-javascript"
  },"101": {
    "doc": "Corso Javascript - 09",
    "title": "ASCII",
    "content": "ASCII (acronimo di American Standard Code for Information Interchange, Codice Standard Americano per lo Scambio di Informazioni) è un codice per la codifica di caratteri. Lo standard ASCII è stato pubblicato dall’American National Standards Institute (ANSI) nel 1968 . Con US-ASCII si intende un sistema di codifica dei caratteri a 7 bit, comunemente utilizzato nei calcolatori, proposto dall’ingegnere dell’IBM Bob Bemer nel 1961, e successivamente accettato come standard dall’ISO, con il nome di ISO/IEC 646. Alla specifica iniziale basata su codici di 7 bit fecero seguito negli anni molte proposte di estensione ad 8 bit e quindi 256 caratteri, con lo scopo di raddoppiare il numero di caratteri rappresentabili. Nei PC IBM si fa per l’appunto uso di una di queste estensioni, ormai standard de facto, chiamata extended ASCII o high ASCII. In questo ASCII esteso, i caratteri aggiunti sono vocali accentate, simboli semigrafici e altri simboli di uso meno comune. I caratteri di ASCII esteso sono codificati nei cosiddetti codepage. Ogni paese presentò la sua proposta di ASCII esteso per rappresentare e codificare tutti i caratteri aggiuntivi relativi alla lingua creando non pochi problemi di comunicazione tra continenti. C’era quindi bisogno di uno standard nuovo e unico per tutto il mondo. Nasce quindi l’UNICODE. Wikipedia - ASCII . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-09.html#ascii",
    "relUrl": "/corsi/javascript/Lezioni/js-09.html#ascii"
  },"102": {
    "doc": "Corso Javascript - 09",
    "title": "Unicode",
    "content": "Unicode è stato creato per risolvere i limiti dei tradizionali schemi di codifica dei caratteri Ad esempio , sebbene i caratteri definiti nella ISO 8859-1 siano ampiamente utilizzati in paesi diversi, spesso si verifica incompatibilità tra paesi diversi. Molti metodi di codifica tradizionali hanno un problema comune, ovvero consentono ai computer di gestire un ambiente bilingue (di solito utilizzando lettere latine e le loro lingue native), ma non possono supportare un ambiente multilingue allo stesso tempo (riferendosi a una situazione in cui più lingue possono essere mescolate contemporaneamente). Unicode era stato originariamente pensato come una codifica a 16 bit (quattro cifre esadecimali) che dava la possibilità di codificare 65.535 (2^16 -1) caratteri. Tanto si riteneva essere sufficiente per rappresentare i caratteri impiegati in tutte le lingue scritte del mondo. Ora invece lo standard Unicode, che tendenzialmente è perfettamente allineato con la norma ISO/IEC 10646, prevede una codifica fino a 21 bit e supporta un repertorio di codici numerici che possono rappresentare circa un milione di caratteri. Ciò appare sufficiente a coprire anche i fabbisogni di codifica di scritti del patrimonio storico dell’umanità, nelle diverse lingue e negli svariati sistemi di segni utilizzati. Al 2009, solo una piccolissima parte di questa disponibilità di codici è assegnata. Per lo sviluppo dei codici sono infatti previsti 17 “piani” (“planes”, in inglese), da 00 a 10hex, ciascuno con 65.536 posizioni (quattro cifre esadecimali), ma solo i primi tre e gli ultimi tre piani sono ad oggi assegnati[2], e di questi il primo, detto anche BMP, è praticamente sufficiente a coprire tutte le lingue più usate. Concretamente, questo repertorio di codici numerici è serializzato mediante diversi schemi di ricodifica, che consentono l’uso di codici più compatti per i caratteri usati più di frequente. È previsto l’uso di codifiche con unità da 8 bit (byte), 16 bit (word) e 32 bit (double word), descritte rispettivamente come UTF-8, UTF-16 e UTF-32. UTF-8 è di fatto lo standard successore di ASCII, perfettamente compatibile mentre javascript utilizza l’UTF-16 consentendo di rappresentare un numero elevato di caratteri, 655536. Ciò non significa che per le codifiche UTF-8 e UTF-16 non sia possibile rappresentare tutti i caratteri unicode ma a causa della codifica potrebbe non essere conveniente in certe situazioni utilizzare UTF-8 anzichè UTF-16. In certe situazioni infatti UTF-8 potrebbe aver bisogno di 3 byte per rappresentare un certo carattere mentre UTF-16 soltanto 2. Dipende dalla frequenza e natura dei caratteri. Si rirprenda il template html: . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; . Alla riga . &lt;meta charset=\"UTF-8\"&gt; . E’ indicata la codifica necessaria per la trasmissione e visualizzazione corretta dei caratteri. Wikipedia - Unicode Wikibooks - Unicode/Character reference/0000-0FFF . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-09.html#unicode",
    "relUrl": "/corsi/javascript/Lezioni/js-09.html#unicode"
  },"103": {
    "doc": "Corso Javascript - 09",
    "title": "Caratteri di Escape",
    "content": "Il backslash \\ indica la presenza di un carattere escape che non sarebbe possibile inserire direttamente con un editor di testo poichè verrebbe interpretato come un comando. Vediamo qualche carattere di escape: . | \\n: a capo | \\t: tab | \\b: Backspace | \\r: Carriage return | \\\\: Backslash | \\': Single quote | \\\": Double quote | . Introdotti gli escape è possibile vedere come inserire un carattere UNICODE tramite il suo codice identificatico: \\u{codice_unicode} . let str = \"\\u{1234}\"; // ሴ === 1234 codice unicode, 1 carattere console.log (str); console.log (str, str.lenght); //ሴ, 1 //Attenzione!! la codifica UTF-16 non raggiunge direttamnte il carattere stampato qui di seguito //Utilizza quindi 2 caratteri Javascript let str = \"\\u{1F600}\"; // 😀 === 1F600 codice unicode, 2 caratteri console.log (str, str.lenght); //😀, 2 . Posso risalire al codice unicode tramite il metodo charCodeAt(index) che restituisce il codice unicode del carattere specificato da index. let str = \"\\u{1F600}\"; // 😀 === 1F600 codice unicode 2 caratteri console.log (str); //😀 console.log(str.charCodeAt(0), strCharCodeAt(1)); //55357 56832 . C’è anche il metodo che più completo charCodePointAt(index) che restituisce il codice unicode che inizia da index. Questo è necessario per quei caratteri che non possono essere rappresentati da UTF-16 e che quindi sono necessari “due caratteri” Javascript . let str = \"\\u{1F600}\"; // 😀 === 1F600 codice unicode 2 caratteri console.log (str); //😀 console.log(str.codePointAt(0)); // 128512 === 1F600 . Posso usare l’unicode anche per il nome di variabili! Da evitare. var \\u{1f68} = 2017; // Ὠ . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-09.html#caratteri-di-escape",
    "relUrl": "/corsi/javascript/Lezioni/js-09.html#caratteri-di-escape"
  },"104": {
    "doc": "Corso Javascript - 09",
    "title": "Corso Javascript - 09",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-09.html",
    "relUrl": "/corsi/javascript/Lezioni/js-09.html"
  },"105": {
    "doc": "Corso Javascript - 10",
    "title": "Type conversion",
    "content": "JavaScript è un linguaggio con tipi assegnati dinamicamente. Questo significa che non si va a specificare il tipo di dato che una variabile conterrà quando viene dichiarata e anche che il tipo di un dato viene convertito automaticamente a seconda delle necessità durante l’esecuzione dello script. Nelle espressioni che coinvolgono valori numerici e stringhe con l’operatore + JavaScript converte i valori numerici in stringhe (conversione implicita). Vediamo come formalizzare questi concetti e distinguere tra conversioni esplicite e implicite. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-10.html#type-conversion",
    "relUrl": "/corsi/javascript/Lezioni/js-10.html#type-conversion"
  },"106": {
    "doc": "Corso Javascript - 10",
    "title": "Conversione esplicita",
    "content": "E’ una pratica di buona programmazione far riferimento a conversioni esplicite come trattamento di errori o ricezione dati dall’esterno anche quando “sembra” che non sia necessario. La conversione esplicita forza un tipo e previene in molti casi errori di mal interpretazione dei dati. Vediamo alcune soluzioni disponibili per la conversione esplicita tra tipi in Javascript. | String(value): converte value (qualsiasi tipo) in un tipo String | value.toString(): metodo che converte value in una stringa (equivalente a String(value)) | Number(value): converte value in un tipo Number | parseInt(value) - converte value in un tipo Number e ritorna la parte intera | parseInt(value) - converte value in un tipo Number e ritorna la parte frazionaria | . //Number to string - String(value) let value = 45; String(value); //ritorna la stringa '45' //Boolean to string - String(value) let value2 = false; String(value2); //ritorna la stringa 'false' //Metodo alternativo - toString(); let value3 = false; (value3).toString(); //ritorna la stringa 'false' //String to number - Number(string) let string = '45'; Number(string); //ritorna il numero 45 //Boolean to number - Number(string) let myBool = true; Number(myBool); //1ritorna il numero 1 parseInt('100.31'); //100 parseFloat('100.31'); //31 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-10.html#conversione-esplicita",
    "relUrl": "/corsi/javascript/Lezioni/js-10.html#conversione-esplicita"
  },"107": {
    "doc": "Corso Javascript - 10",
    "title": "Conversione implicita",
    "content": "Anche se è sconsigliato affidarsi alle conversioni implicite, cioè quelle che Javascript effettua implicitamente incontrando in una espressione due o più valori appartenenti a tipi diversi, è bene conoscerle per difendersi e saperle trattare. In alcuni semplici casi non è comunque sbagliato utilizzarle. Riporto un esempio qui sotto: . // Type coercion const nome = 'marco'; const cognome = 'rossi'; const eta = 20; const sposato = false; console.log(nome + ' ' + cognome + ' ha ' + eta + ' anni. ' + 'é sposato? ' + sposato); /* Console: --------------- marco rossi ha 20 anni. E' sposato? false */ . Notiamo che la variabile eta è stata convertita da tipo numero a tipo stringa e la variabile sposato è stata convertita da boolean a stringa in modo implicito da javascript. Queste sono conversioni effettuate in modo automatico da javascript poichè nella stessa espressione si trovano tipi diversi. back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-10.html#conversione-implicita",
    "relUrl": "/corsi/javascript/Lezioni/js-10.html#conversione-implicita"
  },"108": {
    "doc": "Corso Javascript - 10",
    "title": "Corso Javascript - 10",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-10.html",
    "relUrl": "/corsi/javascript/Lezioni/js-10.html"
  },"109": {
    "doc": "Corso Javascript - 11",
    "title": "Operatori matematici",
    "content": "Vediamo alcuni operatori matematici direttamente con un esempio: . /* operatori matematici */ const questAnno = 2020; const etaMarco = 25; const etaStefano = 22; const nascitaMarco = questAnno - etaMarco; const nascitaStefano = questAnno - etaStefano; console.log(nascitaMarco); //1995 console.log(nascitaStefano); //1998 console.log(5 * 2); //10 console.log(5 / 2); //2.5 // Modulo: resto della divisione intera console.log(7 % 4); //3 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-11.html#operatori-matematici",
    "relUrl": "/corsi/javascript/Lezioni/js-11.html#operatori-matematici"
  },"110": {
    "doc": "Corso Javascript - 11",
    "title": "Pre e post incremento/decremento",
    "content": "L’operatore di incremento incrementa (aggiunge uno a) il suo operando e restituisce un valore. | ++x / --x: pre incremento/decremento restituisce il valore dopo l’incremento | x++ / x--: post incremento/decremento restituisce il valore prima di incrementare | . Pre e post incremento/decremento rilevano una differenza solo in caso di valutazione di un’espressione. Se troviamo Pre e post incremento/decremento isolati in un singolo statement (come spesso accade) risultano equivalenti. //Pre incremento x = 0; y = ++x; //y=1, x=1 //Post incremento x = 0; y = x++; //y=0, x=1 x = 0; x++; //x=1 // in questo caso è equivalente a ++x x = 0; ++x; //x=1 // in questo caso è equivalente a x++ . La lista di tutti gli operatori aritmetici la troviamo alla pagina: MDN - Operatori Aritmetici . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-11.html#pre-e-post-incrementodecremento",
    "relUrl": "/corsi/javascript/Lezioni/js-11.html#pre-e-post-incrementodecremento"
  },"111": {
    "doc": "Corso Javascript - 11",
    "title": "Oggetto MATH",
    "content": "In JS è possibile utilizzare funzioni matematiche avanzate tramite l’oggetto Math. Vediamo alcune tra le più comuni: . | Math.round(value): Ritorna l’arrotondamento di value al numero più vicino | Math.ceil(value): Ritorna l’ arrotondamento di value per eccesso | Math.floor(value): Ritorna l’ arrotondamento di value per difetto | Math.trunc(value): Ritorna il troncamento di value | Math.sqrt(value): Ritorna la radice quadrata di value | Math.abs(value): Ritorna il valore assoluto di value | Math.pow(base, exp): Ritorna l’esponenziale: base^exp | Math.min(value1, value2, value3, ..): Ritorna il minimo valore tra i parametri indicati tra gli argomenti | Math.max(value1, value2, value3, ..): Ritorna il massimo valore tra i parametri indicati tra gli argomenti | Math.random(): Ritorna un numero random decimale nel range 0 - 1 | . Esempio: . //Math.PI console.log(Math.PI); //stampa del numero pi greco: 3,14.. Math.round(42.1); //42 Math.round(42.5); //43 Math.round(42.7); //43 Math.ceil(42.1); //43 Math.ceil(42.5); //43 Math.ceil(42.7); //43 Math.floor(42.1); //42 Math.floor(42.5); //42 Math.floor(42.7); //42 Math.sqrt(25); //5 Math.sqrt(42.5); //6. Math.abs(-25); //25 Math.abs(42.5); //42.5 Math.pow(2, 5); //32 (2**5); //32 === 2^5 &gt;&gt; equivalente a Math.pow(2, 5); Math.pow(5, 3); //125 Math.min(2, 5, -2, 6); //-2 Math.max(2, 5, -2, 6); //6 Math.random(); //0.234514378429 Math.trunc(12.78899); //12 . La seguente riga di codice genera un numero casuale da 0 a 100. console.log(Math.round((Math.reandom()*100))); //45 . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-11.html#oggetto-math",
    "relUrl": "/corsi/javascript/Lezioni/js-11.html#oggetto-math"
  },"112": {
    "doc": "Corso Javascript - 11",
    "title": "Corso Javascript - 11",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-11.html",
    "relUrl": "/corsi/javascript/Lezioni/js-11.html"
  },"113": {
    "doc": "Corso Javascript - 12",
    "title": "Equazione di II grado",
    "content": "Il seguente script calcola le soluzioni reali di un’equazione di secondo grado. Stampa “Soluzioni immaginarie” se le soluzioni non sono reali . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; table{ border: 2px solid gray; padding: 5px; border-radius: 10px; } body { font-size: 20px; } .cofficient{ text-align: right; } #resolve{ height: 30px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Equazione di II grado&lt;/h1&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;input type=\"text\" placeholder=\"a\" class=\"cofficient\" id=\"a\"&gt; x&lt;sup&gt;2&lt;/sup&gt; + &lt;input type=\"text\" placeholder=\"b\" class=\"cofficient\" id=\"b\"&gt; x + &lt;input type=\"text\" placeholder=\"c\" class=\"cofficient\" id=\"c\"&gt; = 0 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=\"button\" value=\"Risolvi\" id=\"resolve\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;input type=\"text\" placeholder=\"---\" id=\"ris-1\"&gt; x&lt;sub&gt;1&lt;/sub&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;input type=\"text\" placeholder=\"---\" id=\"ris-2\"&gt; x&lt;sub&gt;2&lt;/sub&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; function ResolveEqIIgrado(){ //Prelievo il valore dell'elemento con id=\"myText\" lo converto a stringa e lo assegno alla variabile testoInserito let a = Number($(\"#a\").val()); let b = Number($(\"#b\").val()); let c = Number($(\"#c\").val()); let delta = Math.sqrt(b**2 - 4*a*c); if (isNaN(delta)) { $(\"#ris-1\").val(\"Soluzioni immaginarie\"); $(\"#ris-2\").val(\"Soluzioni immaginarie\"); } else{ let ris1 = (-b - delta)/(2*a); let ris2 = (-b + delta)/(2*a); $(\"#ris-1\").val(String(ris1)); $(\"#ris-2\").val(String(ris2)); } } $( function(){ $(\"#resolve\").click(ResolveEqIIgrado) }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-12.html#equazione-di-ii-grado",
    "relUrl": "/corsi/javascript/Lezioni/js-12.html#equazione-di-ii-grado"
  },"114": {
    "doc": "Corso Javascript - 12",
    "title": "Corso Javascript - 12",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-12.html",
    "relUrl": "/corsi/javascript/Lezioni/js-12.html"
  },"115": {
    "doc": "Corso Javascript - 13",
    "title": "Operator Precedence",
    "content": "La precedenza degli operatori determina la priorità in cui gli operatori vengono valutati. Gli operatori con precedenza più alta sono valutati prima degli operatori con precedenza più bassa. La lista completa di tutti gli operatori con le rispettive precedenze la troviamo qua: MDN - Operator Precedence . Da notare che l’operatore ( ) ha la priorità più alta e quindi la precedenza su tutti gli operatori. Questo significa che per forzare la precedenza, esattamente come per la matematica è possibile sfruttare le parentesi ( ). Regola di buona programmazione: Non è mai una buona pratica di programmazione lasciare espressioni troppo complesse prive di parentesi anche se sono rispettate dal punto di vista semantico tutte le precedenze previste. Le parentesi, oltre a forzare la precedenza, offrono visivamente una chiarezza maggiore, evitando di commettere errori banali di svista. /* Operatore precedence */ /* Calcolo eta' media */ const questAnno = 2020; const maggiorenne = 18; const nascitaMarco = 1996; const nascitaLuca = 2006; /* l'operatore \"-\" ha precedenza sull'operatore \"&gt;\" quindi l'espressione è svolta correttamente da sinistra verso destra La sottrazione verrà quindi svolta prima dell'operatore \"&gt;\" */ let isMaggiorenne = questAnno - nascitaMarco &gt; maggiorenne console.log(isMaggiorenne); //true let isMaggiorenne = questAnno - nascitaMarco &gt; maggiorenne console.log(isMaggiorenne); //false //Grouping const etaMarco = questAnno - nascitaMarco; //24 const etaLuca = questAnno - nascitaLuca; //14 // In questo caso poichè la divisione ha precedenza sulla somma è necessario forzare la priorità inserendo le parentesi // Calcolo età media console.log ( (etaMarco + nascitaLuca)/2 ); //19 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-13.html#operator-precedence",
    "relUrl": "/corsi/javascript/Lezioni/js-13.html#operator-precedence"
  },"116": {
    "doc": "Corso Javascript - 13",
    "title": "Associatività",
    "content": "L’associatività specifica in che modo vengono eseguite le elaborazioni a parità di operatore. Mentre la precedenza valuta la priorità, l’associatività valuta la modalità di esecuzione. Quasi tutti gli operatori hanno un’associatività left-to-right ovvero, l’elaborazione è da sinistra verso destra esattamente come per la matematica. Alla pagina MDN - Operator Precedence si trova una tabella riassuntiva che mostra priorità/associatività per ogni operatore. //Associatività del'operatore +. L'operatore + vale sia da somma che da concatenazione stringa for(let i=0, j=5; i&lt;=j; i++,j--){ document.writeln(i + j + \" \"); //5//5//5 } for(let i=0, j=5; i&lt;=j; i++,j--){ document.writeln(i + (j + \" \") ); //05//14//23 } . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-13.html#associativit%C3%A0",
    "relUrl": "/corsi/javascript/Lezioni/js-13.html#associatività"
  },"117": {
    "doc": "Corso Javascript - 13",
    "title": "Operatori di assegnamento",
    "content": "L’operatore di assegnazione semplice = viene utilizzato per assegnare un valore a una variabile. L’operazione di assegnazione restituisce il valore assegnato. È possibile concatenare l’operatore di assegnazione per assegnare un singolo valore a più variabili (multiple assignment). //Multiple assignement // E' possibile dichiarare due variabili contemporaneamente let x, y; /*Molto importante! L'operatore \"= è un operatore da destra a sinistra */ x = y = (2 * 7) * 3 - 5; // 9 * 3 - 5 // 27 - 5 // 22 console.log(x); //22 console.log(y); //22 . Molto utilizzati sono anche gli operatori di assegnamento composto come: +=, -=, *=, /= .. Hanno una sintassi molto chiara e compatta. Vengono utilizzati nei casi in cui è necessario elaborare anche il valore della variabile a sinistra contrariamente all’operatore di assegnamento semplice = che ignora e distrugge il valore contenuto a sinistra. let x = 10; x *= 2; // x = x * 2 console.log(x); //20 x /= 2; // x = x / 2 console.log(x); //10 . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-13.html#operatori-di-assegnamento",
    "relUrl": "/corsi/javascript/Lezioni/js-13.html#operatori-di-assegnamento"
  },"118": {
    "doc": "Corso Javascript - 13",
    "title": "Corso Javascript - 13",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-13.html",
    "relUrl": "/corsi/javascript/Lezioni/js-13.html"
  },"119": {
    "doc": "Corso Javascript - 14",
    "title": "Operatori Logici",
    "content": "Gli operatori logici &lt;, &lt;=, ==, &gt;, &gt;=, != .. trattano l’espressione come un espressione logica e ritornano un valore booleano. Sono spesso utilizzati nel controllo di condizioni in costruttti if o cicli while, for e tutti i costrutti condizionali e iterativi inerenti. console.log(1 &gt;= 5); //false //Per le stringhe si segue un ordine lessicografico console.log(\"ciao\" &lt; \"pasta\"); //true console.log(12 != 5); / //true . Nota - Operatore di uguaglianza: == Vs === . Entrambi sono operatori logici di uguaglianza. | ===: Uguaglianza forte, valuta l’uguaglianza dell’espressione valutanto il tipo e il contenuto. | ==: Uguaglianza debole, valuta l’uguaglianza dell’espressione valutanto il contenuto effettuando prima una conversione di tipo. | . /* === */ console.log(5 === 5); //true console.log(15 === \"15\"); //false -&gt; sono tipi di dati diversi, il primo è un numero, il secondo è una stringa console.log(null === undefined); //false -&gt; sono tipi di dati diversi. /* == */ console.log(5 == 5); //true console.log(15 == \"15\"); //true!! -&gt; sono tipi di dati diversi, il primo è un numero, il secondo è una stringa ma il contenuto è lo stesso console.log(false == 0); //true!! -&gt; entrambi hanno un valore falsy anche se il tipo è diverso console.log(null == undefined); //true!! -&gt; entrambi hanno un valore falsy anche se il tipo è diverso . In generale l’uguaglianza forte è da preferire per essere sicuri di effettuare quindi anche un controllo sul tipo e rendere più semplice l’individuazione di errori run-time spesso causati da conversioni implicite di Javascript. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-14.html#operatori-logici",
    "relUrl": "/corsi/javascript/Lezioni/js-14.html#operatori-logici"
  },"120": {
    "doc": "Corso Javascript - 14",
    "title": "Logica Booleana",
    "content": "Trattano l’espressione come un’espressione logica e permettono la concatenazione di espressioni con più operatori logici. Ritornano un valore booleano: TRUE, FALSE. Vediamo i principali: . AND : condition1 &amp;&amp; condition2: Ritorna true se entrambe condition1 e condition2 risultano true. OR : condition1 || condition2: Ritorna true se almeno una tra condition1 e condition2 risulta true. NOT : !condition1: Inverte il risultato logico di condition1. console.log( (1 &gt;= 5) || (\"ciao\" &lt; \"pasta\") ); //true console.log( (\"ciao\" &lt; \"pasta\") &amp;&amp; (12 == 5) ); //false . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-14.html#logica-booleana",
    "relUrl": "/corsi/javascript/Lezioni/js-14.html#logica-booleana"
  },"121": {
    "doc": "Corso Javascript - 14",
    "title": "Approfondimento - Short evalutation",
    "content": "Se un’ espressione logica risulta necessariamente true o false le elaborazioni concatenate non vengono elaborate. | true || expr: expr non viene valutata | false &amp;&amp; expr: expr non viene valutata | . Esempio: . console.log( (1 &lt; 2) || (\"ciao\" &lt; \"pasta\") ); //true, (\"ciao\" &lt; \"pasta\") non viene valutata console.log( (12 == 5) &amp;&amp; (\"c\" &lt; \"p\") ); //false, (\"c\" &lt; \"p\") non viene valutata . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-14.html#approfondimento---short-evalutation",
    "relUrl": "/corsi/javascript/Lezioni/js-14.html#approfondimento---short-evalutation"
  },"122": {
    "doc": "Corso Javascript - 14",
    "title": "Truthy e falsy",
    "content": "I valori truthy e falsy sono quei valori considerati rispettivamente sempre veri o falsi o per meglio dire che ritornano sempre un boolean: true/false. | Valori truthy: 1, \"content\" .. | Valori falsy: undefined, null, 0, \"\", NaN | . Vedremo adesso come mettere in pratica questi concetti attraverso l’uso di costrutti condizionali e iterativi. back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-14.html#truthy-e-falsy",
    "relUrl": "/corsi/javascript/Lezioni/js-14.html#truthy-e-falsy"
  },"123": {
    "doc": "Corso Javascript - 14",
    "title": "Corso Javascript - 14",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-14.html",
    "relUrl": "/corsi/javascript/Lezioni/js-14.html"
  },"124": {
    "doc": "Corso Javascript - 15",
    "title": "Control Structure if/else",
    "content": "La struttura di controllo if/else esegue un’istruzione o un blocco di istruzioni se una condizione specificata come argomento di if risulta true. Se la condizione risulta false si eseguono le istruzioni del ramo else . MDN - if…else . if (condition1) { //code } else if (condition2) { //code } else { //code } . La condizione espressa come argomento di if è trattata come un’espressione logica e quindi ritorna un boolean: true/false. /*Utilizzo di operatori logici combinati al costrutto if/else*/ const maggioreEta = 18; const etaLuca = 10; if (etaLuca &gt; maggioreEta) { console.log(\"Luca è maggiorenne\"); } else { console.log(\"Luca non è maggiorenne\"); } /* Luca non è maggiorenne */ /* Boolean logic, trattano l'espressione come logica AND -&gt; &amp;&amp; : ritorna TRUE se tutte le condizioni sono VERE OR -&gt; || : ritorna TRUE se una condizione è VERE NOT -&gt; ! : inverte il risultato dell'espressione logica */ const nome = \"Luca\"; const eta = 15; if (eta &lt;= 13) { console.log(nome + \" è un bambino\"); } else if ( eta &gt; 13 &amp;&amp; eta &lt;= 20) { console.log(nome + \" è un ragazzo\"); } else { console.log(nome + \" è un adulto\"); } /* Luca è un ragazzo */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-15.html#control-structure-ifelse",
    "relUrl": "/corsi/javascript/Lezioni/js-15.html#control-structure-ifelse"
  },"125": {
    "doc": "Corso Javascript - 15",
    "title": "Ternary Operator",
    "content": "Il Ternary Operator è un costrutto condizionale inline. L’operatore condizionale (ternary) è l’unico operatore JavaScript che necessità di tre operandi. Questo operatore è frequentemente usato al posto del comando if per la sua sintassi concisa e perché fornisce direttamente un espressione valutabile. MDN - Operatore condizionale (ternary) . (condition) ? (steatement1) : (steatement2); : Se condition risulta true verrà eseguito steatement1 altrimenti steatement2. /* Ternary Operator */ var nome = \"Marco\"; var eta = \"17\"; eta &gt;= 18 ? console.log(nome + \" può guidare\") : console.log(nome + \" non può guidare\"); /* Marco non può guidare */ . E’ da preferire il ternary operator nei casi in cui si hanno due semplici statemeant da eseguire condizionati da un’espressione altrettanto semplice. In questo caso risulta chiaro ed elegante. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-15.html#ternary-operator",
    "relUrl": "/corsi/javascript/Lezioni/js-15.html#ternary-operator"
  },"126": {
    "doc": "Corso Javascript - 15",
    "title": "Switch statemeant",
    "content": "L’ultimo costrutto condizionale è switch. Il comando switch valuta un espressione, confronta il valore dell’espressione con ciascuna delle clausole case ed esegue i comandi (statements) associati alla clausola (case) che verifica il confronto. MDN - switch . switch (key) { case value1: //code break; case value2: //code break; default: //code break; } . Esempio: . /* switch statemeant*/ const sport = \"calcio\"; switch (sport) { case \"calcio\": console.log(\"Amo giocare a calcio\"); break; case \"tennis\": console.log(\"Amo giocare a tennis\"); break; default: console.log(\"non amo nessuno sportf\"); break; } /* Console: --------------- Amo giocare a calcio */ . In che occasioni si usa è preferibile utilizzare il costrutto switch? E’ da preferire quando si hanno opzioni multiple di una un unico key (un tipo di dato qualsiasi) da valutare e tutte le opzioni sono omogenee. In questo caso risulta chiaro e leggibile. Nel prossimo esempio lo switch/case è trasformato in un if/else. /* switch statemeant*/ const nome = \"Matteo\"; const eta = 15; switch (true) { case (eta &lt;= 13): console.log(nome + \" è un bambino\"); break; case ( eta &gt; 13 &amp;&amp; eta &lt;= 20): console.log(nome + \" è un ragazzo\"); break; default: console.log(nome + \" è un adulto\"); break; } /* Matteo è un ragazzo */ . In questo caso lo switch/case risulta meno chiaro di un if/else. E’ importante fin da subito saper utilizzare i costrutti giusti per la situazione giusta. back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-15.html#switch-statemeant",
    "relUrl": "/corsi/javascript/Lezioni/js-15.html#switch-statemeant"
  },"127": {
    "doc": "Corso Javascript - 15",
    "title": "Corso Javascript - 15",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-15.html",
    "relUrl": "/corsi/javascript/Lezioni/js-15.html"
  },"128": {
    "doc": "Corso Javascript - 16",
    "title": "while loop",
    "content": "L’istruzione while crea un ciclo che esegue un’istruzione specificata fintanto che la condizione di test restituisce true. La condizione viene valutata prima di eseguire l’istruzione. MDN - while . while (condition) { //code } . Esempio: . let contatore = 1; while (contatore &lt; 5) { console.log(contatore); contatore++; } /* 1 2 3 4 */ . In un qualsiasi costrutto iterativo è sempre bene tenere in considerazione: . | La condizione da verificare | l’evento che altera, ad ogni ciclo, la condizione da verificare. | . Il programmatore si deve assicurare che prima o poi la condizione diventi falsa altrimenti rischia di creare un loop infinito causando un crash del browser. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;LOOP INFINITO&lt;/h1&gt; &lt;script&gt; /*Loop Infinito - DA EVITARE! */ var infinito = 0; while (infinito &lt; 10) { console.log(infinito); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Altro esempio di un ciclo iterativo applicato a una stringa con while: . var parola = \"ciao\"; var contatore = 0; while (contatore &lt; parola.length) { // 0 &lt; 4 // 1 &lt; 4 // 2 &lt; 4 // 3 &lt; 4 console.log(parola[contatore]); // c // i // a // o contatore++; // 1 // 2 // 3 // 4 } /* parola.lenght -&gt; restituisce il numero delle lettere che compongono la stringa parola parola[contatore] -&gt; restituisce il contenuto relativo all'indice \"contaotore\" Output: c i a o */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-16.html#while-loop",
    "relUrl": "/corsi/javascript/Lezioni/js-16.html#while-loop"
  },"129": {
    "doc": "Corso Javascript - 16",
    "title": "do-while loop",
    "content": "L’istruzione do … while crea un ciclo che esegue un’istruzione specificata finché la condizione di test non restituisce false. La condizione viene valutata dopo l’esecuzione dell’istruzione, determinando l’esecuzione dell’istruzione specificata almeno una volta. MDN - do…while . do { //code } while (condition); . let j = 0; do { j++; console.log(j); } while (j &lt; 5); console.log(j); /* Console: --------------- 0 1 2 3 4 */ . Il do-while loop è molto simile al while loop ma differisce nel punto in cui valuta la condizione sotto test. Qui sotto riporto un esempio dello stesso loop realizzato prima con while e poi con do-while. //while let i = 5; //la condizione è falsa, non eseguo il corpo del loop while (i &lt; 5){ i++; console.log(i); } console.log(i); /* 5 */ //do-while let j = 5; do { j++; console.log(j); } while (j &lt; 5); //la condizione è falsa ma ho eseguito una volta il corpo del loop console.log(j); /* Console: --------------- 6 6 */ . do…while esegue il ciclo almeno una volta mentre while può anche non eseguire mai il corpo. do…while è meno utilizzato rispetto while ma può comunque essere utilizzato in strutture iterative sempre in esecuzione come quella di selezione di un menù grafico a opzioni multiple. back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-16.html#do-while-loop",
    "relUrl": "/corsi/javascript/Lezioni/js-16.html#do-while-loop"
  },"130": {
    "doc": "Corso Javascript - 16",
    "title": "Corso Javascript - 16",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-16.html",
    "relUrl": "/corsi/javascript/Lezioni/js-16.html"
  },"131": {
    "doc": "Corso Javascript - 17",
    "title": "for loop",
    "content": "L’istruzione for crea un ciclo che consiste di tre espressioni opzionali, racchiuse tra parentesi tonde ( ) e separate da punto e virgola, seguite da un’istruzione (di solito un’istruzione di blocco) da eseguire nel ciclo. MDN - for . for (inizializzazione; condizione; incremento/decremento){ //code } . Esempio: . for (let contatore = 1; contatore &lt; 5; contatore++){ console.log(contatore); } /* 1 2 3 4 */ . Nota: la variabile “contatore”, poichè è creata all’interno del ciclo for vive all’interno del ciclo. Al di fuori del ciclo non è conosciuta. Vediamo anche un altro esempio precedentemente svolto con while: . /* For Loop */ const nome = \"Marco\"; for (let i = 0; i &lt; nome.length; i++){ // 0 &lt; 4 // 1 &lt; 4 // 2 &lt; 4 // 3 &lt; 4 // 4 &lt; 5 // console.log(nome[i]); // M // a // r // c // o } /* M a r c o */ . Approfondimento: I cicli in cui sono note a priori il numero di iterazioni sono sono detti “enumerativi”. Per questi cicli la struttura più adatta è certamente il for. I cicli si dicono invece “indefiniti” quando a priori non è noto il numero esatto di iterazioni. Per questi cicli la struttura più adatta è il while o il do-while. Gli esempi riportati fino ad ora sono tutti cicli enumerativi. Notiamo infatti che la struttura for risulta più chiara e compatta ed è quindi da preferire. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-17.html#for-loop",
    "relUrl": "/corsi/javascript/Lezioni/js-17.html#for-loop"
  },"132": {
    "doc": "Corso Javascript - 17",
    "title": "break &amp; coninue",
    "content": "All’interno del corpo di loop statemeant for / while / do... while è possible invocare i comandi: continue, break. | continue: Salta all’iterazione successiva ignorando le istruzioni successive | break: Esce dal loop. | . Vediamo l’uso attraverso un esempio . //NO continue NO break for (let i = 0; i &lt; 5; i++){ if (i === 2){ console.log('QUESTO È 2'); } console.log(i); } /* Console: --------------- 0 1 QUESTO È 2 2 3 4 */ //&lt;conitnue&gt; salta all'iterazione successiva for (let i = 0; i &lt; 5; i++){ if (i === 2){ console.log('QUESTO È 2'); continue } console.log(i); } /* 0 1 QUESTO È 2 3 4 */ //&lt;break&gt; esce dal ciclo for (let i = 0; i &lt; 5; i++){ if (i === 2){ console.log('QUESTO È 2'); break; } console.log(i); } /* 0 1 QUESTO È 2 */ . Approfondimento break: E’ possibile uscire da loop innestati facendo uso di un’etichetta. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; table td{ text-align: center; border: 1px dashed black; padding: 10px; margin-bottom: 10px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; document.write(\"&lt;table&gt;\"); myLoop: for (let i=1; i &lt;= 10; i++) { document.write(\"&lt;tr&gt;\"); for (let j=1; j &lt;= 10; j++) { document.write(\"&lt;td&gt;\" + \"A\" + \"&lt;/td&gt;\"); if ( j*i == 20 ) break myLoop; } document.write(\"&lt;/tr&gt;\"); } document.write(\"&lt;/table&gt;\"); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-17.html#break--coninue",
    "relUrl": "/corsi/javascript/Lezioni/js-17.html#break--coninue"
  },"133": {
    "doc": "Corso Javascript - 17",
    "title": "Corso Javascript - 17",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-17.html",
    "relUrl": "/corsi/javascript/Lezioni/js-17.html"
  },"134": {
    "doc": "Corso Javascript - 18",
    "title": "Function",
    "content": "Le funzioni sono tra i blocchi di programmazione fondamentali in JavaScript. Una funzione è una procedura JavaScript — un gruppo di istruzioni ( statement ) che esegue un compito o calcola un valore. La definizione di funzione ( o dichiarazione di funzione, o istruzione di funzione ) consiste della parola chiave function, seguita da: . | il nome della funzione. | una lista di argomenti per la funzione, chiusi tra due parentesi e separati da una virgola. | le istruzioni JavaScript che definiscono la funzione, chiuse tra due parentesi graffe, { }. | . MDN - Funzioni . //Dichiarazione o definizione di una funzione function name(param1, param2, ?param3) { //code } //Chiamata name(param1, param2); . Esempio: . /* Function with arguments */ function salutoCompleanno(nome, anni){ console.log(\"ciao \" + nome + \", auguri per i tuoi \" + anni + \" anni!\"); } salutoCompleanno(\"Francesco\", 22); //ciao Francesco, auguri per i tuoi 22 anni! . Nota: L’ordine dei parametri è importante! Nota2: Il passaggio dei parametri è sempre per valore intendendo che al momento della chiamata della funzione, si esegue una copia dei parametri. Non vengono quindi elaborati direttamente i valori passati a una funzione . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-18.html#function",
    "relUrl": "/corsi/javascript/Lezioni/js-18.html#function"
  },"135": {
    "doc": "Corso Javascript - 18",
    "title": "Parametri di default",
    "content": "Alcuni parametri possono essere opzionali. In fase di chiamata possono quindi essere passati dei valori a tali parametri opppure no. In caso non venga passato un valore a tali parametri assumeranno all’interno della funzione un cosìdetto valore di default. Per inserire un valore di default e quindi rendere il parametro opzionale basta assegnare ad esso un valore in fase di dichiarazione della funzione. Vediamo un esempio: . function salutoCompleanno(nome, anni=0){ if (anni === 0){ console.log(\"ciao \" + nome + \", auguri per il tuo compleanno!\"); } else{ console.log(\"ciao \" + nome + \", auguri per i tuoi \" + anni + \" anni!\"); } } salutoCompleanno(\"Francesco\", 22); //ciao Francesco, auguri per i tuoi 22 anni! salutoCompleanno(\"Mario\"); //ciao Mario, auguri per il tuo compleanno! . NOTA: E’ buona norma passare parametri in modo che i primi siano obbligatori e gli altri opzionali anche se tutto è consentito ma di fatto in fase di chiamata della funzione i parametri passati sono interpretati a partire dal primo. Ricorda che conta solo l’ordine dei parametri e non l’identificativo utilizzato . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-18.html#parametri-di-default",
    "relUrl": "/corsi/javascript/Lezioni/js-18.html#parametri-di-default"
  },"136": {
    "doc": "Corso Javascript - 18",
    "title": "Ritorno di una funzione",
    "content": "Una funzione può restituire un valore con il comando return . /* Return Keword */ function quadrato(numero){ return (numero*numero); } console.log( quadrato(5) ); //25 . E’ preferibile che una funzione esegua un’elaborazione interna e che ritorni un valore invece di salvare il risultato all’interno di variabili esterne globali. In questo modo è possibile riutilizzare la funzione ovunque e non renderla dipendente dal codice. E’ quindi indispensabile l’utilizzo del return . Note . | Una funzione ammette un solo return che termina l’esecuzione della funzione. | Eventuali linee di codice dopo il return verranno ignorate. | . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-18.html#ritorno-di-una-funzione",
    "relUrl": "/corsi/javascript/Lezioni/js-18.html#ritorno-di-una-funzione"
  },"137": {
    "doc": "Corso Javascript - 18",
    "title": "Corso Javascript - 18",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-18.html",
    "relUrl": "/corsi/javascript/Lezioni/js-18.html"
  },"138": {
    "doc": "Corso Javascript - 19",
    "title": "Funzioni - Passaggio di oggetti e array",
    "content": "Il passaggio di oggetti e array come parametri ad una funzione avviene per riferimento. Dal momento che viene passato il nome dell’oggetto e dell’array che corrisponde all’indirizzo puntatore dei dati contenuti, viene effettuata la copia dell’indirizzo e non dell’intero oggetto/array contenente i dati interni. In sostanza è possibile accedere e modificare i dati dell’array o oggetto passato!! . //Metodo Object - Gli oggetti sono passati per riferimento const annoAttuale = 2020; const objPersona = { nome: \"simone\", eta: 24, titolo: \"laurea\", annoNascita: 1994 } aggiornaEta(objPersona, annoAttuale); console.log(objPersona.eta); //26 function aggiornaEta(obj, anno){ obj.eta = anno - obj.annoNascita; console.log() } //Metodo Array - Gli array sono passati per riferimento const arrayPersona = [ \"simone\", //0 24, //1 \"laurea\", //2 1994 //3 ]; aggiornaEta2(arrayPersona, annoAttuale); console.log(arrayPersona[1]); //26 function aggiornaEta2(array, anno){ array[1] = anno - array[3]; console.log(array); } . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-19.html#funzioni---passaggio-di-oggetti-e-array",
    "relUrl": "/corsi/javascript/Lezioni/js-19.html#funzioni---passaggio-di-oggetti-e-array"
  },"139": {
    "doc": "Corso Javascript - 19",
    "title": "Funzioni - Ritorno di un oggetto o un array",
    "content": "Una funzione in Javascript può avere come tipo di ritorno anche un oggetto o un array . //Metodo Oggetto let objRisultatoEqIIgrado = objCalcolaRisultatoEqIIgrado(1, 5, -1); console.log(\"Risultato 1: \" + objRisultatoEqIIgrado.x1); console.log(\"Risultato 2: \" + objRisultatoEqIIgrado.x2); function objCalcolaRisultatoEqIIgrado(a, b, c){ let delta = Math.sqrt(b*b - 4*a*c); let ris1 = (-b + delta)/2; let ris2 = (-b - delta)/2; //Ritorno un oggetto return { x1: ris1, x2: ris2 }; } //Metodo Array let arrayRisultatoEqIIgrado = arrayCalcolaRisultatoEqIIgrado(1, 6, -1); console.log(\"Risultato 1: \" + arrayRisultatoEqIIgrado[0]); console.log(\"Risultato 2: \" + arrayRisultatoEqIIgrado[1]); function arrayCalcolaRisultatoEqIIgrado(a, b, c){ let delta = Math.sqrt(b*b - 4*a*c); let ris1 = (-b + delta)/2; let ris2 = (-b - delta)/2; //Ritorno un oggetto return [ris1, ris2]; } . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-19.html#funzioni---ritorno-di-un-oggetto-o-un-array",
    "relUrl": "/corsi/javascript/Lezioni/js-19.html#funzioni---ritorno-di-un-oggetto-o-un-array"
  },"140": {
    "doc": "Corso Javascript - 19",
    "title": "Approfondimento funzioni - Oggetto Arguments",
    "content": "Facendo uso di arguments è possibile passare un numero indefinito di parametri. arguments raggruppa gli argomenti in un oggetto collezione di elementi. L’oggetto arguments permette di utilizzare la proprietà lenght, l’indicizzazione [ ] ma non è un array e quindi non si possono applicare i metodi applicabili agli array. arguments non si specifica nella definizione di una funzione tra i parametri poichè è un oggetto riconosciuto nel contesto stesso della funzione . //arguments è un oggetto riconosciuto all'interno della definizione della funzione function somma(){ let ris = 0; for (let index = 0; index &lt; arguments.length; index++) { ris += arguments[index]; } console.log(arguments); return ris; } console.log(somma(1,4)); //5 console.log(somma(1,4,6,0,3,1,2)); //17 console.log(somma()); //0 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-19.html#approfondimento-funzioni---oggetto-arguments",
    "relUrl": "/corsi/javascript/Lezioni/js-19.html#approfondimento-funzioni---oggetto-arguments"
  },"141": {
    "doc": "Corso Javascript - 19",
    "title": "Approfondimento funzioni - Parametri Rest",
    "content": "La sintassi dei rest parameter permette di rappresentare un indefinito numero di argomenti come un array. A differenza dell’oggetto arguments in questo caso gli argomenti “restanti” sono rappresentati e raggruppati in un array ed è possibile quindi utilizzare ogni metodo applicabile agli arrays. Si specificano i rest parameter all’interno della definizione di una funzione come ultimo parametro attraverso l’operatore rest ... | ...: Operatore rest | . MDN - Rest parameters . function calcola(a,b, ...altriParam ){ ris = a + b; //Il forEach(param1, param2) ha due parametri. Il primo è una funzione che a sua volta accetta i parametri //opzionali (valore, indice, array) in questo caso dell'array altriParam passato come argomento a calcola. //this in questo caso rappresenta il fatto che voglio ritornare il valore all'interno del contesto di ris altriParam.forEach(controllaEsomma, this); return ris; } function controllaEsomma (valore, indice, array){ if(valore &lt; 100) { //this riesce a raggiungere il contesto di \"ris\" della funzione calcola this.ris += valore; } } console.log(calcola(1,4)); //5 console.log(calcola(1,4,6,100,3,1,2)); //17 console.log(calcola(1,2)); //0 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-19.html#approfondimento-funzioni---parametri-rest",
    "relUrl": "/corsi/javascript/Lezioni/js-19.html#approfondimento-funzioni---parametri-rest"
  },"142": {
    "doc": "Corso Javascript - 19",
    "title": "Approfondimento Introduzione forEach / this",
    "content": "forEach() è un metodo applicabile agli array. E’ una struttura iterativa cheesegue una funzione fornita una volta per ogni elemento dell’array a cui si applica il metodo. La funzione riceve dall’array tre parametri opzionali in ordine: value, index, array ovvero il valore dell’elemento dell’array a cui si applica il metodo, l’indice dell’elemento e l’array stesso. myArray.forEach(myFunc); function myFunc (value, index, array){ //code; } . Nell’esempio di sopra: . altriParam.forEach(controllaEsomma, this); . Esegue la funzione controllaEsomma per ogni elemento dell’array. function controllaEsomma (valore, indice, array){ if(valore &lt; 100) { //this riesce a raggiungere il contesto di \"ris\" della funzione calcola this.ris += valore; } } . L’identificatore this, come il forEach stesso verranno approfonditi più avanti. Per adesso ci basta sapere che this consente di raggiungere un oggetto utilizzato come callback (valore di ritorno). Osservazione: Se dichiariamo la variabile “ris” con let o var ritorna NaN. Approfondimento: MDN - var . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-19.html#approfondimento-introduzione-foreach--this",
    "relUrl": "/corsi/javascript/Lezioni/js-19.html#approfondimento-introduzione-foreach--this"
  },"143": {
    "doc": "Corso Javascript - 19",
    "title": "Corso Javascript - 19",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-19.html",
    "relUrl": "/corsi/javascript/Lezioni/js-19.html"
  },"144": {
    "doc": "Corso Javascript - 20",
    "title": "Approfondimento Funzioni ricorsive",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso. La funzioni ricorsive sono funzioni che richiamano se stesse all’interno del corpo. Questa tecnica fornisce un modo per scomporre problemi complicati in problemi semplici che sono più facili da risolvere. Con le funzioni ricorsive si costruiscono algoritmi potenti. function x(contatore){ if (contatore &gt; 5){ return; //Terminatore, } else{ x(++contatore); //passo ricorsivo console.log(contatore); } } x(0); /* 6 5 4 3 2 1 */ . Nell’esempio di sopra al primo passo ricorsivo x(++contatore) non eseguo console.log(contatore); che rimane pending nello stack. Così anche per gli altri passi successivi finchè la condizione dell’ if diventa true e l’ultima funzione ritorna. A questo punto lo statemeant console.log(contatore); rimasto pending viene eseguito e così via i precedenti. fino al ritorno dell’intera funzione . Osservazioni: . | Se nulla limita il meccanismo di chiamate a funzione con una serie di ritorni a cascata, lo stack si riempie e il browser va in crash con l’errore Maximum call stack size exceeded. | E’ un meccanismo che rallenta parecchio l’applicazione quando il passo ricorsivo diverge. | . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-20.html#approfondimento-funzioni-ricorsive",
    "relUrl": "/corsi/javascript/Lezioni/js-20.html#approfondimento-funzioni-ricorsive"
  },"145": {
    "doc": "Corso Javascript - 20",
    "title": "Approfondimento Function expression",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso. La parola chiave function può essere utilizzata per definire una funzione all’interno di un’espressione. var media = function(a,b){ //funzione anonima return (a+b)/2; }; console.log(media(4,9)); var fattoriale = function fatt (n){ if (n === 0){ return 1; } else{ return n * (fatt(n-1)); } } console.log (fattoriale(4)); //24 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-20.html#approfondimento-function-expression",
    "relUrl": "/corsi/javascript/Lezioni/js-20.html#approfondimento-function-expression"
  },"146": {
    "doc": "Corso Javascript - 20",
    "title": "Approfondimento Hoisting",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso. Per comprendere l’hoisting è necessario introdurre il meccanismo di parsing dell’interprete javascript. Prima di eseguire lo script, il parser dell’interprete Javascript scansiona tutto il codice per risolvere i valori da assegnare agli identificatori ed esegue molte altre operazioni . function esterna() { function interna(){ return \"interna1\"; } return interna(); function interna(){ return \"interna2\"; } } console.log( esterna() );//interna2 . Nell’esempio di sopra, poichè la funzione interna() è stata definita due volte, il parser sovraiscrive la prima definizione con la seconda! . Tutto cambia se utilizzo le function expression . function esterna() { var interna = function(){ return \"interna1\"; } return interna(); var interna = function{ return \"interna2\"; } } console.log( esterna() );//interna1 . In questo caso poichè non sono definizioni di funzione ma variabili la seconda variabile non viene valutata poichè è codice irraggiungibile. In questo caso si segue un andamento lineare del codice anche detto paradigma imperativo. Nel caso invece di chiamate a funzione il paradigma si dice funzionale. Altro controesempio: . function esterna() { return interna(); var interna = function(){ return \"interna1\"; } var interna = function{ return \"interna2\"; } } console.log( esterna() );//ERROR. interna() non è riconosciuto perchè non è stato dichiarato l'identificaore . Con il paradigma funzionale invece non ci sono problemi: . function esterna() { return interna(); function interna(){ return \"interna1\"; } function interna(){ return \"interna2\"; } } console.log( esterna() );//interna2 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-20.html#approfondimento-hoisting",
    "relUrl": "/corsi/javascript/Lezioni/js-20.html#approfondimento-hoisting"
  },"147": {
    "doc": "Corso Javascript - 20",
    "title": "Approfondimento Differenza tra undefined e not defined",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso. Anche se sembra un uso improprio del vocabolario, c’è una differenza tra una variabile undefined e un errore dell’interprete dovuto a una variabile not defined. | undefined: L’interprete trova la definizione della variabile ma non trova nessun valore associato a tale variabile. Non genera un errore | not defined: l’interprete non trova da nessuna parte nel codice l’identificatore. Genera un errore | . function esterna() { return interna; var interna = function(){ return \"interna1\"; } var interna = function{ return \"interna2\"; } } console.log( esterna() );//undefined, l'interprete sa cos'è ma non è stata definita a quel punto del codice . function esterna() { return y; var interna = function(){ return \"interna1\"; } var interna = function{ return \"interna2\"; } } console.log( esterna() );//ERROR. y is not defined. L'interprete non sa cosa sia y, ben diverso . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-20.html#approfondimento-differenza-tra-undefined-e-not-defined",
    "relUrl": "/corsi/javascript/Lezioni/js-20.html#approfondimento-differenza-tra-undefined-e-not-defined"
  },"148": {
    "doc": "Corso Javascript - 20",
    "title": "Approfondimento IIFI Immediatly invoked function expression",
    "content": "Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso. Sebbene introdurre funzioni aiuti a scrivere moduli indipendenti si rischia di inondare il contesto globale di nomi di funzioni. Il pattern IIFE (Immediately Invoked Function Expression) aiuta in tal senso. Le IIFI functions sono funzioni che vengono eseguite al momento della definizione. Non necessitano quindi della chiamata. (function name(){ //code })(); . Esempio: . //Questa è una funzione standard, NON IIFI. Viene eseguita solo alla chiamata function stampaLogo(){ console.log('myLogo'); } stampaLogo(); //in questa linea eseguo la funzione /* */ //Questa è una funzione IIFI. Viene eseguita al momento. //(function name(){})(); (function stampaLogo(){ console.log('myLogo'); })(); //eseguo qui la funzione IIFI . Esempio 2: . ( //operatore di raggruppamento: cio' che e' all'interno e' una espressione function iife() { var a=222; console.log(\"parto da sola!! \" + a); } ) //fine espressione (); //operatore di chiamata di funzione //forma alternativa ( function iife() { var a=444; console.log(\"parto da sola!! \" + a); } () ); iife(); //errore! iife come identificatore non esiste nel contesto globale . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-20.html#approfondimento-iifi-immediatly-invoked-function-expression",
    "relUrl": "/corsi/javascript/Lezioni/js-20.html#approfondimento-iifi-immediatly-invoked-function-expression"
  },"149": {
    "doc": "Corso Javascript - 20",
    "title": "Paradigma di programmazione Javascript",
    "content": "Javascript è un linguaggio multiparadigma, consente quindi il paradigma imperativo, quello funzionale e il paradigma object oriented in un unico linguaggio. Non esiste il miglior paradigma in assoluto ma esista il paradigma migliore per la situazione migliore. back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-20.html#paradigma-di-programmazione-javascript",
    "relUrl": "/corsi/javascript/Lezioni/js-20.html#paradigma-di-programmazione-javascript"
  },"150": {
    "doc": "Corso Javascript - 20",
    "title": "Corso Javascript - 20",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-20.html",
    "relUrl": "/corsi/javascript/Lezioni/js-20.html"
  },"151": {
    "doc": "Corso Javascript - 21",
    "title": "Scope",
    "content": "Lo scope è l’attuale contesto di esecuzione. Il contesto in cui i valori e le espressioni sono “visibili” o possono essere referenziati. Se una variabile o un’altra espressione non è “nell’ambito corrente”, non è disponibile per l’uso. Gli ambiti possono anche essere stratificati in una gerarchia, in modo che gli ambiti figlio abbiano accesso agli ambiti padre, ma non viceversa. Una funzione funge da chiusura, closure in JavaScript e quindi crea uno scope, in modo che (ad esempio) non sia possibile accedere a una variabile definita esclusivamente all’interno della funzione dall’esterno della funzione o da altre funzioni. MDN - Scope . Esempio: . /* Scope */ /* Gloabl variable -&gt; Riconosciuta da tutto il programma */ let var1 = 1; function function1(){ /* Local variable -&gt; ricnosciuta solo nel blocco di codice tra le parentesi {} in cui è stata dichiarata*/ let var2 = 10; //qui nasce var2 console.log(var2); } //qui muore var2 function1(); console.log(var1); //var1 is defined, var1 is global console.log(var2); //var2 is not defined /* Console: --------------- 10 1 Uncaught ReferenceError: var2 is not defined */ . Vediamo un esempio molto più complesso: . /* Scope */ /* Gloabl variable -&gt; Riconosciuta da tutto il programma */ let var1 = 1; function function1(){ /* Local variable -&gt; ricnosciuta solo nel blocco di codice tra le parentesi {} in cui è stata dichiarata*/ let var2 = 10; //qui nasce var2 console.log(\"var2 function1 : \" + var2); } //qui muore var2 function function2(){ /* Local variable -&gt; ricnosciuta solo nel blocco di codice tra le parentesi {} in cui è stata dichiarata*/ let var2 = 20; //qui nasce var2 ma è diversa rispetto a quella di prima, è una nuova var2 console.log(\"var2 function2 : \" + var2); console.log(\"var1: \" + var1); //è riconosciuta anche var1 perchè è stata dichiarata in un blocco più esterno for (let var3 = 0; var3 &lt; 1; var3++) { console.log(\"var3: \" + var3); console.log(\"var2 function2: \" + var2); //è riconosciuta anche var2 perchè è stata dichiarata in un blocco più esterno console.log(\"var1: \" + var1); //è riconosciuta anche var1 perchè è stata dichiarata in un blocco più esterno } //qui muore var3 } //qui muore var2 function1(); function2(); console.log(\"var1: \" + var1); //OK console.log(\"var3: \" + var3); //non riconosciuta console.log(\"var2: \" + var2); //non riconosciuta /* Console: --------------- var2 function1 : 10 var2 function2 : 20 var1: 1 var3: 0 var2 function2: 20 var1: 1 var1: 1 Uncaught ReferenceError: var3 is not defined */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-21.html#scope",
    "relUrl": "/corsi/javascript/Lezioni/js-21.html#scope"
  },"152": {
    "doc": "Corso Javascript - 21",
    "title": "Visibilità di variabili",
    "content": "Lo ‘scope’ di una variabile (visibilita’ di una variabile) e’ la sezione di codice in cui essa e’ visibile ed in Javascript e’ regolato con l’uso delle funzioni. NB: non confondere lo scope con il context (contesto) che indica invece l’oggetto per il quale una funzione viene eseguita (this). Per una funzione visibile a livello globale cioe’ non contenuta in alcun oggetto questo in realta’ esiste e coincide con ‘window’. La distinzione e’ tra visibilita’ globale, locale e di blocco. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-21.html#visibilit%C3%A0-di-variabili",
    "relUrl": "/corsi/javascript/Lezioni/js-21.html#visibilità-di-variabili"
  },"153": {
    "doc": "Corso Javascript - 21",
    "title": "Visibilità Globale (global scope)",
    "content": "E’ quella che ha come riferimento l’intero codice. Sono le variabili/oggetti dichiarate all’esterno di qualunque funzione usate in una funzione senza var/let. In generale la visibilita’ globale e’ da evitare . Esempio: . var x = 100; function f_bad() { //modifica la variabile esterna potenzialmente all'insaputa di chi la chiama x = 2; } console.log(\"Prima di invocare f_bad() \" + x); //x = 100 f_bad(); //modifica x, da evitare console.log(\"Dopo f_bad() \" + x); //x = 2 . L’obiettivo delle funzioni è proprio racchiudere il codice in blocchi riutilizzabili. Se modificano/dipendono da variabili esterne/globali questo concetto viene a meno. Per risolvere questa cosa: . x = 100; //versione corretta di f function f_good() { //dichiarazione di una variabile LOCALE (x) distinta da quella globale var x = 2; var y=200; } console.log(\"Prima di invocare f_good() \" + x); // x = 100 f_good(); console.log(\"Dopo f_good() \" + x); // x = 100, Ok console.log(y); //errore: y not defined; visibile solo a f_good in esecuzione . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-21.html#visibilit%C3%A0-globale-global-scope",
    "relUrl": "/corsi/javascript/Lezioni/js-21.html#visibilità-globale-global-scope"
  },"154": {
    "doc": "Corso Javascript - 21",
    "title": "Scope Chaining",
    "content": "Una varibaile è visibile ai blocchi interni (figli) ma non ai contenitori (padre). I blocchi interni (figli) ereditano tutto dai loro contenitori (padri) ma i padri non conoscono i segreti dei figli ovvero non possono conoscere le variabili/oggetti dichiarati dei figli. var x = 2; //FUNZIONI ANNIDATE (nested) function esterna() { var x = 999;// dichiaro una nuova \"x\" diversa da quella globale interna(); //Accedo alla \"x\" esterna tramite il contest. &lt;window&gt; è il contesto esterno, è il contenitore di tutto window.x = 18; //interna accede anche allo scope di esterna ma non il viceversa function interna() { //code } } . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-21.html#scope-chaining",
    "relUrl": "/corsi/javascript/Lezioni/js-21.html#scope-chaining"
  },"155": {
    "doc": "Corso Javascript - 21",
    "title": "Visibilità a livello di blocco (block scope)",
    "content": "La visibilità è racchiusa da i delimitatori { } . Per mantenere la visibilità a livello di blocco è necesario usare let, var mantiene soltanto lo scope locale a livello di funzione ma non di blocco { } . | let: Mantiene lo scope delle variabili sia a livello locale (all’interno di una funzione) sia livello di blocco ovvero tra i delimitatori { } | var: Mantiene lo scope delle variabili solo a livello locale (all’interno di una funzione) ma non a livello di blocco ovvero tra i delimitatori { } | . //\"var\" non mantiene la visibilità di blocco var x=5; if ( Math.random() &gt; 0.5 ) { var x = 100; } else { var x = 200 } console.log(\"La x ora vale: \" + x); //100 o 200!! ATTENZIONE, //\"let\" mantiene la visibilità di blocco x=5; if ( Math.random() &gt; 0.5 ) { let x = 100; } else { let x = 200 } console.log(\"La x globale vale ancora: \" + x); //5, ok . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-21.html#visibilit%C3%A0-a-livello-di-blocco-block-scope",
    "relUrl": "/corsi/javascript/Lezioni/js-21.html#visibilità-a-livello-di-blocco-block-scope"
  },"156": {
    "doc": "Corso Javascript - 21",
    "title": "Approfondimento - Closure di una funzione",
    "content": "Si ricordi: . Una funzione funge da chiusura, closure in JavaScript e quindi crea uno scope, in modo che (ad esempio) non sia possibile accedere a una variabile definita esclusivamente all’interno della funzione dall’esterno della funzione o da altre funzioni . Applichiamo questo concetto ad un esempio pratico. La funzione: setInterval( param1, param2 ): param1 è una funzione, param2 rappresenta un intervallo di tempo espresso in ms. La funzione setInterval() chiama la funzione param1 ogni param2 ms. function chiamaMessaggio(messaggio){ setInterval( function(){writeln(messaggio);}, 1000); //uso una funzione anonima } chiamaMessaggio(\"il sistema è in fase di spegnimento..\"); . Ho utilizzato il concetto di closure (e quindi dell’ereditarietà delle variabili/oggetti padre-&gt;figlio) di una funzione per passare un parametro alla funzione (parametro) di setInterval() . Esempio 2: . function chiamaMessaggio2(ilMessaggio, volte) { let timer = setInterval( function () { writeln(ilMessaggio + \" \" + volte + \" secondi...\"); --volte; if (volte&lt;1) { clearInterval(timer); writeln(\"Boom!\");} } , 1000) } chiamaMessaggio2(\"Sistem Shutdown in \", 5); . Approfondimento: Le funzioni che ricevono come parametri altre funzioni o ritornano altre funzioni prendono il nome di High orderd function . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-21.html#approfondimento---closure-di-una-funzione",
    "relUrl": "/corsi/javascript/Lezioni/js-21.html#approfondimento---closure-di-una-funzione"
  },"157": {
    "doc": "Corso Javascript - 21",
    "title": "Corso Javascript - 21",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-21.html",
    "relUrl": "/corsi/javascript/Lezioni/js-21.html"
  },"158": {
    "doc": "Corso Javascript - 22",
    "title": "Array",
    "content": "Gli array sono aggragatori di dati utilizzati per raggruppare elementi appartenenti alla stessa famiglia ed accedere ad uno di essi in lettura o scrittura in modo semplice. | Ogni elemento dell’array è raggiungibile tramite un numero detto indice. L’indice indica la posizione dell’elemento nell’array. | La proprietà lenght restituisce il numero degli elementi in un array | . // Dichiarazione e inizializzazione // 0 1 2 const elementi = [\"elemento1\", \"elemento2\", \"element03\"]; console.log(elementi); //(3) [\"elemento1\", \"elemento2\", \"element03\"] console.log(elementi[1]); //elemento2 console.log(elementi.lenght); //3 elementi[2] = \"Silicio\"; console.log(elementi); //(3) [\"elemento1\", \"elemento2\", \"Silicio\"] // Solo dichiarazione const mammiferi = []; . Altre sintassi (meno utilizzate ma valide): . //Array vuoto let vuoto1 = new Array(); let vuoto2 = Array(); let vuoto3 = []; //da preferire let v1 = Array(100); //100 elementi pre allocati let v2 = Array('100'); //1 elemento stringa, crea confusione let v3 = new Array(31,8,2017); //meno consigliata let arr3 = [31, 8, 2017]; //sintassa più chiara . Alcuni esempi: . const mammiferi = [\"tigre\", \"scoiattolo\", \"orso\"]; mammiferi[mammiferi.length] = \"volpe\"; // === mammiferi[3] = \"volpe\", aggiunge in coda un elemento console.log(mammiferi); //(4) [\"tigre\", \"scoiattolo\", \"orso\", \"volpe\"] mammiferi[10] = \"cinghiale\"; //aggiunge \"cinghiale\" al decimo elemento e riempie con elementi vuoti i restanti console.log(mammiferi, mammiferi.lenght); //(11) [\"tigre\", \"scoiattolo\", \"orso\", \"volpe\", empty × 6, \"cinghiale\"] 11 mammiferi.lenght = 20; console.log(mammiferi, mammiferi.lenght); //(11) [\"tigre\", \"scoiattolo\", \"orso\", \"volpe\", empty × 6, \"cinghiale\", lenght: 20] 20 //Iterazione sugli elementi dell'array for (let i=0; i&lt;mammiferi.length; i++){ if (mammiferi[i] != undefined){ console.log(i + \": \" + mammiferi[i]); } else{ console.log(i + \": \" + \"non è un mammifero\"); } } /* 0: tigre 1: scoiattolo 2: orso 3: volpe 4: non è un mammifero 5: non è un mammifero 6: non è un mammifero 7: non è un mammifero 8: non è un mammifero 9: non è un mammifero 10: cinghiale */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-22.html#array",
    "relUrl": "/corsi/javascript/Lezioni/js-22.html#array"
  },"159": {
    "doc": "Corso Javascript - 22",
    "title": "Matrix",
    "content": "Della famiglia degli array ci sono anche le matrici che non sono altro che array di array. const social = [ [\"facebook\", \"instagram\"], [\"whatsapp\", \"telegram\"], [\"tiktok\", \"snapchat\"], ]; console.log(social); console.log(social[1][1]); console.log(social[2][0]); /* Console: --------------- Esercizio 2 (3) [Array(2), Array(2), Array(2)] 0: (2) [\"facebook\", \"instagram\"] 1: (2) [\"whatsapp\", \"telegram\"] 2: (2) [\"tiktok\", \"snapchat\"] telegram tiktok */ . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-22.html#matrix",
    "relUrl": "/corsi/javascript/Lezioni/js-22.html#matrix"
  },"160": {
    "doc": "Corso Javascript - 22",
    "title": "Corso Javascript - 22",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-22.html",
    "relUrl": "/corsi/javascript/Lezioni/js-22.html"
  },"161": {
    "doc": "Corso Javascript - 23",
    "title": "Array - Metodi base",
    "content": "Qualche metodo base applicabile agli array in javascript: . | push(elem) : aggiunge l’elemento elem in coda all’array. Restituisce il numero di elementi dell’array. | pop() : rimuove l’ultimo elemento dall’array. Restituisce l’elemento che ha tolto. | array.unshift(elem) : aggiunge l’elemento elem in testa all’array. Restituisce il numero di elementi dell’array | array.shift() : rimuove il primo elemento dall’array. Restituisce l’elemento che ha tolto | indexOf(elem) : Restituisce l’indice dell’ elemento elem nell’array. Se non lo trova restituisce -1 | slice(startIndex, endIndex); : Restituisce un array derivato dall’array a cui si applica il metodo filtrando gli elementi nel range (startIndex incluso,endIndex escluso). | .concat(array2); : Restituisce un array che è la concatenazione dell’array a cui si applica il metodo e array2 | splice(startIndex, nToDelete, elem1, elem2, ...); : Restituisce un array derivato dall’array a cui si applica il metodo aggiungendo elem1, elem2, .. a partire da startIndex ed eliminando i primi nToDelete elementi a partire da startIndex. Se non specifico i parametri elem1, elem2, .. semplicemente elimina gli elementi nToDelete a partire da startIndex. | fill(value, indexStart, indexEnd): Inserisce value all’interno dell’array tra i parametri opzionali indexStart e indexEnd. Omettendo indexStart e indexEnd riempie tuttto l’array con value | join() : Trasforma un array in stringa | reverse() : Inverte l’ordine degli elementi | sort() : Ordinamento lessicografico degli elementi. Ogni elemento viene quindi trattato come una stringa e poi ordinato secondo la precedenza definita dalla rappresentazione in UTF-8 (ASCII) | . //push const colori = [\"rosso\", \"verde\", \"giallo\"]; console.log(colori); //(3) [\"rosso\", \"verde\", \"giallo\"] let newArrayLenght = colori.push(\"blu\"); //push ritorna il numero degli elementi dell'array console.log(colori, newArrayLenght); //(4) [\"rosso\", \"verde\", \"giallo\", \"blu\"] 4 //pop console.log(colori); //(4) [\"rosso\", \"verde\", \"giallo\", \"blu\"] let lastElement = colori.pop(); //pop ritorna l'elemento che ha tolto console.log(colori, lastElement); //(3) [\"rosso\", \"verde\", \"giallo\"] \"blu\" //unshift console.log(colori); //[\"rosso\", \"verde\", \"giallo\"] newArrayLenght = colori.unshift(\"gialletto\"); //unshift ritorna il numero degli elementi dell'array console.log(colori, newArrayLenght); //(4) [\"gialletto\", \"rosso\", \"verde\", \"giallo\"] 4 //shift console.log(colori); //(4) [\"gialletto\", \"rosso\", \"verde\", \"giallo\"] let firstElement = colori.shift(); //shift ritorna l'elemento che ha tolto console.log(colori, firstElement); //(3) [\"rosso\", \"verde\", \"giallo\"] \"gialletto\" //indexOf console.log(colori); //(3) [\"rosso\", \"verde\", \"giallo\"] let indexElem = colori.indexOf(\"verde\"); console.log(indexElem); //1 //slice // 0 1 2 3 4 const social = [\"facebook\", \"instagram\", \"whatsapp\", \"telegram\", \"snapchat\"]; const messaggi = social.slice(2, 4); console.log(messaggi); //(2) [\"whatsapp\", \"telegram\"] //concat const numeriBassi = [1,2,3]; const numeriAlti = [100,200,300]; const tuttiNumeri = numeriBassi.concat(numeriAlti); console.log(tuttiNumeri); //(6) [1, 2, 3, 100, 200, 300] //splice //poichè il secondo parametro è 0, aggiungerà a partire dall'indice 3 i parametri 50, 60, 70 tuttiNumeri.splice(3, 0, 50, 60, 70); //poichè il secondo parametro è 0 console.log(tuttiNumeri); //(9) [1, 2, 3, 50, 60, 70, 100, 200, 300] //poichè il secondo parametro è 3, sostituirà 50, 60, 70 con -50, -60, -70 tuttiNumeri.splice(3, 3, -50, -60, -70); console.log(tuttiNumeri); //(9) [1, 2, 3, -50, -60, -70, 100, 200, 300] //fill() const myArr = [1, 2, 4, 1, 5, 5, 7]; myArr.fill(0, 1, 3); console.log(myArr); //(7) [1, 0, 0, 1, 5, 5, 7] //join() const paroleTesto = [\"ciao\", \" \", \"a\", \" \", \"tutti\"]; console.log(paroleTesto); //(5) [\"ciao\", \" \", \"a\", \" \", \"tutti\"] conole.log(parole.Testo.join()); // ciao, ,a, ,tutti //reverse() const numeriDispari = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]; console.log (numeriDispari); //(10 [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] console.log(numeriDispari.reverse()); //(10) [19, 17, 15, 13, 11, 9, 7, 5, 3, 1] //sort() - ATTENZIONE console.log(numeriDispari.sort()); //(10) [1, 11, 13, 15, 17, 19, 3, 5, 7, 9] . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-23.html#array---metodi-base",
    "relUrl": "/corsi/javascript/Lezioni/js-23.html#array---metodi-base"
  },"162": {
    "doc": "Corso Javascript - 23",
    "title": "Corso Javascript - 23",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-23.html",
    "relUrl": "/corsi/javascript/Lezioni/js-23.html"
  },"163": {
    "doc": "Corso Javascript - 24",
    "title": "Arrays - forEach()",
    "content": "forEach() è un metodo applicabile agli array utilizzato per l’iterazione. forEach(function(value, index, array){/*code*/}); . Riceve come parametro una funzione detta anonima poichè non ha un nome. La funzione riceve tre parametri opzionali, in ordine value, index, array che, dell’array a cui è applicato il metodo, rappresentano rispettivamente l’elemento, l’indice e l’array stesso. Viene invocata la funzione anonima per ogni elemento (forEach) presente nell’array. const frutta = [\"mela\", \"pera\", \"banana\"]; stampaArray(frutta); function stampaArray(arr) { //i parametri della funzione anonima del forEach sono opzionali e, essendo parametri posso //dare un nome simbolico qualsiasi arr.forEach( function(elemento, indice, a) { console.log( indice + \": \" + a[indice] ); } ); } /* 0: mela 1: pera 2: banana */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-24.html#arrays---foreach",
    "relUrl": "/corsi/javascript/Lezioni/js-24.html#arrays---foreach"
  },"164": {
    "doc": "Corso Javascript - 24",
    "title": "Arrays - map()",
    "content": "map() è un metodo applicabile agli array utilizzato per l’iterazione. map(function(value, index, array){/*code*/}); . Itera ogni elemento dell’array e ritorna un array. E’ utile quindi all’elaborazione e costruzione di un nuovo array a partire da quello a cui si applica il metodo. Riceve come parametro una funzione detta anonima poichè non ha un nome. La funzione riceve tre parametri opzionali, in ordine value, index, array che, dell’array a cui è applicato il metodo, rappresentano rispettivamente l’elemento, l’indice e l’array stesso. Viene invocata la funzione anonima per ogni elemento (forEach) presente nell’array. const fruits = ['mela', 'pera', 'banana']; //In questo caso newFruits sarà identico a fruits. Ho effettuato una copia const newFruits = fruits.map(function(value, index){ return value; }) console.log(newFruits); //(3) [\"mela\", \"pera\", \"banana\"] //In questo caso newFruits2 sarà un array contenente 0, 1, 2 poichè ritorna l'indice const newFruits2 = fruits.map(function(value, index){ return index; }) console.log(newFruits2); //3) [0, 1, 2] . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-24.html#arrays---map",
    "relUrl": "/corsi/javascript/Lezioni/js-24.html#arrays---map"
  },"165": {
    "doc": "Corso Javascript - 24",
    "title": "Funzioni freccia (lambda)",
    "content": "Oltre alla sintassi espressa tramite funzione anonima esiste anche una sintassi diversa espressa tramite l’operatore freccia =&gt;. Ogni funzione anonima può essere espressa tramite l’operatore freccia, questo tipo di funzione prende il nome di funzione lambda. (param1, param2, ..) =&gt; {/*code*/}; //function(param1, param2, ..{/*code*/} //Esempi con forEach() e map() map( (value, index, array) =&gt; {/*code*/} ); forEach( (value, index, array) =&gt; {/*code*/}); . Nota: . | I parametri vanno sempre espressi tra parentesi. Se si ha necessità solo del primo parametro le parentesi possono essere omesse. | In generale il corpo della funzione lambda va tra le parentesi graffe { }. Se il corpo ha un’istruzione inline, le parentesi graffe possono essere omesse. | . Esempio interessante: . //casuali è un array di 30 numeri inter casuali const numeriCasuali = []; for(let i=0; i&lt;10; i++) { numeriCasuali.push( Math.floor( Math.random()*100) ) ;} console.log(numeriCasuali); //32, 54, 33, 91, 4, 25, 46, 37, 73, 2] //calcola il resto della divisione per 7 dei numeri casuali //e crea con questi un nuovo array const isPari = numeriCasuali.map( (elemento,indice, a) =&gt; Boolean(!(elemento%2)) ); console.log(isPari); //[true, true, false, false, true, false, true, false, false, true] . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-24.html#funzioni-freccia-lambda",
    "relUrl": "/corsi/javascript/Lezioni/js-24.html#funzioni-freccia-lambda"
  },"166": {
    "doc": "Corso Javascript - 24",
    "title": "Array - Metodi avanzati",
    "content": ". | filter( (value,index,array) =&gt; {/*CONDITION*/} ); : Ritorna un array risultato del filtraggio gli elementi dell’array a cui si applica il metodo che restituiscono true nella CONDITION | some ( (value,index,array) =&gt; {/*CONDITION*/} );: Ritorna un booleano se c’è almeno un elemento nell’array che restituisce true alla CONDITION | every ( (value,index,array) =&gt; {/*CONDITION*/} ); Ritorna true (ritorna n boolean) se c’è almeno un elemento nell’array che restituisce true alla CONDITION | reduce ((accumulatore, value,index,array) =&gt; {/*CONDITION*/}, startValueAccumulatore); : Ritorna il numero di elementi che soddisfano la CONDITION. Ha due parametri: il primo è una funzione freccia che riceve a sua volta 4 parametri in ordine: accumulatore, value, index, array , il secondo, startValueAccumulatore è il valore di partenza dell’accumulatore, opzionale. Se non si specifica il valore di partenza dell’accumulatore startValueAccumulatore viene assegnato come valore il primo elemento. | . let casuali = []; for(let i=0; i&lt;20; i++) { casuali.push( Math.floor( Math.random()*100) ) ;} let diversiDaZero = casuali.filter( elemento =&gt; elemento!==0 ); console.log(diversiDaZero); if ( diversiDaZero.some( elemento =&gt; elemento&gt;4 ) ) {console.log(\"Trovato almento un resto maggiore di zero\");} let quanti = diversiDaZero.reduce( (conta, elemento) =&gt; elemento&gt;4 ? conta + 1 : conta, 0); console.log(quanti); //19 let totale = diversiDaZero.reduce( (somma, elemento) =&gt; somma+elemento); console.log(totale); //1057 /* [37, 67, 31, 88, 55, 45, 26, 21, 32, 2, 20, 62, 79, 48, 85, 53, 33, 97, 92, 84] Trovato almento un resto maggiore di zero 19 1057 */ . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-24.html#array---metodi-avanzati",
    "relUrl": "/corsi/javascript/Lezioni/js-24.html#array---metodi-avanzati"
  },"167": {
    "doc": "Corso Javascript - 24",
    "title": "Corso Javascript - 24",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-24.html",
    "relUrl": "/corsi/javascript/Lezioni/js-24.html"
  },"168": {
    "doc": "Corso Javascript - 25",
    "title": "Introduzione agli Object",
    "content": "JavaScript è progettato su un semplice paradigma basato su oggetti. Un oggetto è una raccolta di proprietà e una proprietà è un’associazione tra un nome (o chiave) e un valore. Il valore di una proprietà può essere una funzione, nel qual caso la proprietà è nota come metodo. Oltre agli oggetti predefiniti nel browser, è possibile definire i propri oggetti. Questo capitolo descrive come utilizzare oggetti, proprietà, funzioni e metodi e come creare i propri oggetti. Gli oggetti in JavaScript, proprio come in molti altri linguaggi di programmazione, possono essere paragonati agli oggetti nella vita reale. Il concetto di oggetti in JavaScript può essere compreso con oggetti tangibili della vita reale. In JavaScript, un oggetto è un’entità autonoma, con proprietà e tipo. Confrontalo con una tazza, per esempio. Una tazza è un oggetto, con proprietà. Una tazza ha un colore, un disegno, un peso, un materiale di cui è composta, ecc. Allo stesso modo, gli oggetti JavaScript possono avere proprietà che definiscono le loro caratteristiche. Fonte: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#:~:text=JavaScript%20is%20designed%20on%20a,is%20known%20as%20a%20method. Sono un tipo di data-structure che rappresenta elementi tramite una coppia chiave/valore. Si accede al valore tramite il nome dell’oggetto e la sua property cioè l’identificativo della chiave. const object = { key1: value1, key2: value2, key3: value3 } . SI chiama modello per prototipazione. Cioè un modello creato che andremo ad arricchire e modificare nel corso del codice dinamicamente. Un oggetto in js è una collezione di coppe identificatore: valore . Esempio . // Dichiarazione di un oggetto, prototipo const persona = { nome: \"Simone\", eta: 23, citta: \"Lucca\" } //accesso ai dati //Modo 1 persona.nome; //Simone, (=== persona[\"nome\"]) //Modo2 persona[\"citta\"]; //Lucca, (=== persona.citta) //modifica di un valore dell'oggetto persona.nome = \"Luigi\"; //Eliminazione della property &lt;citta&gt; dall'oggetto delete persona.citta; console.log(persona); /* persona = { nome: \"Luigi\", eta: 23 } */ . La creazione/dichiarazione di un oggetto con proprietà e metodi (vedremo più avanti) viene anche detto prototipo. Il prototipo è un modello base dell’oggetto che può essere arricchito o modificato nel corso del programma dinamicamente . Posso creare un oggetto inizialmente vuoto e aggiungere gli elementi successivamente . //Dichiaro un oggetto vuoto, modo 1 - preferibile var persona = {}; //Dichiaro un oggetto vuoto, modo 2 var computer = new Object; //Inserisco elementi in un oggetto inizialmente vuoto persona.nome = \"billy\"; persona.hobby = \"scacchi\"; computer.ram = \"4Gb\"; computer.rom = \"1Tb\"; . Di seguito mostro un esempio di un oggetto più complicato. In realtà è un array di oggetti . var post = [ // index: 0 { username: \"Billy\", like: 4, commenti: [\"figo!\", \"ottimo\", \"bleah\"] }, // index: 1 { username: \"thebest95\", like: 0, commenti: [\"fighissimo\", \"buono\", \"buonissimo\"] } ] console.log(post); /* Console: --------------- (2) [{…}, {…}] 0: commenti: (3) [\"figo!\", \"ottimo\", \"bleah\"] like: 4 username: \"Billy\" __proto__: Object 1: commenti: (3) [\"fighissimo\", \"buono\", \"buonissimo\"] like: 0 username: \"thebest95\" __proto__: Object length: 2 __proto__: Array(0) */ //Aggiungo un commento al primo elemento, cioè all'oggetto cui corrisponde username \"Billy\" post[0].commenti.push(\"Fantastico!\"); console.log(post); /* Console: --------------- (2) [{…}, {…}] 0: commenti: (3) [\"figo!\", \"ottimo\", \"bleah\",\"Fantastico!\"] like: 4 username: \"Billy\" __proto__: Object 1: commenti: (3) [\"fighissimo\", \"buono\", \"buonissimo\"] like: 0 username: \"thebest95\" __proto__: Object length: 2 __proto__: Array(0) */ . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-25.html#introduzione-agli-object",
    "relUrl": "/corsi/javascript/Lezioni/js-25.html#introduzione-agli-object"
  },"169": {
    "doc": "Corso Javascript - 25",
    "title": "Corso Javascript - 25",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-25.html",
    "relUrl": "/corsi/javascript/Lezioni/js-25.html"
  },"170": {
    "doc": "Corso Javascript - 26",
    "title": "OOP Object Oriented Programming",
    "content": "Si ricordi la frase di apertura di questo corso: In informatica JavaScript è un linguaggio di programmazione orientato agli oggetti e agli eventi… . Ma che cos’è un linguaggio di programmazione orientato agli oggetti? . In informatica, la programmazione orientata agli oggetti (in inglese object-oriented programming, in acronimo OOP) è un paradigma di programmazione che permette di definire oggetti software in grado di interagire gli uni con gli altri attraverso lo scambio di messaggi. Particolarmente adatta nei contesti in cui si possono definire delle relazioni di interdipendenza tra i concetti da modellare (contenimento, uso, specializzazione), un ambito che più di altri riesce a sfruttare i vantaggi della programmazione ad oggetti è quello delle interfacce grafiche. Tra gli altri vantaggi della programmazione orientata agli oggetti: . | essa fornisce un supporto naturale alla modellazione software degli oggetti del mondo reale o del modello astratto da riprodurre; | permette una più facile gestione e manutenzione di progetti di grandi dimensioni; l’organizzazione del codice sotto forma di classi favorisce la modularità e il riuso di codice. | . Fonte: https://it.wikipedia.org/wiki/Programmazione_orientata_agli_oggetti . Ma non esiste solo il paradigma di programmazione orientato agli oggetti. Altri due paradigmi di programmazione sono il paradigma di programmazione procedurale e il paradigma di programmazione imperativa . Programmazione Procedurale . In informatica la programmazione procedurale è un paradigma di programmazione che consiste nel creare dei blocchi di codice sorgente, identificati da un nome e racchiusi da dei delimitatori, che variano a seconda del linguaggio di programmazione; questi sono detti anche sottoprogrammi (in inglese subroutine), procedure o funzioni, a seconda del linguaggio e dei loro ruoli all’interno del linguaggio stesso. Il nome deriva dal linguaggio COBOL, che è stato il primo ad utilizzare questo concetto. Questi blocchi possono essere dotati di parametri, cioè variabili locali i cui valori vengono forniti o passati dall’esterno del blocco di codice ed eventualmente esportati; esistono due tipi di parametri: quelli di tipo valore e quelli di tipo variabile; nei primi viene passato un valore che, se modificato, non viene comunque salvato al termine del sottoprogramma; nel tipo variabile invece, viene comunicato l’indirizzo della cella di memoria (ad es.tramite un puntatore) al quale troviamo l’informazione, che può quindi essere modificata effettivamente e permanentemente. All’interno di un sottoprogramma possono essere generalmente definite o dichiarate delle variabili locali, che vengono deallocate al termine del sottoprogramma stesso; il loro contenuto viene quindi perso se non salvato o trasmesso altrimenti. In Linguaggio C esiste solo la function, che può o meno restituire valori; lo stesso dicasi per il Java ed il PHP; i blocchi sono racchiusi tra parentesi graffe. Questo tipo di paradigma è tipico per la programmazione di sistemi embedded. Fonte: https://it.wikipedia.org/wiki/Programmazione_procedurale . Programmazione imperativa . In informatica, la programmazione imperativa è un paradigma di programmazione secondo cui un programma viene inteso come un insieme di istruzioni (dette anche direttive o comandi), ciascuna delle quali può essere pensata come un “ordine” che viene impartito alla macchina virtuale del linguaggio di programmazione utilizzato. Da un punto di vista sintattico, i costrutti di un linguaggio imperativo sono spesso identificati da verbi all’imperativo. L’approccio imperativo è l’approccio dominante in programmazione. Nello studio dei linguaggi di programmazione, si definisce il concetto di paradigma di programmazione, ovvero un insieme di regole e strutture che definiscono un tipo di linguaggio basandosi esclusivamente sulle sue strutture, e quindi non sulle sue caratteristiche peculiari legate all’implementazione dello stesso (es. le parole chiave). Sono di tipo imperativo la grande maggioranza dei (sotto-)paradigmi di programmazione (per esempio la programmazione procedurale, la programmazione strutturata, la programmazione orientata agli oggetti e così via) e la grande maggioranza dei linguaggi (per esempio ALGOL, Ada, BASIC, Fortran, Pascal, PHP eccetera). Fonte: https://it.wikipedia.org/wiki/Programmazione_imperativa . Javascript è un linguaggio di programmazione che si presta molto bene a tutti e tre i paradigmi. Adesso approfondiremo il paradigma di programmazione orientato agli oggetti concludendo con la definizione di classe . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-26.html#oop-object-oriented-programming",
    "relUrl": "/corsi/javascript/Lezioni/js-26.html#oop-object-oriented-programming"
  },"171": {
    "doc": "Corso Javascript - 26",
    "title": "Corso Javascript - 26",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-26.html",
    "relUrl": "/corsi/javascript/Lezioni/js-26.html"
  },"172": {
    "doc": "Corso Javascript - 27",
    "title": "Introduzione ai Metodi",
    "content": "Si ricordi che con Javascript è possibile definire delle funzioni assegnabili a variabili, è quindi possibile definire delle funzioni assegnabili a una property. In questo caso si parla di metodi . Metodo: Funzione applicabile a un oggetto. Non ha senso al di fuori del contesto dell’oggetto in cui è stata definita . var persona = { nome: \"Simone\", dataDiNascita: 1995, sesso: \"maschio\", isMarried: false, famiglia: [\"Anotinio\", \"Giovanni\", \"Alice\"], calcolaEta: function(){ return 2020 - this.dataDiNascita; } } console.log(persona.calcolaEta()); //25 . Nella definizione di un metodo (una funzione all’interno di un oggetto), this rappresenta l’oggetto stesso. E’ quindi necessario per poter prelevare ed elaborare le property interne dell’oggetto che ricordiamo sono accessibili solo attraverso il nome dell’oggetto. Nella definizione di un metodo non posso accedere direttamente alle property senza invocare this l’interprete solleverebbere un’eccezione poichè non riconoscerebbe l’identificatore invocato. var persona = { nome: \"Simone\", dataDiNascita: 1995, sesso: \"maschio\", isMarried: false, famiglia: [\"Anotinio\", \"Giovanni\", \"Alice\"], calcolaEta: function(){ return 2020 - dataDiNascita; } } console.log(persona.calcolaEta()); //dataDiNascita is not defined . Nota: la keyword this ha anche altri significati che dipendono dal contesto in cui è chiamato. Posso invocare un metodo anche per definire una nuova proprietà dell’oggetto: . const persona = { nome: \"Simone\", dataDiNascita: 1995, sesso: \"maschio\", isMarried: false, famiglia: [\"Anotinio\", \"Giovanni\", \"Alice\"], calcolaEta: function(){ return 2020 - this.dataDiNascita; } } //Verrà aggiunta la property \"eta\" all'oggetto persona.eta = persona.calcolaEta(); console.log(persona); /* Console: --------------- {nome: \"Simone\", dataDiNascita: 1995, sesso: \"maschio\", isMarried: false, famiglia: Array(3), …} calcolaEta: ƒ () dataDiNascita: 1995 eta: 25 famiglia: (3) [\"Anotinio\", \"Giovanni\", \"Alice\"] isMarried: false nome: \"Simone\" sesso: \"maschio\" __proto__: Object */ . Vediamo un altro esempio: . let libro = { titolo: \"Fondazione\", pagine: 571 } let autorePreferito = { cognome: \"Asimov\", nome: \"Isaac\", // E' possibile definire una property tra gli apici doppi \"nameProperty\" //in modo da forzare a valutarla come identificatore. //Infatti in questo caso il nome libro-preferito non sarebbe accettata come sintassi a causa del \"-\" //E' comunque da EVITARE \"libro-preferito\": { titolo: \"L`uomo del bicentenario\", pagine: 288 }, //Riferimento all'oggetto \"libro\" esterno. Attenzione! //E' un riferimento non è una copia. Se modifico questa property di questo oggetto (autorePreferito) //modifico anche l'oggetto libro e viceversa. bestSeller: libro, } //Per accedere alla proprietà \"libro-preferito\" devo per necessariamente utilizzare la notazione con le []. La notazione ///con \".\" non può andare bene. //Ecco perchè è necessario evitare questi nomi con caratteri non validi cosnole.log(autorePreferito[\"libro-preferito\"].pagine); console.log(autorePreferito.bestSeller.titolo); autorePreferito.bestSeller.pagine=1000; console.log(libro.pagine); //1000, ATTENZIONE . Come abbiamo visto in questo esempio, specificando come property un altro oggetto, questo viene passato per riferimento e non viene fatta una copia. La libreria JQuery può aiutarci in questo. let libro = { titolo: \"Fondazione\", pagine: 571 } let autorePreferito = { cognome: \"Asimov\", nome: \"Isaac\", //in questo caso sono necessari i doppi apici (o singoli) perchè scrivendo libro-preferito lo tratterebbe com espressione. E' comunque da EVITARE \"libro-preferito\": { titolo: \"L`uomo del bicentenario\", pagine: 288 }, //in questo caso è JQuery che si occupa di restituire una copia dell'oggetto bestSeller: jQuery.extend(true, {}, libro) } console.log(autorePreferito[\"libro-preferito\"].pagine); //288 console.log(autorePreferito.bestSeller.titolo); //Fondazione autorePreferito.bestSeller.pagine=1000; console.log(libro.pagine); //571 . La funzione jQuery.extend(true, {}, object) effettua la copia ricorsiva di tutti elementi dell’oggetto specificato come terzo parametro. back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-27.html#introduzione-ai-metodi",
    "relUrl": "/corsi/javascript/Lezioni/js-27.html#introduzione-ai-metodi"
  },"173": {
    "doc": "Corso Javascript - 27",
    "title": "Corso Javascript - 27",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-27.html",
    "relUrl": "/corsi/javascript/Lezioni/js-27.html"
  },"174": {
    "doc": "Corso Javascript - 28",
    "title": "Costruttore",
    "content": "Partendo dall’esempio della lezione precedente, riporto un esempio completo di come creare un nuovo oggetto partendo dal prototipo. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; let libro = { titolo: \"\", pagine: 0 } let autorePreferito = { cognome: \"\", nome: \"\", libroPreferito: { titolo: \"\", pagine: 0 }, //JQuery.extend() restituisce una copia dell'oggetto bestSeller: jQuery.extend(true, {}, libro) } console.log(autorePreferito.cognome); console.log(autorePreferito.nome); console.log(autorePreferito.libroPreferito.titolo); console.log(autorePreferito.libroPreferito.pagine); console.log(autorePreferito.bestSeller.titolo); console.log(autorePreferito.bestSeller.pagine); //Chiamata al costruttore libro = new LibroConstructor (\"Il ritorno all'isola\", 301); //Chiamata al costruttore autorePreferito = new Autore( \"Isaac\", \"Asimov\", \"L`uomo del bicentenario\", 288, libro ); //Modo alternativo /* autorePreferito = new Autore( \"Isaac\", \"Asimov\", \"L`uomo del bicentenario\", 288, new LibroConstructor ( \"Il ritorno all'isola\", 301 ) ); */ //Funzione costruttore function Autore(cognome, nome, titolo, pagine, bestSeller) { //stato interno this.cognome = cognome; this.nome = nome; this.libroPreferito = {titolo,pagine}; //this.libroPreferito = {titolo: titolo,pagine: pagine}; this.bestSeller = jQuery.extend(true, {}, bestSeller); } function LibroConstructor (titolo, pagine){ this.titolo = titolo; this.pagine = pagine; } console.log(autorePreferito.cognome); console.log(autorePreferito.nome); console.log(autorePreferito.libroPreferito.titolo); console.log(autorePreferito.libroPreferito.pagine); console.log(autorePreferito.bestSeller.titolo); console.log(autorePreferito.bestSeller.pagine); /* \"\" \"\" \"\" 0 \"\" 0 Isaac Asimov L`uomo del bicentenario 288 Il ritorno all'isola 301 */ &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Il costruttore è una funzione che riceve come parametri i valori delle property e costruisce (ritorna) un oggetto. Notare l’uso del new necessario per l’invocazione del costruttore e del this ripetuto per ogni property necessario per stabilire il contesto dell’oggetto che viene creato dal costruttore. Vediamo adesso l’aggiunta di metodi all’esempio di sopra: . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; let libro = { titolo: \"\", pagine: 0 } function LibroConstructor (titolo, pagine){ this.titolo = titolo; this.pagine = pagine; } let autorePreferito = { cognome: \"\", nome: \"\", libroPreferito: { titolo: \"\", pagine: 0 }, bestSeller: jQuery.extend(true, {}, libro) } function Autore(cognome, nome, titolo, pagine, bestSeller) { //stato interno this.cognome = cognome; this.nome = nome; this.libroPreferito = {titolo,pagine}; //this.libroPreferito = {titolo: titolo,pagine: pagine}; this.bestSeller = jQuery.extend(true, {}, bestSeller); //metodi this.getSchedaBestSeller = function() { let stringa = this.bestSeller.titolo + \"\\n\" + this.bestSeller.pagine; let stringaConCornicetta = \"*\".repeat(10) + \"\\n\" + \"BestSeller\" + \"\\n\" + \"-\".repeat(10) + \"\\n\" + stringa + \"\\n\" + \"*\".repeat(10); return stringaConCornicetta; } this.getSchedaAutore = function() { let stringa = this.cognome + \"\\n\" + this.nome + \"\\n\" + this.libroPreferito.titolo + \"\\n\" + this.libroPreferito.pagine; let stringaConCornicetta = \"*\".repeat(10) + \"\\n\" + \"Scheda\" + \"\\n\" + \"-\".repeat(10) + \"\\n\" + stringa + \"\\n\" + \"*\".repeat(10); return stringaConCornicetta; } } //Creo una collezione di oggetti, cioè un array di oggetti let schedario = [ new Autore( \"Runny\", \"Ted\", \"Lo sguardo del principe\", 212, new LibroConstructor( \"Il mio viaggio\", 272) ), new Autore( \"Buld\", \"Frank\", \"I segreti di tutti\", 302, new LibroConstructor( \"Il mio segreto\", 180) ) ]; //Aggiungo in coda un nuovo oggetto schedario.push( new Autore( \"Tuy\", \"malek\", \"La voglia di te\", 167, new LibroConstructor( \"la voglia di niente\", 134 ) ) ); //itero ogni elemento dell'array e chiamo i metodi for (let autore of schedario) { console.log( autore.getSchedaAutore() ); console.log( autore.getSchedaBestSeller() ); } /* ********** Scheda ---------- Runny Ted Lo sguardo del principe 212 ********** ********** BestSeller ---------- Il mio viaggio 272 ********** ********** Scheda ---------- Buld Frank I segreti di tutti 302 ********** ********** BestSeller ---------- Il mio segreto 180 ********** ********** Scheda ---------- Tuy malek La voglia di te 167 ********** ********** BestSeller ---------- la voglia di niente 134 ********** */ &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-28.html#costruttore",
    "relUrl": "/corsi/javascript/Lezioni/js-28.html#costruttore"
  },"175": {
    "doc": "Corso Javascript - 28",
    "title": "Corso Javascript - 28",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-28.html",
    "relUrl": "/corsi/javascript/Lezioni/js-28.html"
  },"176": {
    "doc": "Corso Javascript - 29",
    "title": "Ereditarietà",
    "content": "JavaScript confonde un po’ gli sviluppatori che hanno esperienza di linguaggi basati sulle classi (come Java o C++), poichè è un linguaggio dinamico e non fornisce un’implementazione di class (la keyword class è introdotto in ES2015, ma è zucchero sintattico, Javascript rimarrà basato sui prototipi). In termini di ereditarietà, Javascript ha solo un costrutto: gli oggetti. Ogni oggetto ha un link interno ad un altro oggetto chiamato prototype. Questo oggetto prototype ha a sua volta un suo prototype, e così via finché si raggiunge un oggetto con property null. null, per definizione, non ha un prototype, ed agisce come link finale nella catena di prototipi. Quasi tutti gli oggetti in Javascript sono istanze di Object, che risiede in cima alla catena dei prototipi. Nonostante questo sia considerato spesso come una debolezza di Javascript, il modello di ereditarietà prototipale è invece più potente del modello classico. Per esempio, è banale costruire un classico modello sul modello prototipale, mentre il contrario è molto più difficile. Fonte: https://developer.mozilla.org/it/docs/Web/JavaScript/Inheritance_and_the_prototype_chain . Supponiamo di aver creato un oggetto con certe proprietà e metodi e di voler creare un altro oggetto con le stesse propietà e gli stessi metodi ed altre proprietà/metodi speifiche. Una soluzione, per quello che conosciamo adesso, si ha banalmente con un copia e incolla dell’oggetto modello (prototipo) aggiungendo poi le caratteristiche aggiuntive. Il concetto dell’ereditarietà evita questa procedura di copia incolla non solo perchè sarebbe una ripetizione ma anche, soprattutto, perchè gli errori con i copia e incolla diventano intracciabili. Se è stato individuato un errore nell’oggetto A, è necessario riportare tutte le modifiche anche negli altri oggetti di cui si è effettuata la copia manuale .. non è il massimo. Per parlare di ereditarietà dobbiamo parlare di gerarchia padre/figlio. Un figlio è un oggetto che contiene tutte le caratteristiche del padre ovvero ne eredita le proprietà. Si parla anche di modello is-a . Immaginiamo di avere questo modello piramidale: . | Animali . | Mammiferi . | Cane | Gatto | Volpe | . | . | . L’oggetto Volpe è un (is-a) Mammifero, un Mammifero è un (is-a) Animale. Secondo questo modello è possibile costruire degli oggetti molto dettagliati semplicemente sfruttando le proprietà ereditate . Vediamo come si costruisce un oggetto con proprietà ereditate . //persona è l'oggetto &lt;padre&gt; let persona = { nome: \"\"}; //Creo l'oggetto fantozzi. //fantozzi è un oggetto che ha come prototipo l'oggetto persona. //fantozzi is-a persona let fantozzi = Object.create( persona ); //persona e il prototipo di fantozzi sono la stesso oggetto console.log(persona===Object.getPrototypeOf(fantozzi)); =&gt; true //Per accedere in scrittura alle proprietà ereditate si utilizza il metodo getPrototypeOf() //applicabile agli oggetti Object.getPrototypeOf(fantozzi).nome = \"Fantozzi\"; //non avrei potuto scrivere direttamente \"fantozzi.nome\" perchè avrebbe creato una proprietà locale //poichè &lt;nome&gt; non è una proprietà dell'oggetto \"fantozzi\" ma dell'oggetto \"persona\" //e quindi una proprietà ereditata è necessario il metodo getPrototypeOf() per distinguere in scrittura //le proprietà locali da quelle ereditate. //In lettura, se non ci sono conflitti (vedremo più avanti), //non importa specificare getPrototypeOf() perchè il costrutto cerca prima tra le proprietà locali //la proprietà &lt;nome&gt;, se non è presente la si cerca tra gli oggetti padre e quindi tra le property ereditate //In questo caso non la troverà tra le proprietà locali ma tra quelle ereditate console.log(fantozzi.nome); //Fantozzi //In questo caso aggiungo una proprietà locale fantozzi.nome = \"il super sfigato\"; //La proprità locale ha la precedenza. La proprietà locale maschera quella ereditata //Shadowing console.log(fantozzi.nome); //il super sfigato //Per accedere in lettura alla proprietà &lt;nome&gt; ereditata devo necessariamente utilizzare il //getPrototypeOf() console.log(Object.getPrototypeOf(fantozzi).nome); . ATTENZIONE!! . Il metodo create non crea una copia. let fantozzi = Object.create( persona ); . l’oggetto fantozzi non è una copia dell’oggetto persona. Il figlio (fantozzi) condivide le stesse property del padre(persona). Se modifico le property del figlio (fantozzi) le trovo modificate anche nell’oggetto padre (persona) proprio perchè condividono le stesse variabili, lo stesso spazio in memoria. Questo è da tenere in considerazione! . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-29.html#ereditariet%C3%A0",
    "relUrl": "/corsi/javascript/Lezioni/js-29.html#ereditarietà"
  },"177": {
    "doc": "Corso Javascript - 29",
    "title": "Corso Javascript - 29",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-29.html",
    "relUrl": "/corsi/javascript/Lezioni/js-29.html"
  },"178": {
    "doc": "Corso Javascript - 30",
    "title": "Ereditarietà - Shadowing",
    "content": "Lo shadowing è un meccanismo di mascheramento/oscuramento di property ereditate con la definizione di property locali . Esempio . let persona = { nome: \"\", cognome:\"\", Etichetta: function() //Stringhe template. Iniziano con $. Prima vengono valutate poi il valore viene sostituito e notare gli acccenti gravi { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} }; //L'oggetto persona diventa il prototipo dell'oggetto fantozzi let fantozzi = Object.create( persona ); //Metodo hasOwnProperty(\"property\"): ritorna &lt;true&gt; se l'oggetto a cui si applica il metodo //ha come proprietà diretta (non ereditata) \"property\", quella indicata come parametro. console.log(fantozzi.hasOwnProperty(\"nome\")); //false //In questo caso constrollo se \"nome\" appartiene al padre console.log(Object.getPrototypeOf(fantozzi).hasOwnProperty(\"nome\")); //true cosnole.log(fantozzi.nome); //non ancora inizializzata ma la variabile viene trovata come proprietà ereditata //Accedo in scrittura alle proprietà ereditate Object.getPrototypeOf(fantozzi).nome = \"Ugo\"; Object.getPrototypeOf(fantozzi).cognome = \"Fantozzi\"; //Creo una proprietà locale fantozzi.nome = \"e io chi sono??\"; //Accedo in lettura alla proprietà locale console.log(fantozzi.nome); //e io chi sono?? //Accedo in lettura alla proprietà ereditata console.log(Object.getPrototypeOf(fantozzi).nome); //Ugo //Posso eliminare una property tramite il comando &lt;delete&gt; ma solo tra quelle locali delete fantozzi.nome; //A questo punto rimane solo la property &lt;name&gt; ereditata console.log(fantozzi.nome); //Ugo //Shadowing: Meccanismo di mascheramento/oscuramento di property ereditate con la definizione di //prperty locali //Chiamo il metodo Etichetta dell'oggetto fantozzi eredietato dall'oggetto persona console.log( \"1: \" + fantozzi.Etichetta() ); //Oscuro il metodo &lt;Etichetta&gt; ereditato dal metodo &lt;Etichetta&gt; definito localmente -&gt; shadowing fantozzi.Etichetta = function() {return \"il sottoposto per eccellenza\";} console.log(\"2: \" + fantozzi.Etichetta()); //Variante ... //Un po' complessa. //Definisco un metodo locale che utilizza il metodo ereditato. //il this fa riferimento all'oggetto in cui si definisce il metodo quindi \"fantozzi\" fantozzi.Etichetta = function() {return Object.getPrototypeOf(this).Etichetta() + \" detto il sottoposto\";} console.log(\"3: \" + fantozzi.Etichetta()); //le proprietà del prototipo sono CONDIVISE. //Se modifico una propietà in un figlio ereditata da una proprietà del padre, //la ritrovo modificata anche nel padre e negli altri figli del padre, cioè nei \"fratelli\" //Questo non è lo stesso meccanismo del C/C#/Java let filini = Object.create( persona ); Object.getPrototypeOf(filini).cognome = \"Filini\"; console.log(( \"4: \" + fantozzi.cognome );//Filini, ATTTT!! . Metodo hasOwnProperty(): ritorna se l'oggetto a cui si applica il metodo ha come proprietà diretta (non ereditata) \"property\", quella indicata come parametro. Cosniderazione: Il padre di tutti gli oggetti è proprio “Object” . Ricorda: Con il metodo create() non creo una copia dell’oggetto, cioè un’istanza del prototipo, ma instauro solo un rapporto di condivisione . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-30.html#ereditariet%C3%A0---shadowing",
    "relUrl": "/corsi/javascript/Lezioni/js-30.html#ereditarietà---shadowing"
  },"179": {
    "doc": "Corso Javascript - 30",
    "title": "Ereditarietà classica",
    "content": "Per ereditarietà classica si intende il meccanismo con il quale Javascript permette la crazione di istanze di oggetti a partire da un prototipo. Nell’esempio vedremo come realizzare una copia dato un prototipo . Vediamo finalmente il metodo per creare una fottuta copia . //Prototipo function Persona(nome, cognome) { //stato interno //Ogni istanza avrà la sua copia di cognome e nome this.cognome = cognome; this.nome = nome; //ogni istanza avrà la sua copia di etichetta this.etichetta = function() { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} } //chiamata al costruttore let fantozzi = new Persona(\"Ugo\", \"Fantozzi\"); let filini = new Persona(\"Renzo Silvio\", \"Filini\") //gli oggetti fantozzi e filini hanno le loro copie distinte //delle variabili dello stato interno console.log(\"1: \" + fantozzi.etichetta()); cosnole.log(\"2: \" + filini.etichetta()); cosnole.log`3: ${fantozzi.etichetta===filini.etichetta}`); //false . back next ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-30.html#ereditariet%C3%A0-classica",
    "relUrl": "/corsi/javascript/Lezioni/js-30.html#ereditarietà-classica"
  },"180": {
    "doc": "Corso Javascript - 30",
    "title": "Corso Javascript - 30",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-30.html",
    "relUrl": "/corsi/javascript/Lezioni/js-30.html"
  },"181": {
    "doc": "Corso Javascript - 31",
    "title": "THIS",
    "content": "In questi esempi cercheremo di capire la funzione di this in Javascript a seconda dei contesti. function Persona(nome, cognome) { //stato interno this.cognome = cognome; this.nome = nome; console.log(this===window); //true this.etichetta = function() { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} } //Attenzione, qua non utilizzo il costruttore. //this punta all'oggetto &lt;window&gt; (cioè il padre del DOM). //Il risultato è che le property &lt;nome&gt;, &lt;cognme&gt; diventano a tutti gli effetti variabili globali //poichè &lt;window&gt; è un oggetto implicito Persona(\"\",\"zzzzzz\"); //cognome è una variabile globale, window.cognome === cognome console.log(cognome); //zzzzzz . Se invece utilizzo il costruttore dell’oggetto.. function Persona(nome, cognome) { this.cognome = cognome; this.nome = nome; console.log(this===window); //false this.etichetta = function() { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} } //Utilizzo il costruttore per creare due istanze dell'oggetto \"Persona\", \"fantozzi\", \"filini\" let fantozzi = new Persona(\"Ugo\", \"Fantozzi\"); let filini = new Persona(\"Renzo Silvio\", \"Filini\"); //Adesso le variabili (property) &lt;nome&gt;, &lt;cognome&gt; sono visibili solo nel contesto degli oggetti \"fantozzi\" e \"filini\" //e accessibili solo tramite l'opertore \".\" console.log(cognome); //cognome is not defined. console.log(fantozzi.cognome); //Fantozzi. console.log(filini.cognome); //Filini. Quando this è all’interno della definizione di un metodo, fa riferimento all’oggetto per cui si definisce il metodo. Nota: Non posso definire una variabile locale “local_var” senza far uso di this. Non sarà disponibile nelle istanze degli oggetti ma solo nel constesto della chiamata funzione e quindi non nel contesto della chiamata a costruttore. Vediamo un esempio . function Persona(nome, cognome) { this.cognome = cognome; this.nome = nome; let local_var=999; //ATTENZIONE!! Non ha senso nel contesto di chiamata a costruttore //ogni istanza avrà la sua copia di etichetta this.etichetta = function() { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} } let fantozzi = new Persona(\"Ugo\", \"Fantozzi\"); let filini = new Persona(\"Renzo Silvio\", \"Filini\"); console.log(fantozzi.local_var); //undefined console.log(fantozzi.cognome); //Fantozzi. console.log(filini.cognome); //Filini. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-31.html#this",
    "relUrl": "/corsi/javascript/Lezioni/js-31.html#this"
  },"182": {
    "doc": "Corso Javascript - 31",
    "title": "Object - Variabili Statiche (condivise)",
    "content": "In generale, le variabili statiche sono variabili condivise. Nel contesto di un oggetto, per creare delle variabili statiche cioè condivise tra tutte le istanze si ottiene attraverso il metodo prototype . function Persona(nome, cognome) { this.cognome = cognome; this.nome = nome; this.etichetta = function() { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} } let fantozzi = new Persona(\"Ugo\", \"Fantozzi\"); let filini = new Persona(\"Renzo Silvio\", \"Filini\"); //dichairo una variabile (property) \"s\", \"ETA_MIN\" statica cioè condivisa tra tutte le istanze create attravero il modello //dell'oggetto \"Persona\" Persona.prototype.s = \"ciao\"; Persona.prototype.ETA_MIN={value: 18} ; console.log(fantozzi.s); //ciao console.log(filini.s); //ciao console.log(fantozzi.ETA_MIN); //{value: 18} console.log(filini.ETA_MIN); //{value: 18} //Posso dichiarare anche un metodo condiviso Persona.prototype.etichettaCondivisa = function() { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} console.log(`3: ${fantozzi.etichetta===filini.etichetta}`); //false console.log(`4: ${fantozzi.etichettaCondivisa===filini.etichettaCondivisa}`); //true . Vediamo un ultimo esempio: . function Persona(nome, cognome) { this.cognome = cognome; this.nome = nome; this.etichetta = function() { return `Egr. Sig. Lup. Mann. ${this.nome} ${this.cognome}`} } let fantozzi = new Persona(\"Ugo\", \"Fantozzi\"); let filini = new Persona(\"Renzo Silvio\", \"Filini\"); Persona.prototype.s = \"ciao\"; console.log(fantozzi.s); //ciao console.log(filini.s); //ciao //Se voglio accedere in scrittura ad una property condivisa tramite un figlio, dobbiamo al solito modo //utilizzare getPrototypeOf() Object.getPrototypeOf(fantozzi).s = \"amor\"; console.log(fantozzi.s); //amor console.log(filini.s); //amor //Definisco una property locale a fantozzi fantozzi.s = \"mare\"; console.log(fantozzi.s); //mare console.log(filini.s); //amor . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-31.html#object---variabili-statiche-condivise",
    "relUrl": "/corsi/javascript/Lezioni/js-31.html#object---variabili-statiche-condivise"
  },"183": {
    "doc": "Corso Javascript - 31",
    "title": "Corso Javascript - 31",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-31.html",
    "relUrl": "/corsi/javascript/Lezioni/js-31.html"
  },"184": {
    "doc": "Corso Javascript - 32",
    "title": "Introduzione For In",
    "content": "for-in è un metodo utilizzato per iterare sulle property degli oggetti tramite l’identificativo delle chiavi. Vedremo più avanti cosa sta dietro a un costrutto così semplice e potente . for(const x in object){ //code } . const Persona = { name: 'Simone', eta: 23, hobby: 'Tennis' } for (const x in Persona) { console.log('+++++++++++++++'); console.log(x); //Itero sulle chiavi console.log(typeof x); //x è una stringa //non posso utilizzare Persona.x poichè x è una stringa. //Posso comunque utilizzare la notazione Persona[x] che in questo i torna comodo console.log(Persona[x]); //Itero sui valori console.log(Persona.x); //Itero sui valori console.log('+++++++++++++++'); } /* +++++++++++++++ name string Simone +++++++++++++++ +++++++++++++++ eta string 23 +++++++++++++++ +++++++++++++++ hobby string Tennis +++++++++++++++ */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-32.html#introduzione-for-in",
    "relUrl": "/corsi/javascript/Lezioni/js-32.html#introduzione-for-in"
  },"185": {
    "doc": "Corso Javascript - 32",
    "title": "Oggetto Date()",
    "content": "Un oggetto interessante è l’oggetto Date(). Javascript permette di gestire in modo semplice il tempo, la data, l’ora acquisendo dati dalla rete. //Chiamata al costruttore Date() con parametri di default let oggi = new Date(); console.log(oggi); /* Console: --------------- Wed Nov 11 2020 17:13:04 GMT+0100 (Ora standard dell’Europa centrale) */ //Passaggio di parametri al costruttore Date() let compleannoMio = new Date('07-22-1991-09:30:12'); //Modi alternativi let compleannoMario = new Date('07/22/1991'); let compleannoGiovanni = new Date('July 22 1991'); console.log('compleannoMio: ' + compleannoMio); console.log('compleannoMario: ' + compleannoMario); console.log('compleannoGiovanni: ' + compleannoGiovanni); /* Console: --------------- compleannoMio: Mon Jul 22 1991 09:30:12 GMT+0200 (Ora legale dell’Europa centrale) compleannoMario: Mon Jul 22 1991 00:00:00 GMT+0200 (Ora legale dell’Europa centrale) compleannoGiovanni: Mon Jul 22 1991 00:00:00 GMT+0200 (Ora legale dell’Europa centrale) */ . Essendo Date() un oggetto ci sono diversi metodi get associati a questo oggetto come: . | getFullYear() : Ritorna l’anno | getMonth() : Ritorna il mese a partire da 0, 0 = GEN, 1 = FEB | getDate() : Ritorna il giorno del mese corrente, range [1 - 31] | getDay() : Ritorna il giorno della settimana a partire da 0, 0 = DOM, 1 = LUN | getHours() : Ritornano le ore | getMinutes() : Ritornano i minuti | getSeconds() : Ritornano i secondi | getMilliseconds() : Ritornano i millisecondi | getTime() : he getTime() method returns the number of milliseconds between midnight of January 1, 1970 and the specified date | … | . Ma anche metodi analoghi di set come: . | setFullYear(year) | setMonth(month) | setHours(h, m, s) | .. | . //Metodi get let myData = new Date(); console.log('getFullYear: ' + myData.getFullYear()); console.log('getMonth: ' + myData.getMonth()); console.log('getDate: ' + myData.getDate()); console.log('getDay: ' + myData.getDay()); console.log('getHours: ' + myData.getHours()); console.log('getMinutes: ' + myData.getMinutes()); console.log('getSeconds: ' + myData.getSeconds()); console.log('getMilliseconds: ' + myData.getMilliseconds()); console.log('getTime: ' + myData.getTime()); /* Console: --------------- getFullYear: 2020 getMonth: 10 getDate: 12 getDay: 4 getHours: 10 getMinutes: 27 getSeconds: 50 getMilliseconds: 336 getTime: 1605173270336 */ //Metodi set let compleannoMario = new Date('April 02 2002'); console.log('compleannoMario: ' + compleannoMario); /* Console: --------------- compleannoMario: Tue Apr 02 2002 00:00:00 GMT+0200 (Ora legale dell’Europa centrale) */ compleannoMario.setFullYear('1991'); compleannoMario.setMonth(9); compleannoMario.setHours(12, 45, 09); console.log('compleannoMario: ' + compleannoMario); /* Console: --------------- compleannoMario: Wed Oct 02 1991 12:45:09 GMT+0100 (Ora standard dell’Europa centrale) */ . Nota: Se creto un’istanza dell’oggetto Date() senza parametri, verrà invocato il costruttore con parametri di default. Di default Date() restituisce l’ora e la data locale fornita dalla rete. Quindi l’oggetto appena creato farà riferimento all’ora corrente, un dato dinamico. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-32.html#oggetto-date",
    "relUrl": "/corsi/javascript/Lezioni/js-32.html#oggetto-date"
  },"186": {
    "doc": "Corso Javascript - 32",
    "title": "Corso Javascript - 32",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-32.html",
    "relUrl": "/corsi/javascript/Lezioni/js-32.html"
  },"187": {
    "doc": "Corso Javascript - 33",
    "title": "Classi",
    "content": "Le classi JavaScript, introdotte in ECMAScript 2015, sono principalmente zucchero sintattico sull’esistente ereditarietà prototipale di JavaScript. La sintassi non introduce un nuovo modello di eredità orientata agli oggetti in JavaScript. Le classi sono di fatto delle “funzioni speciali”, e così come puoi definire function expressions e function declarations, la sintassi per la classe ha due componenti: class expressions e class declarations. Non è lo stesso concetto di classe definita come ad esempio per il linguaggio C++. class Persona { } let Fantozzi = new Persona(); cosnole.log(typeof(Fantozzi)); //Object //Dietro il meccanismo di classe c'è di fatto il concetto di prototipo/funzione cosnole.log(typeof(Persona)); //function . Vediamo un esempio più completo . class Persona { //utilizzo parametri di default constructor(cognome=\"sconosciuto\", nome=\"sconosciuto\") { this.cognome = cognome; this.nome = nome; } } //non passo nessun parametro quindi utilizzerà i valori di default let Fantozzi = new Persona(); cosnole.log(Fantozzi.nome); //sconosciuto . Note: . | Con questa definizione di classe non esiste tuttavia un meccanismo che possa rendere privati i dati come nel concetto di classe che si avrebbe nel c++. | Non è possibile un meccanismo di overload dei costruttori, non possono quindi coesistere più costruttori. E’ ammesso un solo costruttore per classe. | . Tuttavia ogni istanza creata avrà i dati separati . class Persona { //utilizzo parametri di default constructor(cognome=\"sconosciuto\", nome=\"sconosciuto\") { this.cognome = cognome; this.nome = nome; } } //non passo nessun parametro quindi utilizzerà i valori di default let Fantozzi = new Persona(); console.log(Fantozzi.nome); //sconosciuto let Fantozzi = new Persona(\"Fantozzi\", \"Ugo\"); console.log(Fantozzi.nome); //Ugo let Filini = new Persona(\"Filini\", \"Silvio\"); console.log(Filini.nome); //Silvio console.log(Fantozzi.nome); //Ugo . Ampliamo la classe con l’aggiunta di metodi: . class Persona { //utilizzo parametri di default constructor(cognome=\"sconosciuto\", nome=\"sconosciuto\") { this.cognome = cognome; this.nome = nome; } etichetta() { return `Egr. Sig. ${this.nome} ${this.cognome}`; } } let Fantozzi = new Persona(\"Fantozzi\", \"Ugo\"); let Filini = new Persona(\"Filini\", \"Silvio\"); cosnole.log(Fantozzi.etichetta ); cosnole.log(Filini.Etichetta ); cosnole.log(Fantozzi.etichetta===Filini.Etichetta); //false . Aggiunta di metodi condivisi . class Persona { //utilizzo parametri di default constructor(cognome=\"sconosciuto\", nome=\"sconosciuto\") { this.cognome = cognome; this.nome = nome; } //metodo condiviso tra tutte le istanze static etichetta() { return `Egr. Sig. ${this.nome} ${this.cognome}`; } //metodo separato per ogni istanza etichetta() { return `Egr. Sig. ${this.nome} ${this.cognome}`; } } let Fantozzi = new Persona(\"Fantozzi\", \"Ugo\"); let Filini = new Persona(\"Filini\", \"Silvio\"); //Assegno dei \"value\" alle property della classe Persona.cognome = \"Liberti\"; Persona.nome = \"Franco\"; //il metodo Filini.etichetta è il metodo locale alla classe Filini. //Prende il nome di \"Metodo di istanza\" console.log(\"Metodo di istanza: \" + Filini.etichetta() ); //Metodo di istanza: Egr. Sig. Silvio Filini //il metodo Persona.etichetta è il metodo condiviso tra tutte le istanze della classe Persona. //Prende il nome di \"Metodo di classe\" console.log(\"Metodo di classe: \" + Persona.etichetta() ); //Metodo di classe: Egr. Sig. Franco Liberti . Vediamo un esempio in cui posso sfruttare le variabili statiche. In questo esempio, ogni volta che creo un’istanza della classe Persona, incremento una variabile statica che indicherà alla fine quante istanze ho creato . class Persona { constructor(cognome=\"sconosciuto\", nome=\"sconosciuto\") { this.cognome = cognome; this.nome = nome; //ogni volta che creo un'istanza della classe Persoan, si icrementa la variabile \"conta\" //Nota &lt;conta&gt; è stata aggiunta dopo la creazione della classe Persona Persona.conta ++; } static personeCreate() { return Persona.conta;} etichetta() { return `Egr. Sig. ${this.nome} ${this.cognome}`; } } //Resetto il conteggio Persona.conta = 0; let Fantozzi = new Persona(\"Fantozzi\", \"Ugo\"); let Filini = new Persona(\"Filini\", \"Silvio\"); console.log(Persona.conta); //2 console.log(Persona.personeCreate() ); //2 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-33.html#classi",
    "relUrl": "/corsi/javascript/Lezioni/js-33.html#classi"
  },"188": {
    "doc": "Corso Javascript - 33",
    "title": "Corso Javascript - 33",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-33.html",
    "relUrl": "/corsi/javascript/Lezioni/js-33.html"
  },"189": {
    "doc": "Corso Javascript - 34",
    "title": "Classi assegnanili a variabili",
    "content": "Posso assegnare una classe ad una variabile esattamente come per gli oggetti, le funzioni.. //questa è una classe anonima let Punto = class { constructor(x,y) {this.x =x; this.y=y;} } let p = new Punto(10,-30); console.log(p.y); //-30 p.x = \"paperino\"; //non viene fatto nessun controllo semantico console.log(p.x); //paperino . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-34.html#classi-assegnanili-a-variabili",
    "relUrl": "/corsi/javascript/Lezioni/js-34.html#classi-assegnanili-a-variabili"
  },"190": {
    "doc": "Corso Javascript - 34",
    "title": "Get / Set",
    "content": "Non c’è un modo di definire x e y private con un meccanismo simile alle property private per le classi definite dal linguaggio C++ tuttavia esiste un sistema che ci aiuta a nascondere le variabili interne, get/set. //PuntoIQ è una classe che assegna punti solo nel primo quadrante class PuntoIQ { constructor(x,y) { if (x&lt;0 || y&lt;0){ throw \"Non nel primo quadrante\"; } this._x = x; this._y = y; } } try { //poichè questo punto non appartiene al primo quadrante si verifica l'eccezione e salta al catch let p = new PuntoIQ(10,-30); } catch (eccezione) { console.log(eccezione); } . try-catch . Nota il sistema try-catch. Con tale sistema è possibile tentare l’esecuzione del codice presente nel corpo di try. Se va a buon fine si prosegue altrimenti si esegue il corpo del catch. Per stabilire se il codice presente nel try va o meno a buon fine si utilizza la keyword throw. Nella classe PuntoIQ infatti se i dati passati al costruttore sono minori di zero si passa un’eccezione attravero throw, l’eccezione in questo caso è semplicemente la stringa \"Non nel primo quadrante\" che viene passata al catch . try{ //prova ad eseguire il codice. Se il codice presenta un'eccezione salta al catch } catch (eccezione){ //esegui eccezione } . Riprendiamo con il concetto di get/set . //punto appartenente al primo quadrante class PuntoIQ { constructor(x,y) { if (x&lt;0 || y&lt;0){ throw \"Non nel primo quadrante\"; } //Per accedere a questa proprietà devo usare \"_x\", //è di fatto un sistema di costrizione dell'utilizzatore della classe a NON usare questa property this._x = x; //Per accedere a questa proprietà devo usare \"_y\", //è di fatto un sistema di costrizione dell'utilizzatore della classe a NON usare questa property this._y = y; } //Le keyword \"get\" definisce di fatto un metodo che può essere richiamato con la nomenclatura //utilizzata per le proprietà. Posso quindi richiamare il metodo x tramite &lt;punto.x&gt; //get definisce un metodo di lettura quindi posso leggere la property \"x\" //nascondendo la \"vera\" property definita sopra tramite \"_x\" get x() { return this._x; } //Le keyword \"set\" definisce come \"get un metodo che può essere richiamato con la nomenclatura //utilizzata per le proprietà. Posso quindi richiamare il metodo x tramite &lt;punto.x&gt; //get definisce un metodo di scrittura quidni posso scrivere la property \"x\" //nascondendo la \"vera\" property definita sopra \"_x\" set x(valore) { this._x = valore; } } try { var p = new PuntoIQ(10,30); //Ok } catch (eccezione) { console.log(eccezione); } console.log(p); //PuntoIQ {_x: 10, _y: 30} try { p.x = 56; // === p._x = 56 } catch (eccezione) { console.log(eccezione); } console.log(p); //PuntoIQ {_x: 56, _y: 30} try { p._x = 12; // L'utilizzatore della classe sta bypassando il metodo \"ufficiale\" tramite get/set } catch (eccezione) { console.log(eccezione); } console.log(p); //PuntoIQ {_x: 12, _y: 30} . Passare attravero get/set è utile per poter eseguire controlli avanzati e restituire un errore in caso di fallimento. Vediamo di estendere la classe di sopra aggiungendo un controllo in fase di set . //punto appartenente al primo quadrante class PuntoIQ { constructor(x,y) { if (x&lt;0 || y&lt;0){ throw \"Non nel primo quadrante\"; } this._x = x; this._y = y; } get x() { return this._x; } set x(valore) { if ( typeof(valore) === \"boolean\" || isNaN(valore) ){ throw \"Non è un numero\"; } if(valore&lt;0){ throw \"Non nel primo quadrante\"; } this._x = valore; } } try { var p = new PuntoIQ(10,30); //Ok } catch (eccezione) { console.log(eccezione); } console.log(p); //PuntoIQ {_x: 10, _y: 30} try { p.x = \"dodici\"; // === p._x = 56 } catch (eccezione) { console.log(eccezione); } console.log(p); //Non è un numero . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-34.html#get--set",
    "relUrl": "/corsi/javascript/Lezioni/js-34.html#get--set"
  },"191": {
    "doc": "Corso Javascript - 34",
    "title": "Corso Javascript - 34",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-34.html",
    "relUrl": "/corsi/javascript/Lezioni/js-34.html"
  },"192": {
    "doc": "Corso Javascript - 35",
    "title": "Derivazione di classi , ereditarietà",
    "content": "Il meccanismo di derivazione delle classi ovvero la costruzione di una classe figlia a partire da una classe padre aggiungendo una specializzazione è noto anche come meccanismo di ereditarietà e si ottiene semplicemente la keyword extends. Abbiamo già visto come è implementato questo concetto negli oggetti in Javascript. Per quanto riguarda le classi si ricordi che è solo “zucchero sintattico” quindi il meccanismo sotto sarà il medesimo. //punto appartenente al primo quadrante class PuntoIQ { constructor(x,y) { if (x&lt;0 || y&lt;0){ throw \"Non nel primo quadrante\"; } this._x =x; this._y=y; } get x() { return this._x; } set x(valore) { if ( typeof(valore) === \"boolean\" || isNaN(valore) ){ throw \"Non è un numero\"; } if(valore&lt;0){ throw \"Non nel primo quadrante\"; } this._x = valore; } get y() { return this._y; } } class PuntoIQColorato extends PuntoIQ { } . La lasse “PuntoIQColorato” è derivata dalla classe madre PuntoIQ ma accede a a tutte le strutture interne della classe madre. Vediamo di estendere la classe definita sopra con altri metodi: . //punto appartenente al primo quadrante class PuntoIQ { constructor(x,y) { if (x&lt;0 || y&lt;0){ throw \"Non nel primo quadrante\"; } this._x =x; this._y=y; } get x() { return this._x; } set x(valore) { if (typeof(valore) === \"boolean\" || isNaN(valore)){ throw \"Non è un numero\"; } if (valore &lt; 0){ throw \"Non nel primo quadrante\"; } this._x = valore; } get y() { return this._y; } //\"distanza(altro)\", applicato a un oggetto A &lt;PuntoIQ&gt; calcola la distanza tra //l'oggetto a cui si applica il metodo (oggetto A) e un altro oggetto ricevuto come argomento //&lt;altro&gt; che dovrà essere un oggetto della classe &lt;PuntoIQ&gt; distanza(altro){ //\"A instanceof B\" ritorna true se A è un'istanza di B //Viene quindi fatto un controllo per essere sicuri di aver ricevuto un oggetto compatibile if (altro instanceof PuntoIQ){ //formula distanza tra due punti return ( Math.sqrt ( Math.pow(this.x - altro.x, 2) + Math.pow(this.y - altro.y, 2) ) ); } else { throw \"Il parametro attuale `altro` non è un punto\"; } } } class PuntoIQColorato extends PuntoIQ { } let p1 = new PuntoIQ(5,5); let p2 = new PuntoIQ(10,10); cosnole.log(p1.distanza(p2 ) ); //7.07... //un oggetto della classe &lt;PuntoIQColorato&gt; è identico a un oggetto della classe &lt;PuntoIQ&gt; let pc = new PuntoIQColorato(100,100); console.log(\"Punto Colorato: \" + pc.x); //La classe figlia PuntoIQColorato passa il controllo if (altro instanceof PuntoIQ) Poichè è figlia //di PuntoIQ cosnole.log(pc.distanza(p2) ); . Nella prossima lezione aggiungeremo elementi specifici della classe PuntoIQColorato . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-35.html#derivazione-di-classi--ereditariet%C3%A0",
    "relUrl": "/corsi/javascript/Lezioni/js-35.html#derivazione-di-classi--ereditarietà"
  },"193": {
    "doc": "Corso Javascript - 35",
    "title": "Corso Javascript - 35",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-35.html",
    "relUrl": "/corsi/javascript/Lezioni/js-35.html"
  },"194": {
    "doc": "Corso Javascript - 36",
    "title": "Ereditarietà classi Pt 2",
    "content": "In questo esempio vedremo aggiungeremo elementi specifici della classe PuntoIQColorato. Utilizzeremo anche il comando super. Un comando usato nella classe figlia per richiamare il costruttore della classe madre . //punto appartenente al primo quadrante class PuntoIQ { constructor(x,y) { if (x&lt;0 || y&lt;0){ throw \"Non nel primo quadrante\"; } this._x =x; this._y=y; } get x() { return this._x; } set x(valore) { if (typeof(valore) === \"boolean\" || isNaN(valore)){ throw \"Non è un numero\"; } if (valore &lt; 0){ throw \"Non nel primo quadrante\"; } this._x = valore; } get y() { return this._y; } //\"distanza(altro)\", applicato a un oggetto A &lt;PuntoIQ&gt; calcola la distanza tra //l'oggetto a cui si applica il metodo (oggetto A) e un altro oggetto ricevuto come argomento //&lt;altro&gt; che dovrà essere un oggetto della classe &lt;PuntoIQ&gt; distanza(altro){ //\"A instanceof B\" ritorna true se A è un'istanza di B //Viene quindi fatto un controllo per essere sicuri di aver ricevuto un oggetto compatibile if (altro instanceof PuntoIQ){ //formula distanza tra due punti return ( Math.sqrt ( Math.pow(this.x - altro.x, 2) + Math.pow(this.y - altro.y, 2) ) ); } else { throw \"Il parametro attuale `altro` non è un punto\"; } } } class PuntoIQColorato extends PuntoIQ { constructor (x, y, colore){ //super richiama il costruttore della classe madre //super deve essere sempre il primo statemeant super(x, y); this._colore = colore; //Potrei accedere ai dati interni della classe madre PuntoIQ tramite ad esempio //this._x = 999; //E' ASSOLUTAMENTE DA EVITARE PERCHE' BYPASSO TUTTI I CONTROLLI SU \"x\" } get colore (){ return this._colore; } //Shadowing. //Il metodo \"distanza\" definito qua è locale alla classe &lt;PuntoIQColorato&gt; e oscura il metodo ereditato //dalla classe &lt;PuntoIQ&gt; distanza( altro ){ return 1000; } } let p1 = new PuntoIQ(5,5); let p2 = new PuntoIQ(10,10); console.log(p1.distanza(p2 ) ); //7.0... let pc = new PuntoIQColorato(100,100, \"blue\"); console.log(\"Punto Colorato: \" + pc.x, pc.y, pc.colore); //Punto Colorato: 100 100 blue //Poichè il metodo \"distanza\" è applicato a &lt;pc&gt; che è un &lt;PuntoIQColorato&gt; verrà applicato il metodo locale console.log(pc.distanza(p2) ); //1000 . Attenzione: E’ buona norma mettere il comando super come primo comando nel costruttore della classe figlia per poter permettere al costrutto di creare le caratteristiche ereditate correttamente . Metodi locali ed ereditati possono coesistere e collaborare. Con super posso richiamare il metodo della classe madre all’interno della classe figlia . //punto appartenente al primo quadrante class PuntoIQ { constructor(x,y) { if (x&lt;0 || y&lt;0){ throw \"Non nel primo quadrante\"; } this._x =x; this._y=y; } get x() { return this._x; } set x(valore) { if (typeof(valore) === \"boolean\" || isNaN(valore)){ throw \"Non è un numero\"; } if (valore &lt; 0){ throw \"Non nel primo quadrante\"; } this._x = valore; } get y() { return this._y; } //\"distanza(altro)\", applicato a un oggetto A &lt;PuntoIQ&gt; calcola la distanza tra //l'oggetto a cui si applica il metodo (oggetto A) e un altro oggetto ricevuto come argomento //&lt;altro&gt; che dovrà essere un oggetto della classe &lt;PuntoIQ&gt; distanza(altro){ //\"A instanceof B\" ritorna true se A è un'istanza di B //Viene quindi fatto un controllo per essere sicuri di aver ricevuto un oggetto compatibile if (altro instanceof PuntoIQ){ //formula distanza tra due punti return ( Math.sqrt ( Math.pow(this.x - altro.x, 2) + Math.pow(this.y - altro.y, 2) ) ); } else { throw \"Il parametro attuale `altro` non è un punto\"; } } } class PuntoIQColorato extends PuntoIQ { constructor (x, y, colore){ //super deve essere sempre il primo statemeant super(x, y); this._colore = colore; } get colore (){ return this._colore; } //Shadowing. distanza( altro ){ //richiamo il metodo \"distanza\" della classe madre return super.distanza(altro) + 1000; } } let p1 = new PuntoIQ(5,5); let p2 = new PuntoIQ(10,10); console.log(p1.distanza(p2 ) ); //7.0... let pc = new PuntoIQColorato(100,100, \"blue\"); console.log(\"Punto Colorato: \" + pc.x, pc.y, pc.colore); //Punto Colorato: 100 100 blue console.log(pc.distanza(p2) ); //1127.2792206135787 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-36.html#ereditariet%C3%A0-classi-pt-2",
    "relUrl": "/corsi/javascript/Lezioni/js-36.html#ereditarietà-classi-pt-2"
  },"195": {
    "doc": "Corso Javascript - 36",
    "title": "Corso Javascript - 36",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-36.html",
    "relUrl": "/corsi/javascript/Lezioni/js-36.html"
  },"196": {
    "doc": "Corso Javascript - 37",
    "title": "Corso Javascript - 37",
    "content": "Approfondimento - Symbols . Ogni valore symbol restituito da Symbol() è unico. Un valore symbol può essere utilizzato come identificatore per proprietà di un oggetto; questo è lo scopo di tale tipo di dati. Il tipo di dati symbol è un primitive data type. Fonte: https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Symbol . //Il simbolo è un nuovo tipo che permette di creare valori univoci //Nell'esempio creo due variabili di tipo Symbol(). //I loro valori (che non possiamo stampare) saranno sicuramente diversi let un_simbolo = Symbol(); let un_altro_simbolo = Symbol(); //Posso agire per confronti ma non stampare direttamente i simboli console.log(un_simbolo === un_altro_simbolo); //false, sempre console.log(un_simbolo); //ERROR . GUID: Il GUID (Globally Unique Identifier, identificatore unico globale) è un numero pseudo-casuale usato nella programmazione software, per poter distinguere vari oggetti. Il tipo più noto di GUID è l’utilizzo di Microsoft dell’UUID, ideato dalla Open Software Foundation, ma vi sono anche altri usi, come quello all’interno di XML. Fonte: https://it.wikipedia.org/wiki/GUID . Vediamo l’utilizzo di un Symbol come identificatore di una proprietà di un oggetto . let oggetto = { colore: \"giallo\", peso: 21, } //creo un nuovo simbolo let check = Symbol(); //aggiungo la property \"check\" è un valore \"OK\" oggetto[check] = \"OK\"; console.log(oggetto[check]); //OK . La property aggiunta con Symbol è nascosta.. let oggetto = { colore: \"giallo\", peso: 21, scheda: function () { let s = \"\"; //Si traduce in: per ogni property presente in questo oggetto.. //Itera sulle property tranne su \"scheda\" //E le concatena in una stringa s = \"colore peso\" for (x in this){ if (x!==\"scheda\"){ s += x + \" \"; } } return s; } } //Posso assegnare un'etichetta al Symbol let check = Symbol(\"il check\"); oggetto[check] = \"OK\"; console.log(oggetto[check]); //Una property aggiunta con Symbol è nascosta. //Utilizzo il metodo \"scheda\" per stampare tutte le property. //Vedremo che la property \"check\" non apparirà console.log(oggetto.scheda() ); //colore peso //Notare la differenza con la seguente propery aggiunta localmente //check2 è una proprietà locale e visibile oggetto.check2 = \"YES\"; console.log(oggetto.scheda() ); //colore peso check2 . Posso generare un metodo attraverso Symbol . let report = Symbol(); let oggetto2 = { prodotto: \"xyz\", //genero il metodo con il simbolo [report]() {return this.prodotto;} } console.log(oggetto2[report]()); //xyz . Posso aggiungere il metodo a posteriori . let report = Symbol(); let oggetto2 = { prodotto: \"xyz\", [report]() {return this.prodotto;} } //Assegno al metodo un nuovo valore oggetto2[report] = function () { return \"Controllo effettuato!\";} console.log(oggetto2[report]()); //Controllo effettuato! . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-37.html",
    "relUrl": "/corsi/javascript/Lezioni/js-37.html"
  },"197": {
    "doc": "Corso Javascript - 38",
    "title": "Approfondimento - Iterables/Iterator",
    "content": "Un oggetto è un iterator quando sa come accedere agli elementi di una collezione uno per volta, conservando l’informazione sulla sua posizione corrente nella sequenza. In Javascript un iterator è un oggetto che implementa il metodo next() , il quale ritorna l’elemento successivo della sequenza. Questo metodo ritorna un oggetto con due proprietà: done e value. Una volta che è stato creato, un iterator può essere utlizzato esplicitamente chiamando più volte il metodo next(). Fonte: https://developer.mozilla.org/it/docs/Web/JavaScript/Guida/Iteratori_e_generatori . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-38.html#approfondimento---iterablesiterator",
    "relUrl": "/corsi/javascript/Lezioni/js-38.html#approfondimento---iterablesiterator"
  },"198": {
    "doc": "Corso Javascript - 38",
    "title": "Costrutto for - of",
    "content": "Il costrutto for...of crea un ciclo con gli oggetti iterabili (inclusi Array, Map, Set, String, TypedArray, argomenti di oggetti e così via), iterando le istruzioni per ogni valore di ogni proprietà. for (elem of collection) {/*CODE*/}; . Vediamo un esempio: . let s=\"ciao\"; //ciclo tradizionale //for (let i=0; i&lt;s.length; i++) console.log(s[i]); //ciclo che sfrutta un iteratore e il for ... of for (carattere of s) console.log(carattere); . Dietro il meccanismo di un costrutto così potente c’è il concetto di Iterables/Iterator e Symbol. Se un oggetto è iterabile avrà un iteratore. A tale iteratore è applicabile il metodo next() che restituisce l’elemento successivo della lista degli elementi. Tale elemento è un oggetto con due property: done e value. La property done è un boolean che indica se siamo arrivati in fondo alla lista degli elementi iterabili mentre la property value restituisce il valore dell’elemento . let s=\"ciao\"; for (carattere of s) console.log(carattere); let iteratore = s[Symbol.iterator](); cosnole.log(typeof(s[Symbol.iterator]) ); //function cosnole.log(typeof(iteratore) ); //Object. Questo è l'oggetto iteratore //l'iteratore è un oggetto formato da due sotto elementi //done -&gt; restituisce true se è l'ultimo elemento della lista //value -&gt; rappresenta il valore dell'elemento estratto let elemento = iteratore.next(); console.log(elemento.done); //false console.log(elemento.value); //c, la prima lettera di \"ciao\" //Se continuiamo con next(), passo all'elemento successivo.. elemento = iteratore.next(); console.log(elemento.done); //false console.log(elemento.value); //i elemento = iteratore.next(); console.log(elemento.done); //false console.log(elemento.value); //a elemento = iteratore.next(); console.log(elemento.done); //false console.log(elemento.value); //o elemento = iteratore.next(); console.log(elemento.done); //true console.log(elemento.value); //undefined . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-38.html#costrutto-for---of",
    "relUrl": "/corsi/javascript/Lezioni/js-38.html#costrutto-for---of"
  },"199": {
    "doc": "Corso Javascript - 38",
    "title": "Corso Javascript - 38",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-38.html",
    "relUrl": "/corsi/javascript/Lezioni/js-38.html"
  },"200": {
    "doc": "Corso Javascript - 39",
    "title": "Approfondimento - Funzioni Generatrici",
    "content": "I generatori sono funzioni dalle quali è possibile uscire e poi rientrarvi in un secondo momento. Il loro contesto (binding delle variabili) verrà salvato all’uscita per quando vi entrerà successivamente. La chiamata ad un generatore non viene eseguita immediatamente; la funzione ritornerà invece un oggetto iterator. Quando il metodo next() dell’iteratore viene chiamato, il corpo del generatore viene eseguito fino alla prima espressione yield, la quale specifica quale espressione ritornare dall’iteratore oppure, con l’espressione yield, delegare questo valore ad un’altra funzione generatrice. Il metodo next() restituisce un oggetto con proprietà value contenente il valore da restituito all’iteratore ed una proprietà done che contiene un valore di tipo boolean per indicare se il generatore ha restituito l’ultimo valore. Chiamando il metodo next() con un argomento farà riprendere l’esecuzione della funzione generatrice, sostituendo l’istruzione yield in cui l’esecuzione era stata fermata con l’argomento della funzione next(). Fonte: https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Statements/function . function * generatrice() { //la prima volta è in attesa ... //che venga chiamato il metodo next() sull'oggetto restituito let n=10; console.log(n); yield; //genera n+=1; console.log(n); } let obj = generatrice(); //non succede niente. Siamo in attesa di invocare next() obj.next(); //10, si ferma a yield e ritorna ma lo stato dei dati è memorizzato obj.next(); //11 obj.next(); // . Vediamo un esempio più interessante: . function * generatrice() { let n=0; while(true){ n++; console.log(n); yield; } } let obj = generatrice(); obj.next(); //1 obj.next(); //2 obj.next(); //3 . yield è il “ritorno” della funzione generatrice e restituisce un oggetto iterator, un oggetto formato quindi da due property value e done . function * generatrice() { let n=0; while(true){ n++; yield n; } } let obj = generatrice(); console.log(obj.next().value); //1 console.log(obj.next().value); //2 console.log(obj.next().value); //3 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-39.html#approfondimento---funzioni-generatrici",
    "relUrl": "/corsi/javascript/Lezioni/js-39.html#approfondimento---funzioni-generatrici"
  },"201": {
    "doc": "Corso Javascript - 39",
    "title": "Corso Javascript - 39",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-39.html",
    "relUrl": "/corsi/javascript/Lezioni/js-39.html"
  },"202": {
    "doc": "Corso Javascript - 40",
    "title": "Approfondimento - Esempio (For .. of) custom",
    "content": "Dopo l’introduzione di Iterator/Iterables e di funzioni generatrici è possibile costruire per una classe personale un metodo (for..of) personalizzabile . class miaCollezione { //la classe contiene un array constructor () { this.items = []; } //posso aggiungere valori tramite il metodo \"add\" add(value) { this.items.push(value) } //questo definisce un metodo per il for - of * [Symbol.iterator] () { for (let key in this.items) { //Se la lunghezza dell'array è maggiore di 4, restituisce l'array if(this.items[key].length&gt;4 ) yield this.items[key]; } } } let o = new miaCollezione(); o.add(\"rossi\"); o.add(\"Bob\"); o.add(\"Gialli\"); //L'elemento Bob non verrà stampato perchè ha 3 elementi for (x of o) { console.log(x); } /* rossi Gialli */ . Posso aggiungere anche aggiungere una funzione generatrice come metodo per iterare sugli elementi sfruttando il costrutto while e come terminatore del ciclo la property done . class miaCollezione { //la classe contiene in realtà un array constructor () { this.items = []; } //posso aggiungere valori tramite il metodo \"add\" add(value){ this.items.push(value) } //questo definisce un metodo per il for - of * [Symbol.iterator] (){ for (let key in this.items){ //Se la lunghezza dell'array è maggiore di 4, restituisce l'array if(this.items[key].length&gt;4 ) yield this.items[key]; } } *generatrice(){ for (let key in this.items){ yield this.items[key]; } } } let o = new miaCollezione(); o.add(\"rossi\"); o.add(\"Bobyna\"); o.add(\"Gialli\"); let iterator = o.generatrice(); //itero \"a mano\" tramite la funzione mia generatrice. //E' esattamente il (for.. of ) //Nota &lt; (elemento=iterator.next()).done &gt; equivale a: //elemento = iterator.next() //elemento.done while (! (elemento=iterator.next()).done ) cosnole.log(elemento.value ); . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-40.html#approfondimento---esempio-for--of-custom",
    "relUrl": "/corsi/javascript/Lezioni/js-40.html#approfondimento---esempio-for--of-custom"
  },"203": {
    "doc": "Corso Javascript - 40",
    "title": "Corso Javascript - 40",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-40.html",
    "relUrl": "/corsi/javascript/Lezioni/js-40.html"
  },"204": {
    "doc": "Corso Javascript - 41",
    "title": "Corso Javascript - 41",
    "content": "Destructuring . La sintassi di assegnamento di destrutturazione è un’espressione JavaScript che rende possibile estrarre informazioni da array o oggetti in variabili distinte. Le espressioni letterali degli oggetti e degli array forniscono un modo facile per creare ad hoc pacchetti di data. Fonte: https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment . let prodotto = { codice: \"BPX001\", categoria: \"alimentari\", prezzo: 1.25 }; //FORMA ABBREVIATA //i valori delle property \"codice\" e \"prezzo\" sono memorizzate in due variabili di nome \"codice\", \"prezzo\" //il nome delle variabili deve coincidere con il nome della property let {codice, prezzo} = prodotto; /* Equivale a: let codice = prodotto.codice; let prezzo = prodotto.prezzo; */ console.log(`${codice} - ${prezzo}` ); // BPX001 - 1.25 //FORMA ESTESA //E' possibile assegnare un nome alle variabili con l'associazione di un'etichetta let {codice: il_codice, prezzo: il_prezzo} = prodotto; console.log(`${il_codice} - ${il_prezzo}` ); // BPX001 - 1.25 . Il Destructuring funziona con qualsiasi collezione iterabile . //il destructuring funziona con gli array let temperature =[1,3,6,9,8,5,4,-1] let [h00, h3, h6, h9, h12, h15, h18,h21] = temperature; console.log(`Temp. alle h06:00 ${h6}℃; alle h18:00 ${h18}℃`); // Temp. alle h06:00 6℃; alle h18:00 $4℃ . Posso utilizzare il destructuring per il ritorno di variabili multiple in una funzione . function min_max(vettore) { let pos_min=0; let pos_max=0; //immaginiamo qui l`algoritmo che determina le //posizioni dell`elemento minimo e massimo pos_min=3; pos_max=7; return [pos_min, pos_max]; } let temperature =[1,3,6,9,8,5,4,-1] let [h00, h3, h6, h9, h12, h15, h18,h21] = temperature; console.log(`Temp. alle h06:00 ${h6}℃; alle h18:00 ${h18}℃`); //Temp. alle h06:00 6℃; alle h18:00 4℃ //------------------------------------------------------------------------- let [pos_temp_min, pos_temp_max] = min_max(temperature); console.log(`Temperatura minima alle ${3*pos_temp_min}`); //Temperatura minima alle 9 console.log(`Temperatura massima alle ${3*pos_temp_max}`); //Temperatura massima alle 21 . Si può scavare anche dentro oggetti senza esagerare troppo . let libro = { autore: { cognome: \"Alessandro\", nome:\"Manzoni\" }, titolo: \"I promessi sposi\", nato_a: { nome: \"Milano\", nazione:\"Italia\" } }; let { autore: {cognome, nome}, titolo} = libro; console.log(cognome); //Alessandro console.log(nome); //Manzoni console.log(titolo); //I promessi sposi let {titolo: t2} = libro; console.log(t2); ////I promessi sposi let s = \"\"; //questa sintassi è per l'assegnamento ({titolo: s} = libro); . Con gli array questo metodo dell’assegnamento è più semplice . let temperature =[1,3,6,9,8,5,4,-1] let [h00, h3, h6, h9, h12, h15, h18,h21] = temperature; console.log(`Temp. alle h06:00 ${h6}℃; alle h18:00 ${h18}℃`); //------------------------------------------------------------------------- let t=0; [t] = temperature; console.log(t); //1, ottengo la temperatura alla prima posizione //Estraggo il 4 elemento [,,,t] = temperature; //temperature[3] console.log(t); //9 let v = [1,2]; let [,,z=0] = v; console.log(z); //0 // in questo caso con l'operatore \"...\" (rest) creo un sottoarray con le sole temperature dalle 9 in poi let [,,,...dalle_9_in_poi] = temperature for (temp of dalle_9_in_poi) console.log(temp); //9 8 5 4 -1 . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-41.html",
    "relUrl": "/corsi/javascript/Lezioni/js-41.html"
  },"205": {
    "doc": "Corso Javascript - 42",
    "title": "Map Object",
    "content": "L’oggetto Map è una collezione di elementi chiave / valore. Qualsiasi valore (sia oggetti che valori primitivi) può essere utilizzato come chiave o come valore. Qualche metodo applicabile all’oggetto Map: . | set(key, value): Aggiunge un elemento all’oggetto Map specificando la chiave di accesso e il valore | has(key): Ritorna un boolean true/false in base al risultato della ricerca di un elemento con una particolare key. | get(key): Ritorna il valore corrispondente alla chiave key | delete(key): Elimina l’elemento con la chiave key | clear(): Elimina tutto il contenuto dalla mappa | . Proprietà dell’oggetto Map: . | size: Ritorna il numero di elementi in una mappa | . //Creo un nuovo oggeto Map vuoto let capitali = new Map(); //Il metodo set(key, value) aggiunge elementi indicando una coppia chiave valore capitali.set(\"Italia\", \"Roma\"); capitali.set(\"Francia\", \"Parigi\"); console.log(capitali); //Map(2) {\"Italia\" =&gt; \"Roma\", \"Francia\" =&gt; \"Parigi\"} console.log(capitali.size);//2 //Il punto di forza di Map è che posso ricercare certi valori attraverso la Key nazione_richiesta = prompt(\"Quale nazione?\"); //Francia if ( capitali.has(nazione_richiesta) ){ console.log(`La capitale è ${capitali.get(nazione_richiesta)}`); } //La capitale è Parigi else{ console.log(\"Nazione non trovata\"); } capitali.clear(); console.log(capitali); //Map(0) {} . Posso aggiungere diversi elementi con la notazione ad array, anzi direi a Matrice visto che ogni elemento è formato da una coppia chiave/valore . //Fornisco al costruttore di Map() come parametro un oggetto iterabile let capitali = new Map([ [\"Italia\", \"Roma\"], [\"Francia\", \"Parigi\"], [\"Inghilterra\", \"Londra\"] ]); nazione_richiesta = prompt(\"Quale nazione vuoi eliminare?\"); //Se nazione_richiesta è tra quelle specificate nell'oggetto &lt;capitali&gt; la eliminerà if ( capitali.has(nazione_richiesta) ){ capitali.delete(nazione_richiesta); console.log(`${nazione_richiesta} eliminata ...`); } else { console.log(\"Nazione non trovata\"); } . Posso inserire qualsiasi tipo di elemento in un oggetto di tipo Map. //Creo un oggetto di tipo Map e identificativo \"listino\" vuoto let listino = new Map(); //Creo un oggetto che utilizzerò come chiave dell'oggetto listino let prodotto = { codice: 100, descrizione: {breve: \"bla bla\", lunga:\"bla bla bla bla\"} } //Creo un oggetto che utilizzeràìò come valore dell'oggetto listino let prezzo = { costo_base: 145, sconto: 5, metodi_pagamento: {cash: true, carta: true, paypal: false} } //Aggiungo un elemento all'oggetto listino. //Prodotto e prezzo sono due oggetti diversi listino.set( prodotto, prezzo); if ( listino.has(prodotto) ) { valore = listino.get(prodotto); console.log(valore.costo_base); //145 if (valore.metodi_pagamento.carta){ console.log(\"Pagabile con carta di credito\"); //Pagabile con carta di credito } } . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-42.html#map-object",
    "relUrl": "/corsi/javascript/Lezioni/js-42.html#map-object"
  },"206": {
    "doc": "Corso Javascript - 42",
    "title": "Iterazione Map Object",
    "content": "Il metodo key() restituisce un iteratore sulle chiavi . let capitali = new Map([ [\"Italia\", \"Roma\"], [\"Francia\", \"Parigi\"], [\"Inghilterra\", \"Londra\"] ]); //iterare sugli elementi for (let elemento of capitali) { console.log(elemento); } //elemento[0]=nazione, [1]=capitale /* [\"Italia\", \"Roma\"] [\"Francia\", \"Parigi\"] [\"Inghilterra\", \"Londra\"] */ //iterare sulle chiavi //key() restituisce un iteratore sulle chiavi for (let chiave of capitali.keys()) { console.log(chiave); } /* Italia Francia Inghilterra */ . Esempio di iterazione applicando il destructuring: . let listino = new Map(); //Chiave let prodotto = { codice: 100, descrizione: {breve: \"bla bla\", lunga:\"bla bla bla bla\"} } //Valore let prezzo = { costo_base: 145, sconto: 5, metodi_pagamento: {cash: true, carta: true, paypal: false} } listino.set( prodotto, prezzo); //iterare sugli elementi, applico il destructuring for (let [chiave, valore] of listino) //listino.entries()) { console.log(chiave); } //Restituisce prodotto /* {codice: 100, descrizione: {…}} codice: 100 descrizione: {breve: \"bla bla\", lunga: \"bla bla bla bla\"} */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-42.html#iterazione-map-object",
    "relUrl": "/corsi/javascript/Lezioni/js-42.html#iterazione-map-object"
  },"207": {
    "doc": "Corso Javascript - 42",
    "title": "Corso Javascript - 42",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-42.html",
    "relUrl": "/corsi/javascript/Lezioni/js-42.html"
  },"208": {
    "doc": "Corso Javascript - 43",
    "title": "Set",
    "content": "L’oggetto Set permette di memorizzare valori unici di qualunque tipo, che siano valori primitivi o riferimenti ad oggetti. Gli oggetti Set sono collezioni di valori, quindi è possibile iterare i valori nel loro ordine di inserimento. Un valore in un Set può occorrere solo una volta; è quindi unico nella collezione. A differenza di un semplice array presenta le seguenti differenze: . | Un oggetto Set rifiuta elementi duplicati. E’ utile quindi per raggruppare elementi in una lista univoca | Non consente un accesso indicizzato cioè per posizione come negli array | Non si applicano i metodi applicabili agli array ma metodi simili all’oggetto Map | . Vale la property size e i metodi has() e clear(), add() simili per l’oggetto Map . let nazioni = new Set([\"Italia\", \"Francia\", \"Inghilterra\"]); nazioni.add(\"Ungheria\"); //Metodo per aggiungere un elemento //La lista degli elementi rimane inalterata poichè l'elemento &lt;Francia&gt; è già presente nazioni.add(\"Francia\"); for (let nazione of nazioni) {console.log(nazione);} /* Italia Francia Inghilterra Ungheria */ . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-43.html#set",
    "relUrl": "/corsi/javascript/Lezioni/js-43.html#set"
  },"209": {
    "doc": "Corso Javascript - 43",
    "title": "Conversione di un Oggetto Map / Set in un Array",
    "content": "Per la conversione di un Oggetto Map / Set in un array è possibile sfruttare l’operatore “…” (rest). Questo operatore in generale si applica ad ogni elemento iterabile e restituisce un array di elementi derivati dall’iterazione sull’iteratore selezionato . let nazioni = new Set([\"Italia\", \"Francia\", \"Inghilterra\"]); nazioni.add(\"Ungheria\"); //Metodo per aggiungere un elemento //l'operatore \"...\" è anche detto spread operator //In questo caso andrà ad iterare ogni elemento di &lt;nazioni&gt; aggiungendolo all'array &lt;vNazioni&gt; let arrayNazioni = [...nazioni]; //arrayNazioni adesso è un array ottenuto da un oggetto Set console.log(arrayNazioni[2]); . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-43.html#conversione-di-un-oggetto-map--set-in-un-array",
    "relUrl": "/corsi/javascript/Lezioni/js-43.html#conversione-di-un-oggetto-map--set-in-un-array"
  },"210": {
    "doc": "Corso Javascript - 43",
    "title": "Corso Javascript - 43",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-43.html",
    "relUrl": "/corsi/javascript/Lezioni/js-43.html"
  },"211": {
    "doc": "Corso Javascript - 44",
    "title": "Dom Manipulation",
    "content": "Quando programmi pagine web e app, una delle cose più comuni che vorrai fare è manipolare in qualche modo la struttura del documento. Questo di solito viene fatto utilizzando il Document Object Model (DOM), un insieme di API per il controllo dell’HTML e delle informazioni di stile che fa un uso intenso dell’oggetto Document. In questo articolo vedremo come utilizzare il DOM in dettaglio, insieme ad altre API interessanti che possono alterare il tuo ambiente in modi interessanti. I browser web sono software molto complicati con molte parti mobili, molte delle quali non possono essere controllate o manipolate da uno sviluppatore web che utilizza JavaScript. Potresti pensare che tali limitazioni siano una brutta cosa, ma i browser sono bloccati per buone ragioni, principalmente incentrate sulla sicurezza. Immagina se un sito Web potesse accedere alle tue password memorizzate o ad altre informazioni sensibili e accedere ai siti Web come se fossi tu.. Nonostante i limiti, le API Web ci danno ancora accesso a molte funzionalità che ci consentono di fare molte cose con le pagine web. | Window è la scheda del browser in cui viene caricata una pagina web; questo è rappresentato in JavaScript dall’oggetto Window. Usando i metodi disponibili su questo oggetto puoi fare cose come restituire le dimensioni della finestra (vedi Window.innerWidth e Window.innerHeight), manipolare il documento caricato in quella finestra, memorizzare i dati specifici di quel documento sul lato client (ad esempio usando un database locale o un altro meccanismo di archiviazione), collegare un gestore di eventi alla finestra corrente e altro ancora. | Il navigatore rappresenta lo stato e l’identità del browser (ovvero lo user-agent) così come esiste sul web. In JavaScript, questo è rappresentato dall’oggetto Navigator. Puoi utilizzare questo oggetto per recuperare elementi come la lingua preferita dell’utente, un flusso multimediale dalla webcam dell’utente, ecc. | Il documento (rappresentato dal DOM nei browser) è la pagina effettiva caricata nella finestra ed è rappresentato in JavaScript dall’oggetto Document. È possibile utilizzare questo oggetto per restituire e manipolare le informazioni sull’HTML e il CSS che compongono il documento, ad esempio ottenere un riferimento a un elemento nel DOM, modificarne il contenuto del testo, applicarvi nuovi stili, creare nuovi elementi e aggiungerli a l’elemento corrente come figli, o addirittura eliminarlo del tutto. | . In questo articolo ci concentreremo principalmente sulla manipolazione del DOM. DOM - Document Object Model . Il documento attualmente caricato in ciascuna delle schede del browser è rappresentato da un modello di oggetti (document object model). E’ rappresentato tramita una “struttura ad albero” creata dal browser che consente di accedere facilmente alla struttura HTML dai linguaggi di programmazione. Fonte: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents . Per la manipolazione del DOM ci torna utile il paradigma di programmazione orientato agli oggetti di Javascript. Infatti il DOM non è altro che un enorme oggetto con diverse property e metodi . console.log(document.all); //stampa tutti i nodi all'interno della pagina htmlconsole.log(document.body); console.log(document.head); //Stampa l'oggetto &lt;head&gt; console.log(document.body); //Stampa l'oggetto &lt;body&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-44.html#dom-manipulation",
    "relUrl": "/corsi/javascript/Lezioni/js-44.html#dom-manipulation"
  },"212": {
    "doc": "Corso Javascript - 44",
    "title": "Corso Javascript - 44",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-44.html",
    "relUrl": "/corsi/javascript/Lezioni/js-44.html"
  },"213": {
    "doc": "Corso Javascript - 45",
    "title": "DOM - Selettori",
    "content": "Per manipolare un elemento all’interno del DOM, è necessario prima selezionarlo e memorizzare un riferimento ad esso all’interno di una variabile. In questo esempio selezioneremo l’elemento h1 e successivamente applicheremo dello style all’elemento, colorandolo di rosso . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Model&lt;/h1&gt; &lt;script type=\"text/javascript\" src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt; &lt;script&gt; let h1 = document.querySelector(\"h1\"); h1.style.color = 'red'; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-45.html#dom---selettori",
    "relUrl": "/corsi/javascript/Lezioni/js-45.html#dom---selettori"
  },"214": {
    "doc": "Corso Javascript - 45",
    "title": "Metodi di selezione di elementi html",
    "content": "Vediamo i metodi per selezionare gli elementi in JS. | document.getElementById(myID): Selziona tutti gli elementi con un particolare id = “myID” | document.getElementsByClassName(myClassName): Selziona tutti gli elementi che appartengono a una particolare classe, class = “myClassName” | document.getElementsByTagName(\"tag\"): Selziona tutti gli elementi che hanno particolare “tag” HTML | document.querySelector(any): Selziona la prima occorrenza dell’ elemento spcecificato attraverso la classe, l’id oppure il tag. | Selezione attraverso la classe: Si usa il simbolo “.” seguito dal nome della classe, esempio: “.myClassName” | Selezione attraverso l’id: Si usa il simbolo “#” seguito dal nome della classe, esempio: “#myID” | Selezione attraverso il tag HTML: “h1” | . | document.querySelectorAll: Selziona tutti gli elementi spcecificati attraverso la classe, l’id oppure il tag. Valgono le stesse regole di selezione viste per il querySelector | . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;h1&gt;La manipolazione&lt;/h1&gt; &lt;ul&gt; &lt;li id=\"FRIST-ELEM\"&gt;elemento UNO&lt;/li&gt; &lt;li class=\"myClass\"&gt;elemento DUE&lt;/li&gt; &lt;li class=\"myClass\"&gt;elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; document.getElementById(\"FRIST-ELEM\"); //Selezione di \"elemento UNO\" document.getElementsByClassName(\"myClass\"); //Selezione di \"elemento DUE\", \"elemento TRE\" document.getElementsByClassName(\"myClass\")[0]; //Selezione di \"elemento DUE\" document.getElementsByTagName(\"h1\"); //Selezione di \"DOM: Document Object Manipulation\", \"La manipolazione\" // document.querySelector document.querySelector(\".myClass\"); //Selezione di \"elemento DUE\" document.querySelector(\"#FRIST-ELEM\"); //Selezione di \"elemento UNO\" document.querySelector(\"h1\"); //Selezione di \"DOM: Document Object Manipulation\" // document.querySelectorAll document.querySelectorAll(\".myClass\"); //Selezione di \"elemento DUE\", \"elemento TRE\" document.querySelectorAll(\"#FRIST-ELEM\"); //Selezione di \"elemento UNO\" document.querySelectorAll(\"h1\"); ////Selezione di \"DOM: Document Object Manipulation\", \"La manipolazione\" //last-child &amp; nth-child(i) document.querySelector('li:last-child'); //li:last-child seleziona l'ultimo elemento &lt;li&gt; document.querySelector('li:nth-child(2)').style.color = 'brown'; //li:nth-child(i) seleziona l'i-esimo elemento &lt;li&gt; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . E’ possibile utilizzare l’operatore [index] per indicizzare la collezione di elementi HTML selezionati. Nell’esempio di sopra infatti ho selezionato soltanto “elemento DUE” utilizzando document.getElementsByClassName(\"myClass\")[0]. Quando ci sono più elementi selezionati vengono create delle collezioni di oggetti. Nel caso si utilizzi querySelectorAll verrà restituita una collezione NodeList che dal punto di vista di Javascript è un array. Se tuttavia utilizzassi come selettore ad esempio getElementsByTagName verrebbe restituito un HTML Collection che non è un array e se volessi usarlo come tale sarebbe necessaria una conversione . let myLI = document.querySelectorAll(\"li\")[0]; /* myLI &lt;li id=​\"FRIST-ELEM\"&gt;​…​&lt;/li&gt;​ */ console.log(typeof myLI); //object //NODE LIST let myLIAll = document.querySelectorAll(\"li\"); console.log(myLIAll); //è una collezione \"NodeList\", un array /* NodeList(3) [li#FRIST-ELEM, li.myClass, li.myClass] 0: li#FRIST-ELEM 1: li.myClass 2: li.myClass length: 3 __proto__: NodeList */ //Essendo un array posso applicare tutti i metodi applicabili agli array myLIAll.forEach((elem, index) =&gt; { //il metodo \"textContent\" assegna un valore testuale all'elemento, cambia il testo elem.textContent = 'nuovo testo in li'; }); //HTML COLLECTION let MyH1All = document.getElementsByTagName(\"h1\"); console.log(MyH1All); //HTMLCollection(2) [h1, h1] -&gt; NON E' UN ARRAY, Attenzione!! //Posso convertirlo in array utilizzando \"Array.from\" const listaArray = Array.from(MyH1All); console.log(listaArray); /* (2) [h1, h1] 0: h1 1: h1 length: 2 */ //A questo punto posso utilizzare tutte le proprietà degli array listaArray.forEach((elem, index) =&gt; { elem.style.color = 'red'; }); //Posso usare anche un ciclo iterativo standard for (let i = 0; i &lt; listaArray.length; i+=2) { //Cambia il colore del background dell'elemento &lt;h1&gt; in giallo listaArray[i].style.background = 'yellow'; } . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-45.html#metodi-di-selezione-di-elementi-html",
    "relUrl": "/corsi/javascript/Lezioni/js-45.html#metodi-di-selezione-di-elementi-html"
  },"215": {
    "doc": "Corso Javascript - 45",
    "title": "Corso Javascript - 45",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-45.html",
    "relUrl": "/corsi/javascript/Lezioni/js-45.html"
  },"216": {
    "doc": "Corso Javascript - 46",
    "title": "Dom - Child e Parent",
    "content": "Data la struttura ad albero del DOM è semplificato l’accesso ad elementi figli o padri di un dato elemento . | children: Accede agli elementi figli | parentElement: Accede all’elemento padre | . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;h1&gt;La manipolazione&lt;/h1&gt; &lt;ul&gt; &lt;li id=\"FRIST-ELEM\"&gt;elemento UNO&lt;/li&gt; &lt;li class=\"myClass\"&gt;elemento DUE&lt;/li&gt; &lt;li class=\"myClass\"&gt;elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; const ul = document.querySelector('ul'); //rappresenta tutti gli &lt;li&gt; contenuti come HTML collection console.log(ul.children); //HTMLCollection(3) [li#FRIST-ELEM, li.myClass, li.myClass, FRIST-ELEM: li#FRIST-ELEM] console.log(ul.parentElement); //Seleziona l'elemento parente quindi il &lt;body&gt; console.log(ul.parentElement.parentElement); //Seleziona l'elemento &lt;html&gt; cioè il \"nonno\" //Rappresenta i figli in una NodeList (ottimo) ma considera come elementi anche eventuali elementi di formatazione //Poichè gli &lt;li&gt; sono rappresentati a capo, uno sotto l'altro ci sono altri 4 elementi che rappresentano l'elemento \"a capo\" console.log(ul.childNodes); //NodeList(7) [text, li#FRIST-ELEM, text, li.myClass, text, li.myClass, text] &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-46.html#dom---child-e-parent",
    "relUrl": "/corsi/javascript/Lezioni/js-46.html#dom---child-e-parent"
  },"217": {
    "doc": "Corso Javascript - 46",
    "title": "DOM - Manipolazione dello stile degli elementi html",
    "content": "La manipolazione statica dello stile degli elementi HTML non ha molto senso. Infatti è possibile assegnare uno stile già con CSS. Ha invece senso una manipolazione dinamica ovvero al verificarsi di un particolare evento . classList permette di applicare dinamicamente una classe già definita in formato CSS ma ancora non applicata a nessun elemento. Javascript funziona da ponte tra un elemento HTML e uno style CSS. E’ infatti possibile aggiungere e rimuovere dinamicamente una classe da un elemento per aggiungere o rimuovere dello stile da quel dato elemento. | classList.add(\"myClassName\"): Aggiunge la classe myClassName all’elemento selezionato | classList.remove(\"myClassName\"): Rimuove la classe myClassName all’elemento selezionato | classList.toggle(\"myClassName\"): Esegue il toggle della classe myClassName all’elemento selezionato, aggiungendola se non è attiva e rimuovendola se è attiva. | . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeFirstLi { border: 3px solid red; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;h1&gt;La manipolazione&lt;/h1&gt; &lt;ul&gt; &lt;li id=\"FRIST-ELEM\"&gt;elemento UNO&lt;/li&gt; &lt;li class=\"myClass\"&gt;elemento DUE&lt;/li&gt; &lt;li class=\"myClass\"&gt;elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; var tag = document.getElementById(\"FRIST-ELEM\"); //Aggiungo la classe &lt;classeFirstLi&gt; all'elemento html associato a &lt;tag&gt;. //Aggiungo quindi anche tutte le proprità annesse alla classe &lt;classeFirstLi&gt;. tag.classList.add(\"classeFirstLi\"); //Applico lo stile all'elemento \"elemento UNO\" //Rimuovo la classe &lt;classeFirstLi&gt; tag.classList.remove(\"classeFirstLi\");//Rimuovo lo stile all'elemento \"elemento UNO\" //Toggle della classe &lt;classeFirstLi&gt;. // Rimuovo la classe &lt;classeFirstLi&gt; se è attiva, la aggiungo se non è attiva tag.classList.toggle(\"classeFirstLi\");//Applico lo stile all'elemento \"elemento UNO\" tag.classList.toggle(\"classeFirstLi\");//Rimuovo lo stile all'elemento \"elemento UNO\" tag.classList.toggle(\"classeFirstLi\");//Applico lo stile all'elemento \"elemento UNO\" &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-46.html#dom---manipolazione-dello-stile-degli-elementi-html",
    "relUrl": "/corsi/javascript/Lezioni/js-46.html#dom---manipolazione-dello-stile-degli-elementi-html"
  },"218": {
    "doc": "Corso Javascript - 46",
    "title": "Corso Javascript - 46",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-46.html",
    "relUrl": "/corsi/javascript/Lezioni/js-46.html"
  },"219": {
    "doc": "Corso Javascript - 47",
    "title": "DOM - Manipolazione del testo degli elementi html",
    "content": "textContent La proprietà textContent dell’interfaccia Node rappresenta il contenuto del testo di un nodo e dei suoi discendenti . innerText La proprietà innerText dell’interfaccia HTMLElement rappresenta il contenuto di testo “renderizzato” di un nodo e dei suoi discendenti. Come getter, approssima il testo che l’utente otterrebbe se evidenziasse il contenuto dell’elemento con il cursore e poi lo copiasse negli appunti. Nota: innerText è facilmente confuso con Node.textContent, ma ci sono differenze importanti tra i due. Fondamentalmente, innerText è a conoscenza dell’aspetto renderizzato del testo, mentre textContent non lo è. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeFirstLi { border: 3px solid red; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;p&gt;Lorem ipsum, dolor sit amet consectetur adipisicing elit. &lt;strong&gt;Doloremque, modi?&lt;/strong&gt;&lt;/p&gt; &lt;script&gt; var p = document.querySelector(\"p\"); //&lt;textContent&gt; //&lt;textContent&gt; restituisce una stringa del testo contenuto dell'elemento // convertendo anche il contenuto di eventuali elementi figli in puro testo console.log(p.textContent); //\"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Doloremque, modi?\" //E' possibile cambiare la stringa del tag selezionato semplicemente con l'assegnazione p.textContent = \"lorem ps htigh manulip ase travit\"; console.log(p.textContent); //\"lorem ps htigh manulip ase travit\" //&lt;innerHTML&gt; //&lt;innerHTML&gt; restituisce l'elemento HTML mantenendo la formattazione HTML console.log(p.innerHTML); //\"Lorem ipsum, dolor sit amet consectetur adipisicing elit. &lt;strong&gt;Doloremque, modi?&lt;/strong&gt;\" //Con &lt;innerHTML&gt; è possibile inserire tag HTML p.innerHTML = \"&lt;strong&gt;ciao&lt;/strong&gt;\"; console.log(p.innerHTML); //&lt;strong&gt;ciao&lt;/strong&gt;\" &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-47.html#dom---manipolazione-del-testo-degli-elementi-html",
    "relUrl": "/corsi/javascript/Lezioni/js-47.html#dom---manipolazione-del-testo-degli-elementi-html"
  },"220": {
    "doc": "Corso Javascript - 47",
    "title": "DOM - Manipolazione degli attributi html",
    "content": "getAttribute e setAttribute sono metodi di lettura e scrittura di attributi di elementi html. getAttribute(\"attribute\"); //ritorna il valore dell'attributo \"attribute\" setAttribute(\"attribute\", \"value\"); //Assegna il valore \"value\" all'attributo \"attribute\" . Nell’esempio seguente cambierò l’immagine di un elemento &lt;img&gt; e il link di un elemento &lt;a&gt; . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeFirstLi { border: 3px solid red; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;div&gt; &lt;img src=\"https://www.corriere.it/methode_image/2020/04/09/Spettacoli/Foto%20Spettacoli%20-%20Trattate/MILANO_20100328_CORSERA_43_0_0-k9PF-U3180411917161aAH-656x492@Corriere-Web-Sezioni.jpg\"&gt; &lt;/div&gt; &lt;div&gt; &lt;a href=\"https://www.google.com/maps\"&gt;link&lt;/a&gt; &lt;/div&gt; &lt;script&gt; //Modifico l'immagine modificandone l'attributo &lt;src&gt; //Seleziono l'elemento \"img\" var img = document.querySelector(\"img\"); //&lt;getAttribute(\"attribute\")&gt; restituisce il valore dell'attributo passato come argomento. img.getAttribute(\"src\");// \"https://www.corriere.it/methode_image/2020/04/09/Spettacoli/Foto%20Spettacoli%20-%20Trattate/MILANO_20100328_CORSERA_43_0_0-k9PF-U3180411917161aAH-656x492@Corriere-Web-Sezioni.jpg\" //&lt;setAttribute(\"attribute\", \"value\")&gt; consente di cambiare il valore di un attributo img.setAttribute(\"src\", \"https://www.pensalibero.it/wp-content/uploads/2010/02/chopin1.jpg\"); //ho cambiato l'immagine img.getAttribute(\"src\");//https://www.pensalibero.it/wp-content/uploads/2010/02/chopin1.jpg //Modifico il link, modificandone l'attributo &lt;href&gt; //Seleziono l'elemento \"a\" var a = document.querySelector(\"a\"); //&lt;getAttribute(\"attribute\")&gt; restituisce il valore dell'attributo passato come argomento. a.getAttribute(\"href\");//\"https://www.google.com/maps\" //&lt;setAttribute(\"attribute\", \"value\")&gt; consente di cambiare il valore di un attributo a.setAttribute(\"href\", \"https://mail.google.com\");//Ho cambiato il link a.getAttribute(\"href\");//\"https://mail.google.com\" &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-47.html#dom---manipolazione-degli-attributi-html",
    "relUrl": "/corsi/javascript/Lezioni/js-47.html#dom---manipolazione-degli-attributi-html"
  },"221": {
    "doc": "Corso Javascript - 47",
    "title": "Corso Javascript - 47",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-47.html",
    "relUrl": "/corsi/javascript/Lezioni/js-47.html"
  },"222": {
    "doc": "Corso Javascript - 48",
    "title": "DOM - Creazione di Un elemento",
    "content": "In un documento HTML, il metodo document.createElement() crea l’elemento HTML specificato da tagName o un HTMLUnknownElement se tagName non viene riconosciuto. Nell’esempio successivo creeremo un elemento &lt;li&gt; e lo piazzeremo in coda ad una &lt;ul&gt; già esistente. Faremo uso anche del metodo appendChild() e del metodo createTextNode() . Il metodo Node.appendChild() aggiunge un nodo alla fine dell’elenco di figli di un nodo genitore specificato. Se il figlio dato è un riferimento a un nodo esistente nel documento, appendChild() lo sposta dalla sua posizione corrente alla nuova posizione (non è necessario rimuovere il nodo dal suo nodo padre prima di aggiungerlo ad un altro nodo). A questo link c’è un’importante discussione tra l’uso di createTextNode() e textContent: https://stackoverflow.com/questions/31643204/textnode-or-textcontent . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLastLi { border: 3px solid red; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; //creo un elemento &lt;li&gt; vuoto const myLi = document.createElement('li'); console.log(myLi); //&lt;li&gt;&lt;/li&gt; //Inserisco del testo nell'elemento &lt;li&gt; myLi.textContent = 'Elemento QUATTRO'; console.log(myLi); //&lt;li&gt;&lt;Elemento QUATTRO/li&gt; //Aggiungo in coda l'elemento &lt;li&gt; a &lt;ul&gt; document.querySelector('ul').appendChild(myLi); //Aggiungo una classe.. e lo stile annesso myLi.className = \"classeLastLi\"; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-48.html#dom---creazione-di-un-elemento",
    "relUrl": "/corsi/javascript/Lezioni/js-48.html#dom---creazione-di-un-elemento"
  },"223": {
    "doc": "Corso Javascript - 48",
    "title": "DOM - Rimpiazzo di un elemento",
    "content": "Il metodo Node.replaceChild () sostituisce un nodo figlio all’interno del nodo (genitore) specificato. Notare l’ordine degli argomenti idiosincratico (nuovo prima del vecchio). ChildNode.replaceWith () potrebbe essere più facile da leggere e utilizzare. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLastLi { border: 3px solid red; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; //Creo un nuovo &lt;li&gt; const nuovoLi = document.createElement('li'); //Aggiungo del testo dentro &lt;li&gt; nuovoLi.appendChild(document.createTextNode('nuovo li')); // equivale a \"nuovoLi.textContent = 'nuovo li';\" //Seleziono l'elemento che voglio rimpiazzare const vecchioLi = document.getElementsByTagName('li')[1]; //Selziono l'elemento padre dell'elemento che voglio rimpiazzare */ const ul = document.querySelector('ul'); //replaceChild(new,old) permette di rimpiazzare un elemento figlio //specificando come parametri il nuovo elemento e il vecchio elemento (quello da rimpiazzare) ul.replaceChild(nuovoLi, vecchioLi); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-48.html#dom---rimpiazzo-di-un-elemento",
    "relUrl": "/corsi/javascript/Lezioni/js-48.html#dom---rimpiazzo-di-un-elemento"
  },"224": {
    "doc": "Corso Javascript - 48",
    "title": "DOM - ELiminazione di un elemento",
    "content": "Il metodo Node.removeChild () rimuove un nodo figlio dal DOM e restituisce il nodo rimosso. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLastLi { border: 3px solid red; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; /** Si possono cancellare i figli attraverso il padre */ /** Seleziono il padre */ const ulParent = document.querySelector('ul'); /** Seleziono tutti gli &lt;li&gt; e li metto in un contenitore che sarà un array di &lt;li&gt; */ const listitem = document.querySelectorAll('li'); console.log(listitem); ulParent.removeChild(listitem[2]); //rimuovo \"Elemento TRE\" //Rimuove tutti gli elementi &lt;child&gt; //La property &lt;firstChild&gt; restituisce il primo elemento \"child\" e \"null\" se non ci sono elementi child while (ulParent.firstElementChild){ ulParent.removeChild(ulParent.firstElementChild); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Property firstChild: La proprietà di sola lettura Node.firstChild restituisce il primo figlio del nodo nell’albero o null se il nodo non ha figli. Se il nodo è un documento, restituisce il primo nodo nell’elenco dei suoi figli diretti. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-48.html#dom---eliminazione-di-un-elemento",
    "relUrl": "/corsi/javascript/Lezioni/js-48.html#dom---eliminazione-di-un-elemento"
  },"225": {
    "doc": "Corso Javascript - 48",
    "title": "Corso Javascript - 48",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-48.html",
    "relUrl": "/corsi/javascript/Lezioni/js-48.html"
  },"226": {
    "doc": "Corso Javascript - 49",
    "title": "DOM Events",
    "content": "Vengono trasmessi eventi per notificare al codice eventi accaduti. Ogni evento è rappresentato da un oggetto basato su un ‘interfaccia Event e può avere campi e / o funzioni personalizzati aggiuntivi utilizzati per ottenere ulteriori informazioni su quanto accaduto. Gli eventi possono rappresentare qualsiasi cosa, dalle interazioni utente di base alle notifiche automatiche di eventi che accadono nel modello di rendering. Alla pagina: https://developer.mozilla.org/en-US/docs/Web/Events . E’ possibile consultare i cosìdetti Standard Events, eventi comuni ad ogni tipo di browser definiti dalla specifica standard Web. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-49.html#dom-events",
    "relUrl": "/corsi/javascript/Lezioni/js-49.html#dom-events"
  },"227": {
    "doc": "Corso Javascript - 49",
    "title": "Metodo addEventListener",
    "content": "Il metodo EventTarget addEventListener() imposta una funzione che verrà chiamata ogni volta che l’evento specificato viene consegnato all’elemento di destinazione. I target comuni sono Element, Document, e Window, ma la destinazione può essere qualsiasi oggetto che supporti eventi (come XMLHttpRequest). addEventListener() funziona aggiungendo una funzione o un oggetto che implementa EventListener all’elenco di listener di eventi per il tipo di evento specificato sul EventTarget sul quale è chiamato. target.addEventListener(type, listener[, options]); . Parametri: . | type: Una stringa sensibile al maiuscolo/minuscolo che rappresenta il tipo di evento da assegnare. Alcuni tipi di eventi, click, dblclick, cut, scroll, compositionstart, blur .. | listener: L’oggetto che riceve una notifica (un oggetto che implementa l’interfaccia Event) quando si verifica un evento del tipo specificato. Questo deve essere un oggetto che implementa l’interfaccia EventListener, o una funzione. Vedi Il callback del listener di eventi per i dettagli sul callback stesso. | . Fonte: https://developer.mozilla.org/it/docs/Web/API/Element/addEventListener#Il_callback_del_listener_di_eventi . Vedremo qualche evento attraverso gli esempi: . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLi { color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;input id=\"changeColor\" type=\"button\" value=\"OK\"&gt; &lt;script&gt; var input = document.querySelector(\"#changeColor\"); //Seleziono il primo &lt;li&gt; var ulChild = document.querySelector(\"ul\").firstElementChild; //addEventListener(\"eventType\", function) //aggiunge un evento all'elemento &lt;input&gt;. //Al click del mouse sull'elemento &lt;input&gt; viene eseguita la funzione anonima //che in questo caso esegue il toggle della classe \"classeLi\" sul primo elemento &lt;li&gt; input.addEventListener(\"click\", function(){ ulChild.classList.toggle(\"classeLi\"); }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Vediamo un esempio più interessante. In questo esempio assegneremo lo stile agli elementi &lt;li&gt; ogni volta che schiacceremo il tasto OK a partire dal primo elemento. Una volta che lo stile è applicato a tutti gli elementi, schiacciando nuovamente il tasto andremo a togliere lo stile a tutti gli elementi partendo dal primo. Per applicare e togliere stile utilizzeremo classList.toggle(\"myClassName) già visto qualche lezione fa. Utilizzeremo anche firstElementChild già visto e nextElementSibling che restituisce l’elemento successivo a quello attualmente puntato dal figlio. nextElementSibling La proprietà di sola lettura NonDocumentTypeChildNode.nextElementSibling restituisce l’elemento immediatamente successivo a quello specificato nell’elenco dei figli del suo genitore o null se l’elemento specificato è l’ultimo nell’elenco. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLastLi { color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;input id=\"changeColor\" type=\"button\" value=\"OK\"&gt; &lt;script&gt; var input = document.querySelector(\"#changeColor\"); var ulChild = document.querySelector(\"ul\").firstElementChild; input.addEventListener(\"click\", function(){ if (ulChild !== null){ ulChild.classList.toggle(\"classeLastLi\"); ulChild=ulChild.nextElementSibling; } else{ ulChild = document.querySelector(\"ul\").firstElementChild; ulChild.classList.toggle(\"classeLastLi\"); ulChild=ulChild.nextElementSibling; } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Non è necessario schiacciare elementi &lt;input type=\"button\"&gt;. Possono essere utilizzati tutti gli elementi html. In questo esempio associeremo un evento ad ogni elemento &lt;li&gt; . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLastLi { color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;input id=\"changeColor\" type=\"button\" value=\"OK\"&gt; &lt;script&gt; //Seleziono tutti i &lt;li&gt; var listaLi = document.querySelectorAll(\"li\"); console.log(listaLi); //creo un array di &lt;li&gt; //Itero su ogni &lt;li&gt; for (var i = 0; i &lt; listaLi.length; i++){ //aggiungo un evento ad ogni li. Premendo sull'elemento &lt;li&gt; si applicherà/toglierà lo style definito da \"classeLastLi\" listaLi[i].addEventListener(\"click\", function(){ this.classList.toggle(\"classeLastLi\"); }) } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . this: this in questo caso rappresenta l’elemento i-esimo a cui è posizionato il listener cioè listaLi[i]. Oltre alla funzione anonima, posso definire anche una funzione esterna al verificarsi di un certo evento. In questo esempio cambieremo il testo al Titolo con un testo inserito dall’utente in una casella testuale . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLastLi { color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;input type=\"text\" id=\"newTitle\"&gt; &lt;input id=\"changeTitle\" type=\"button\" value=\"Cambia Titolo\"&gt; &lt;script&gt; var input = document.querySelector(\"#changeTitle\"); var h1 = document.querySelector(\"h1\"); function changeTitle() { testo = document.querySelector(\"#newTitle\"); h1.textContent = testo.value; } input.addEventListener(\"click\", changeTitle); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Nel prossimo esempio avremo una casella di testo in cui sarà possibile inserire del testo. Facendo doppio click su un elemento qualsiasi della pagina html andrà a cambiare il testo dell’elemento cliccato . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .classeLastLi { color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Elemento UNO&lt;/li&gt; &lt;li&gt;Elemento DUE&lt;/li&gt; &lt;li&gt;Elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;input type=\"text\" id=\"newTitle\"&gt; &lt;script&gt; var listaLI = document.querySelectorAll(\"li\"); //crea un array di &lt;li&gt; var h1 = document.querySelector(\"h1\"); //seleziono &lt;h1&gt; function changeText() { testo = document.querySelector(\"#newTitle\"); this.textContent = testo.value; this.cla } for (let i=0; i&lt;listaLI.length; i++){ listaLI[i].addEventListener(\"dblclick\", changeText); } h1.addEventListener(\"dblclick\", changeText); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-49.html#metodo-addeventlistener",
    "relUrl": "/corsi/javascript/Lezioni/js-49.html#metodo-addeventlistener"
  },"228": {
    "doc": "Corso Javascript - 49",
    "title": "Corso Javascript - 49",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-49.html",
    "relUrl": "/corsi/javascript/Lezioni/js-49.html"
  },"229": {
    "doc": "Corso Javascript - 50",
    "title": "Prevent Default",
    "content": "Il metodo preventDefault () dell’interfaccia Event dice al programma utente che se l’evento non viene gestito esplicitamente, la sua azione predefinita non dovrebbe essere eseguita come sarebbe normalmente. L’evento continua a propagarsi come al solito, a meno che uno dei suoi listener di eventi non chiami stopPropagation () o stopImmediatePropagation (), entrambi i quali terminano immediatamente la propagazione. Fonte: https://developer.mozilla.org/it/docs/Web/API/Event/preventDefault . Consideriamo il seguente esempio. Al click di ogni link vorrei che venisse stampato per esteso il link nella casella testuale. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; li { margin: 2px; } input { margin: 2px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"https://www.youtube.com/\"&gt;youtube&lt;/a&gt;&lt;br&gt; &lt;input type=\"text\"&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"https://developer.mozilla.org/en-US/\"&gt;MDN&lt;/a&gt;&lt;br&gt; &lt;input type=\"text\"&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"https://www.google.com/maps\"&gt;maps&lt;/a&gt;&lt;br&gt; &lt;input type=\"text\"&gt; &lt;/li&gt; &lt;/ul&gt; &lt;script&gt; var linkList = document.querySelectorAll(\"a\"); for (let i = 0; i &lt; linkList.length; i++) { linkList[i].addEventListener(\"click\", function(){ //this rappresenta l'elemento &lt;a&gt; i-esimo //this.parentElement === &lt;li&gt; //this.parentElement.lastElementChild === &lt;input&gt; input = this.parentElement.lastElementChild; input.value = this.href; }); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Se avete provato ad eseguire il codice noterete che al click sull’elemento &lt;a&gt;, la pagina verrà rendirizzata sul link corrispondente, in poche parole non funziona. Questo accade perchè il comportamento di default di &lt;a&gt; tag è quello di saltare alla pagina specificata dall’attributo href. Per inibire il comportamento di default di qualsiasi elemento si utilizza il metodo prevenDefault() applicato all’oggetto ricevuto come parametro (opzionale) dal listener. Normalmente questo oggetto viene indicato con e. Qui sotto riporto l’esempio funzionante. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; li { margin: 2px; } input { margin: 2px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"https://www.youtube.com/\"&gt;youtube&lt;/a&gt;&lt;br&gt; &lt;input type=\"text\"&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"https://developer.mozilla.org/en-US/\"&gt;MDN&lt;/a&gt;&lt;br&gt; &lt;input type=\"text\"&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"https://www.google.com/maps\"&gt;maps&lt;/a&gt;&lt;br&gt; &lt;input type=\"text\"&gt; &lt;/li&gt; &lt;/ul&gt; &lt;script&gt; var linkList = document.querySelectorAll(\"a\"); for (let i = 0; i &lt; linkList.length; i++) { linkList[i].addEventListener(\"click\", function(e){ //this rappresenta l'elemento &lt;a&gt; i-esimo //this.parentElement === &lt;li&gt; //this.parentElement.lastElementChild === &lt;input&gt; input = this.parentElement.lastElementChild; input.value = this.href; e.preventDefault(); }); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Che cos’è esattamente l’oggetto ricevuto come unico parametro “e”? . L’interfaccia Event (oggetto “e”) I gestori degli eventi possono essere assegnati a vari elementi DOM. Quando un dato evento si verifica, un oggetto evento viene creato dinamicamente e passato agli event listener che permettono di gestirlo. L’interfaccia Event del DOM è quindi accessibile dalla funzione che gestisce l’evento, alla quale viene passato un oggetto evento come primo e unico argomento (e). Fonte: https://developer.mozilla.org/en-US/docs/Web/API/Event . //.. console.log(e); /** MouseEvent {isTrusted: true, screenX: 196, screenY: 208, clientX: 196, clientY: 105, …} altKey: falsebubbles: truebutton: 0buttons: 0cancelBubble: falsecancelable: trueclientX: 196clientY: 105composed: truectrlKey: falsecurrentTarget: nulldefaultPrevented: falsedetail: 1eventPhase: 0fromElement: nullisTrusted: truelayerX: 196layerY: 105metaKey: falsemovementX: 0movementY: 0offsetX: 149offsetY: 12pageX: 196pageY: 105path: (8) [a, li#ciao.myClass, ul, div, body, html, document, Window]relatedTarget: nullreturnValue: truescreenX: 196screenY: 208shiftKey: falsesourceCapabilities: InputDeviceCapabilities {firesTouchEvents: false}srcElement: atarget: atimeStamp: 125025.42499999981toElement: atype: \"click\"view: Window {window: Window, self: Window, document: document, name: \"\", location: Location, …}which: 1x: 196y: 105__proto__: MouseEvent */ . L’oggetto “Event” fornisce un sacco di informazioni sulla natura dell’evento scatenato. Al sito: https://developer.mozilla.org/it/docs/Web/API/Event è possibile visionare ogni proprietà e ogni metodo dell’oggetto Event (e) . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-50.html#prevent-default",
    "relUrl": "/corsi/javascript/Lezioni/js-50.html#prevent-default"
  },"230": {
    "doc": "Corso Javascript - 50",
    "title": "Corso Javascript - 50",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-50.html",
    "relUrl": "/corsi/javascript/Lezioni/js-50.html"
  },"231": {
    "doc": "Corso Javascript - 51",
    "title": "Approfondimento type event",
    "content": "Vediamo adesso un’insieme di eventi typeEvent mouse/tastiera tra i più usati. Ricordo che typeEvent è il primo parametro del metodo addEventListener() La lista completa la troviamo al link: https://developer.mozilla.org/it/docs/Web/API/Element . HTMLelement.addEventListener('typeEvent', function(){ //code }); . Eventi mouse . | mousedown: Scatta l’evento al click del mouse sull’elemento | mouseup: Scatta l’evento al rilascio del click del mouse sull’elemento | mouseover: Scatta l’evento passando sopra l’elemento con il mouse | mouseout: Scatta l’evento non appena esco dal campo dall’elemento con il mouse | mousemove: Scatta l’evento ogni volta che mi muovo all’interno dell’elemento con il mouse | . Nell’esempio successivo, utilizzerò gli eventi mousemove, mouseout e le proprietà offsetX, offsetY dell’oggetto Event passato come argomento al listener utilizzate per restituire la posizione X/Y dell’evento scatenato. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .colorRed{ color: red; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;div&gt; &lt;textarea id=\"textAreaEvent\" cols=\"60\" rows=\"30\"&gt;Muovi il mouse all'interno di quest'area&lt;/textarea&gt; &lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Pos-x:&lt;/td&gt; &lt;td&gt;&lt;input id=\"pos-X\" type=\"text\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Pos-y:&lt;/td&gt; &lt;td&gt;&lt;input id=\"pos-Y\" type=\"text\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; var textAreaEvent = document.querySelector(\"#textAreaEvent\"); var posX = document.querySelector(\"#pos-X\"); var posY = document.querySelector(\"#pos-Y\"); textAreaEvent.addEventListener(\"mousemove\", function(e){ posX.value = e.offsetX; posY.value = e.offsetY; posX.classList.remove(\"colorRed\") posY.classList.remove(\"colorRed\") }) textAreaEvent.addEventListener(\"mouseout\", function () { posX.classList.add(\"colorRed\") posY.classList.add(\"colorRed\") }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Finchè il mouse si muove all’interno della textarea scatterà l’evento mousemove che restituirà posizione X/Y del mouse. Non appena si esce da textarea scatterà l’evento mouseout colorando di rosso il valore della posizione X/Y. ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-51.html#approfondimento-type-event",
    "relUrl": "/corsi/javascript/Lezioni/js-51.html#approfondimento-type-event"
  },"232": {
    "doc": "Corso Javascript - 51",
    "title": "Aprrofondimento eventi tastiera e input",
    "content": "File html . &lt;body&gt; &lt;h3&gt;evento JS&lt;/h3&gt; &lt;div&gt; &lt;p&gt;Lorem ipsum, dolor sit amet consectetur adipisicing elit. &lt;strong&gt;Doloremque, modi?&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;!-- #region Importante mettere '#' come valore di href perchè evita il comportamento di default del link che come ricordiamo tenderebbe a raggiungere il link specificato da href ma nel caso di un bottone premuto voglio stabilirlo io cosa deve accadere--&gt; &lt;li id=\"ciao\" class=\"myClass\"&gt;elemento UNO &lt;a href=\"#\"&gt;click me&lt;/a&gt;&lt;/li&gt; &lt;li class=\"classe\"&gt;elemento DUE&lt;/li&gt; &lt;li class=\"classe\"&gt;elemento TRE&lt;/li&gt; &lt;/ul&gt; &lt;form id='form' action=\"\"&gt; &lt;input id='input' type=\"text\"&gt; &lt;/form&gt; &lt;/div&gt; &lt;script src=\"08_mainDOM.js\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Eventi Tastiera . | ‘keydown’: genera un evento alla pressione di ogni tasto digitato | ‘keyup’: genera un evento al rilascio di ogni tasto digitato | ‘keypress’: genera un evento alla pressione di ogni tasto digitato (alcuni tasti speciali non sono considerati) | ‘focus’: genera un evento quando aziono il focus sull’elemento (spesso equivale al click) | ‘blur’: genera un evento quando esco dalla zona di focus dell’elemento | ‘copy’: genera un evento al comando “ctrl + c”, copia | ‘paste’: genera un evento al comando “ctrl + v”, incolla | . L’esempio seguente permette di contare il numero di tasti premuti di due caselle di input “Nome” e “Cognome” visualizzando il conteggio in una casella testuale “Tasti Premuti”. Il conteggio si azzera con il focus sulla casella testuale “Tasti Premuti”. Appare un alert con la scritta “Non è possibile usare la funzione copia!” quando si tenta di eseguire il comando Ctrl + c (copia) all’interno della casella “Nome” o “Cognome”. Inoltre, abbandonando il focus sulle caselle di input “Nome” o “Cognome” il testo digitato si colorerà di rosso ma non appena torneremo alla digitazione il testo tornerà di colore nero. &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .colorRed{ color: red; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;DOM: Document Object Manipulation&lt;/h1&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Tasti Premuti:&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" id=\"pressed-key\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Nome:&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" id=\"name\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Cognome:&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" id=\"cognome\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;script&gt; var form = [ document.querySelector(\"#name\"), document.querySelector(\"#cognome\")] var textPressedKey = document.querySelector(\"#pressed-key\");Tasti Premuti var charInserted = 0; //alla pressione di un tasto nei campi \"Nome\" e \"Cognome\" verrà aggiornato il conteggio dei caratteri //totali inseriti e tolto lo stile all' elemento che ha scatenato l'evento rimuovendo la classe \"colorRed\" function pressedKey (){ textPressedKey.value = String(++charInserted); this.classList.remove(\"colorRed\"); } //quando viene lasciato il focus dall'elemento viene aggiunto lo stile tramite la classe \"colorRed\" function changeColor (){ this.classList.add(\"colorRed\"); } //quando si tenta di lanciare il comando \"copia\" dai campi \"Nome\" e \"Cognome\" si genera un alert di errore function printErrorCopyMessage() { alert(\"Non è possibile usare la funzione copia!\"); } //quando sposto il focus sull'elemento \"Tasti Premuti\" azzero il conteggio textPressedKey.addEventListener(\"focus\", function() { charInserted = 0; textPressedKey.value = String(charInserted); }) //Aggiungo eventi ai campi \"Nome\" e \"Cognome\" for(elem of form){ elem.addEventListener(\"keydown\", pressedKey); elem.addEventListener(\"blur\", changeColor); elem.addEventListener(\"copy\", printErrorCopyMessage); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-51.html#aprrofondimento-eventi-tastiera-e-input",
    "relUrl": "/corsi/javascript/Lezioni/js-51.html#aprrofondimento-eventi-tastiera-e-input"
  },"233": {
    "doc": "Corso Javascript - 51",
    "title": "Corso Javascript - 51",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-51.html",
    "relUrl": "/corsi/javascript/Lezioni/js-51.html"
  },"234": {
    "doc": "Corso Javascript - 52",
    "title": "Argomeni non trattati / da approfondire",
    "content": ". | Typed Array: Gli array tipizzati JavaScript sono oggetti simili a array che forniscono un meccanismo per leggere e scrivere dati binari grezzi nei buffer di memoria. Come forse già saprai, gli oggetti Array crescono e si riducono dinamicamente e possono avere qualsiasi valore JavaScript. I motori JavaScript eseguono ottimizzazioni in modo che questi array siano veloci. Utile per curare aspetti delicati come l’Endianess. Fonte: MDN - Typed Array Endianess. In informatica, endianness è l’ordine o la sequenza di byte di una parola di dati digitali nella memoria del computer. L’Endianness è principalmente espresso come big-endian (BE) o little-endian (LE). Un sistema big-endian memorizza il byte più significativo di una parola all’indirizzo di memoria più piccolo e il byte meno significativo al più grande. Un sistema little-endian, al contrario, memorizza il byte meno significativo all’indirizzo più piccolo.L’Endianness può anche essere usato per descrivere l’ordine in cui i bit vengono trasmessi su un canale di comunicazione, ad esempio, il big-endian in un canale di comunicazione trasmette prima i bit più significativi. Il bit-endianness è usato raramente in altri contesti. I protocolli Internet come TCP e IPV4 utilizzano lo schema little endian mentre i processori Intel utilizzano spesso la notazione big endian. Questo è un problema reale da conoscere saper gestire Fonte: Wikipedia - Endianess . | Regular Expression Le espressioni regolari sono schemi usati per confrontare combinazioni di caratteri nelle stringhe. In JavaScript, le espressioni regolari sono anche oggetti. Questi pattern sono usati con i metodi exec() e test() della classe RegExp, e con i metodi match(), matchAll(), replace(), search(), e split() della classe String. Fonte: MDN - Espressioni_Regolari . | Moduli Fonte: MDN - JavaScript modules . | Eventi/Manipolazione DOM (programmazione asincrona, promis) Dom Manipulation Quando scrivi pagine web e app, una delle cose più comuni che vorrai fare è manipolare in qualche modo la struttura del documento. Questo di solito viene fatto utilizzando il Document Object Model (DOM), un insieme di API per il controllo dell’HTML e delle informazioni di stile che fa un uso intenso dell’oggetto Document. In questo articolo vedremo come utilizzare il DOM in dettaglio, insieme ad alcune altre API interessanti che possono alterare il tuo ambiente in modi interessanti. Fonte: MDN - Manipulating documents Javascript async function Una funzione asincrona è una funzione dichiarata con la parola chiave asincrona. Le funzioni asincrone sono istanze del costruttore AsyncFunction e al loro interno è consentita la parola chiave await. Le parole chiave async e await consentono di scrivere un comportamento asincrono basato sulla promessa in uno stile più pulito, evitando la necessità di configurare esplicitamente catene di promesse. Fonte: MDN - async function . | Libreria JQuery jQuery è una libreria JavaScript per applicazioni web, distribuita come software libero, distribuito sotto i termini della Licenza MIT. Nasce con l’obiettivo di semplificare la selezione, la manipolazione, la gestione degli eventi e l’animazione di elementi DOM in pagine HTML, nonché semplificare l’uso di funzionalità AJAX, la gestione degli eventi e la manipolazione dei CSS. Le sue caratteristiche permettono agli sviluppatori JavaScript di astrarre le interazioni a basso livello con i contenuti delle pagine HTML. L’approccio di tipo modulare di jQuery consente la creazione semplificata di applicazioni web e contenuti dinamici versatili. Nel 2020, jQuery risulta la libreria JavaScript più utilizzata in Internet, ovvero è presente nel 74,4% dei primi 10 milioni di siti Internet più popolari secondo W3Techs. Fonte: Wikipedia - JQuery . | . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-52.html#argomeni-non-trattati--da-approfondire",
    "relUrl": "/corsi/javascript/Lezioni/js-52.html#argomeni-non-trattati--da-approfondire"
  },"235": {
    "doc": "Corso Javascript - 52",
    "title": "Fonti",
    "content": "Risorse gratuite . | Exploring JS: JavaScript books for programmers | MDN | . Video-Corsi gratuiti: . | fcamuso - Corso Javascript (ES6) ITA | Andrea Tommasello - corso Javascript - 2019 italiano | . ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-52.html#fonti",
    "relUrl": "/corsi/javascript/Lezioni/js-52.html#fonti"
  },"236": {
    "doc": "Corso Javascript - 52",
    "title": "Corso Javascript - 52",
    "content": " ",
    "url": "http://localhost:4000/corsi/javascript/Lezioni/js-52.html",
    "relUrl": "/corsi/javascript/Lezioni/js-52.html"
  },"237": {
    "doc": "Corso Python - 01",
    "title": "Prerequisiti",
    "content": "Conoscenza di un linguaggio qualsiasi OOP come C++ o Javascript . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-00.html#prerequisiti",
    "relUrl": "/corsi/python/Lezioni/py-course-00.html#prerequisiti"
  },"238": {
    "doc": "Corso Python - 01",
    "title": "Corso Python",
    "content": "Python è un linguaggio di programmazione di più “alto livello” rispetto alla maggior parte degli altri linguaggi, orientato a oggetti, adatto, tra gli altri usi, a sviluppare applicazioni distribuite, scripting, computazione numerica e system testing. Ideato da Guido van Rossum all’inizio degli anni novanta, il nome fu scelto per la passione dello stesso inventore verso i Monty Python e per la loro serie televisiva Monty Python’s Flying Circus ed è spesso paragonato a Ruby, Tcl, Perl, JavaScript, Visual Basic o Scheme . Wikipedia - Python . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-00.html#corso-python",
    "relUrl": "/corsi/python/Lezioni/py-course-00.html#corso-python"
  },"239": {
    "doc": "Corso Python - 01",
    "title": "Installazione e setup",
    "content": "Collegati alla pagina ufficiale di Python e installa la versione per il tuo sistema operativo. ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-00.html#installazione-e-setup",
    "relUrl": "/corsi/python/Lezioni/py-course-00.html#installazione-e-setup"
  },"240": {
    "doc": "Corso Python - 01",
    "title": "Installazione e setup - Linux",
    "content": "Per i sistemi su base linux è sufficiente digitare i seguenti comandi: . sudo apt-get install python3 sudo apt-get install python3-pip . Nota: Il modulo pip di Python permette la gestione e l’installazione di moduli esterni . Per verificare la corretta installazione dell’interprete python digitare da terminale python3. In questo modo apriremo inoltre la shell interattiva di python in cui sarà possibile inserire direttamente del codice ed avere una risposta simultanea . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-00.html#installazione-e-setup---linux",
    "relUrl": "/corsi/python/Lezioni/py-course-00.html#installazione-e-setup---linux"
  },"241": {
    "doc": "Corso Python - 01",
    "title": "Configurazione di un IDE",
    "content": "Un ottimo ambiente di sviluppo per Python è Pycharm. Per questo corso ho preferito non utilizzare un IDE specifico come Pycharm ma uno con un target più ad uso generale come Visual Studio Code con l’ausilio di un’estensione che possa supportare gli emmet (abbreviazioni intelligenti) per il linguaggio python e opzioni per il debug del codice. L’estension che ho installato si chiama Python ed è quella che riporto nell’immagine animata qua sotto. next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-00.html#configurazione-di-un-ide",
    "relUrl": "/corsi/python/Lezioni/py-course-00.html#configurazione-di-un-ide"
  },"242": {
    "doc": "Corso Python - 01",
    "title": "Corso Python - 01",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-00.html",
    "relUrl": "/corsi/python/Lezioni/py-course-00.html"
  },"243": {
    "doc": "Corso Python - 02",
    "title": "Primo script",
    "content": "Ogni file python ha un’estensione .py. Per l’esecuzione di uno script python è possibile lanciare il file creato con l’estensione .py (esempio test.py) direttamente dal terminale digitando il comando per l’invocazione dell’interprete python python3 ad esempio python3 test.py all’interno della cartella contenente il file test.py oppure attraverso l’estensione appena installata per VS code Run/Start Debugging . Ecco l’esecuzione del primo script python . print('ciao mondo') . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-01.html#primo-script",
    "relUrl": "/corsi/python/Lezioni/py-course-01.html#primo-script"
  },"244": {
    "doc": "Corso Python - 02",
    "title": "Aggiunta di moduli",
    "content": "Per l’aggiunta di un modulo che rientra nella libreria standard python basta semplicemente digitare: . import &lt;nomeModulo&gt; . A volte tuttavia potremmo aver bisogno di un modulo non standard disponibile sul web. Per installarlo possiamo far ricorso al pacchetto pip che permette la gestione e l’installazione dei moduli aggiuntivi python. Supponiamo di voler scaricare il modulo PyPDF2 per la gestione dei PDF. Digitare da terminale . pip install PyPDF2 . Qualora si avessero dubbi sul nome del modulo o sul comando esatto, niente paura, il browser ci è di supporto . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-01.html#aggiunta-di-moduli",
    "relUrl": "/corsi/python/Lezioni/py-course-01.html#aggiunta-di-moduli"
  },"245": {
    "doc": "Corso Python - 02",
    "title": "Introduzione a webbrowser",
    "content": "Il seguente script aprirà una località su google.maps digitata come input dall’utente. Utilizzeremo il comando input() che permette l’acquisizione dati da tastiera e la funzione open del modulo python webbrowser. La funzione open permette di aprire un certo url specificato come parametro tra gli apici. Il parametro è quindi passato come una stringa e come tale valgono tutte le operazioni e i metodi applicabili su stringa tra cui l’operatore + utilizzato per concatenare due o più stringhe . | input(): consente l’acquisizione dati da tastiera dell’utente. | webbrowser.open(myUrl): Apre l’indirizzo web specificato dal parametro myUrl. Il parametro specificato viene passato come stringa | +: Operatore di concatenazione stringhe | . Ecco lo script completo: . import webbrowser destinazione = input() webbrowser.open('https://www.google.com/maps' + '/place/' + destinazione) . E’ possibile ridurre ancora il codice . import webbrowser webbrowser.open('https://www.google.com/maps' + '/place/' + input()) . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-01.html#introduzione-a-webbrowser",
    "relUrl": "/corsi/python/Lezioni/py-course-01.html#introduzione-a-webbrowser"
  },"246": {
    "doc": "Corso Python - 02",
    "title": "Come rendo eseguibile un file python?",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-01.html#come-rendo-eseguibile-un-file-python",
    "relUrl": "/corsi/python/Lezioni/py-course-01.html#come-rendo-eseguibile-un-file-python"
  },"247": {
    "doc": "Corso Python - 02",
    "title": "Linux",
    "content": "Aggiungere la seguente linea di codice in testa allo script: . #!/usr/bin/env python3 . Ad esempio: . #!/usr/bin/env python3 import webbrowser webbrowser.open('https://www.google.com/maps' + '/place/' + input()) . E’ sufficiente rendere il file eseguibile (all’interno delle proprietà del file sezione “permessi”) e lanciarlo da terminale. ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-01.html#linux",
    "relUrl": "/corsi/python/Lezioni/py-course-01.html#linux"
  },"248": {
    "doc": "Corso Python - 02",
    "title": "Commenti",
    "content": "# questo è un commento e verrà ignorato dall'interprete print('ciao') . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-01.html#commenti",
    "relUrl": "/corsi/python/Lezioni/py-course-01.html#commenti"
  },"249": {
    "doc": "Corso Python - 02",
    "title": "Corso Python - 02",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-01.html",
    "relUrl": "/corsi/python/Lezioni/py-course-01.html"
  },"250": {
    "doc": "Corso Python - 03",
    "title": "Introduzione al modulo PyPDF2",
    "content": "Il seguente script tratterà l’elaborazione di file pdf. Saremo in grado quindi di generare un file pdf con nome predefinito “Output.pdf” che è la copia della prima pagina di un pdf con nome “input.pdf” ricevuto in input . Faremo uso del modulo aggiuntivo PyPDF2 da installare da terminale tramite il comando pip install PyPDF2 . Utilizzeremo le funzioni standard Python di apertuta e chiusura file: . | open(myFile, mode): apre un file e lo restituisce come oggetto. | myfile indica il nome comprensivo del path del file da aprire | mode indica la modalità di apertura del file . | mode = \"r\" modalità lettura | mode = \"rb\" modalità lettura binaria | mode = \"w\" modalità scrittura | mode = \"wb\" modalità scrittura binaria | . | . | close(): chiude un file aperto. È necessario chiudere sempre i file aperti poichè in alcuni casi, a causa del buffering, le modifiche apportate a un file potrebbero non essere visualizzate finché non si chiude il file. | . w3schools - Python open() Function w3schools - Python close() Function . Del modulo aggiuntivo PyPDF2 utilizzeremo le classi: . | PdfFileReader(myPdf): Chiama il costruttore della classe PdfFileReader che inzializza in lettura il file oggetto pdf myPdf ricevuto come parametro e restituisce un’istanza della classe PdfFileReader The PdfFileReader Class Metodi . | getPage(pageNumber): restituisce una pagina in base al numero pageNumber passato come parametro | . | PdfFileWriter(): Chiama il costruttore della classe PdfFileWriter() che inizializza in scrittura un file oggetto pdf e restituisce un’istanza della classe PdfFileWriter() The PdfFileWriter Class Metodi . | addPage(page): Aggiunge una pagina PDF, all’istanza della classe PdfFileWriter a cui si applica il metodo. La pagina viene solitamente acquisita da un’istanza di PdfFileReader. | write(myPdf): Scrive (su disco, da ram a rom) la raccolta di pagine aggiunte a questo oggetto come file PDF, riceve come parametro l’oggetto pdf da scrivere, myPdf. | . | . Nota: Le “funzioni/classi” di un modulo devono essere invocate sempre specificando il nome del modulo. Esempio: . import PyPDF2 pdfInput = open(\"pdf/input.pdf\", \"rb\") #PyPDF2 è il nome del modulo, PdfFileReader è il nome della classe del modulo PyPDF2 reader1 = PyPDF2.PdfFileReader(pdfInput) . Script completo . import PyPDF2 #Apro il file &lt;input.pdf&gt; all'interno della cartella &lt;pdf&gt; in modalità lettura binaria #Restituisco un oggetto all'interno della variabile &lt;pdfInput&gt; pdfInput = open(\"pdf/input.pdf\", \"rb\") #Restituisco un'istanza della classe &lt;PdfFileReader&gt; all'interno della variabile &lt;reader1&gt; reader1 = PyPDF2.PdfFileReader(pdfInput) #apro un file &lt;Output.pdf&gt; all'interno della cartella &lt;pdf&gt; in modalità scrittura binaria #Restituisco un oggetto all'interno della variabile &lt;pdfOutput&gt; pdfOutput = open(\"pdf/Output.pdf\", \"wb\") #Restituisco un'istanza della classe &lt;PyPDF2.PdfFileWriter&gt; all'interno della variabile &lt;writer1&gt; writer1 = PyPDF2.PdfFileWriter() #Prelevo la pagina numero &lt;0&gt; e ritorno un oggetto pdf di una pagina all'interno della variabile &lt;pag0&gt; pag0 = reader1.getPage(0) #Aggiungo in coda pag0 all'istanza &lt;writer1&gt; (della classe PdfFileWriter) #Ripeto l'operazione per tre volte writer1.addPage(pag0) writer1.addPage(pag0) writer1.addPage(pag0) #Scrittura su disco dell'istanza della classe &lt;writer1&gt; su &lt;pdfOutput&gt; l'oggetto in scrittura corrispondente a \"Output.pdf\" writer1.write(pdfOutput) #aChiudo i File pdfInput.close() pdfOutput.close() . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-02.html#introduzione-al-modulo-pypdf2",
    "relUrl": "/corsi/python/Lezioni/py-course-02.html#introduzione-al-modulo-pypdf2"
  },"251": {
    "doc": "Corso Python - 03",
    "title": "Corso Python - 03",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-02.html",
    "relUrl": "/corsi/python/Lezioni/py-course-02.html"
  },"252": {
    "doc": "Corso Python - 04",
    "title": "Costrutto condizionale if...else",
    "content": "Le istruzioni condizionali vengono utilizzate per eseguire un blocco di codice solo nel caso in cui una condizione risulti true o false . Sintassi costrutto if esteso: . if condition1: #code 01 #.. elif condition2: #code 02 #.. else: #code 03 #.. Esempio: . print(\"Inserisci due numeri..\") primoValore = input() secondoValore = input() if a &gt; b: print(\"Il primo valore inserito, \" + primoValore + \" è maggiore del secondo valore inserito, \" + secondoValore) elif b &gt; a: print(\"Il secondo valore inserito, \" + secondoValore + \" è maggiore del primo valore inserito, \" + primoValore) else: print(\"i due valori inseriti sono uguali\") . Notare che per il costrutto if in python, la condition è priva di parentesi tonde ( ) comuni invece a molti altri linguaggi di programmazione; l’operatore : è usato come terminatore della condition e l’indentazione è necessaria per racchiudere la porzione di codice condizionato da if. ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-03.html#costrutto-condizionale-ifelse",
    "relUrl": "/corsi/python/Lezioni/py-course-03.html#costrutto-condizionale-ifelse"
  },"253": {
    "doc": "Corso Python - 04",
    "title": "Costrutto iterativo for",
    "content": "Un ciclo for viene utilizzato per iterare su una sequenza (che può essere una lista, una tupla, un dizionario, un insieme o una stringa). È meno simile alla keyword for in altri linguaggi di programmazione e funziona più come un metodo iteratore che si trova in altri linguaggi di programmazione orientati agli oggetti. w3schools - Python For Loops . Sintassi: . #Sintassi 1: for target_list in expression_list: #code . Esempio: . for numero in [1, 2, 3, 4, 5]: print(numero*numero) # 1 # 4 # 9 # 16 # 25 for frutto in [\"banana\", \"mela\", \"pera\"]: print(frutto) # banana # mela # pera . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-03.html#costrutto-iterativo-for",
    "relUrl": "/corsi/python/Lezioni/py-course-03.html#costrutto-iterativo-for"
  },"254": {
    "doc": "Corso Python - 04",
    "title": "Indentazione Python",
    "content": "Il linguaggio python, a differenza di altri linguaggi come C/C++, Javascript .. Non utilizza delimitatori di blocco codice come { } ma si affida alla semplice indentazione. Rende quindi indispensabile l’uso di un buon editor di testo per evitare problemi di sintassi o semantica (in alcuni casi nemmeno troppo rari). Non utilizza neanche un terminatore di statement come il classico ; ma si affida al carattere a capo. L’interprete python comunque è in grado di rilevare errori sintattici di indentazione e segnalarlo. ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-03.html#indentazione-python",
    "relUrl": "/corsi/python/Lezioni/py-course-03.html#indentazione-python"
  },"255": {
    "doc": "Corso Python - 04",
    "title": "range() Function",
    "content": "Per iterare un insieme di codice un numero di volte specificato, possiamo usare la funzione range (). La funzione range (number) restituisce una sequenza di numeri, a partire da 0 per impostazione predefinita, incrementa di 1 (per impostazione predefinita) e termina con un numero specificato tramite il parametro number. In realtà termina con il numero number - 1. La funzione range () può accettare 1, 2 o 3 parametri: . | range(number): un parametro, genera una lista numerica incrementale nel range 0 - number-1 | range(numberStart, numberEnd): due parametri, genera una lista numerica incrementale nel range numberStart - numberEnd-1 | range(numberStart, numberEnd, step): tre parametri, genera una lista numerica con incremento pari a step nel range massimo numberStart - numberEnd-1 | . w3schools - The range() Function . range(5) #[0, 1, 2, 3, 4] range(1, 5) #[1, 2, 3, 4] range(1, 5, 2) #[1, 3] . for target_list in range(number): #code . # range(number) costruisce una lista da 0 a number-1 for numero in range(5): print(numero*numero) # 0 # 1 # 4 # 9 # 16 for numero in range(1, 5, 2): print(numero) # 1 # 3 . Nel seguente esempio specifico alla funzione print() di non utilizzare il terminatore di default a capo rendendo nullo l’attributo end . print(end=\"\") . Esempio: . for numero in range(5): print(str(numero) + \":\", end=\"\") print(numero*numero) # 0:0 # 1:1 # 2:4 # 3:9 # 4:16 . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-03.html#range-function",
    "relUrl": "/corsi/python/Lezioni/py-course-03.html#range-function"
  },"256": {
    "doc": "Corso Python - 04",
    "title": "Corso Python - 04",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-03.html",
    "relUrl": "/corsi/python/Lezioni/py-course-03.html"
  },"257": {
    "doc": "Corso Python - 05",
    "title": "PyPDF2 - Copia PDF",
    "content": "Il seguente script prende in input un pdf “input.pdf” e ne produce una copia sul file “Output.pdf” Faremo uso della proprietà della classe PdfFileReader: . | numPages: Restituisce il numero delle pagine del file pdf dell’istanza (della classe PdfFileReader) si cui si legge la proprietà | . import PyPDF2 pdfInput = open(\"pdf/input.pdf\", \"rb\") reader1 = PyPDF2.PdfFileReader(pdfInput) pdfOutput = open(\"pdf/Output.pdf\", \"wb\") writer1 = PyPDF2.PdfFileWriter() #Copia delle pagine dell'oggetto (classe) pdf &lt;reader1&gt; nell'oggetto (classe) pdf &lt;writer1&gt; for numeroPagina in range(reader1.numPages): page = reader1.getPage(numeroPagina) writer1.addPage(page) writer1.write(pdfOutput) #aChiudo i File pdfInput.close() pdfOutput.close() . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-04.html#pypdf2---copia-pdf",
    "relUrl": "/corsi/python/Lezioni/py-course-04.html#pypdf2---copia-pdf"
  },"258": {
    "doc": "Corso Python - 05",
    "title": "PyPDF2 - Merge All pdf",
    "content": "Il seguente script unisce tutti i file pdf presenti nella root directory salvandoli con un nome stabilito dall’utente. Faremo uso di: . | Modulo os è un modulo che contiene funzioni per interagire con il sistema operativo per la manipolazione di file e processi, os — Miscellaneous operating system interfaces. Nota: Per questo esercizio importeremo solo il metodo listdir() del modulo os: from os import listdir . | listdir(path): Metodo del modulo os. Elenca file e cartelle specificate nella path-directory come parametro. Se non viene specificato nessun parametro restituisce i file della root-directory. Viene restituita una lista Python3 os.listdir () method . | Metodi su stringa . | endswith(myString): Restituisce true se la stringa a cui applichiamo il metodo termina con la stringa indicata come parametro, myString | . | . Altre funzionalità del modulo PyPDF2. | classe PdfFileMerger: Inizializza un oggetto PdfFileMerger. PdfFileMerger unisce più PDF in un unico PDF. Restituisce un’istanza della classe PdfFileMerger, PyPDF2 - The PdfFileMerger Class. | metodo append(myPDF) della classe PdfFileMerger: Concatena tutte le pagine di un oggetto PDF passato come parametro, myPDF, alla fine del file PDF a cui si applica il metodo | . Riporto lo script completo: . #Merge all pdf files from os import listdir import PyPDF2 print(\"**********************************************\") print(\"Unisco i file pdf presenti in questa directory\") print(\"**********************************************\") #Non devo specificare &lt;os.listdir&gt; poichè ho spcificato l'importazione &lt;from os import listdir&gt; #Se avessi usato &lt;import os&gt; avrei dovuto scrivere &lt;os.listdir&gt; #listdir restituisce file e cartelle in formato &lt;lista&gt; listaFiles = listdir() for nomeFile in listaFiles: if nomeFile.endswith('.pdf'): print(nomeFile) print('\\n') #chiedo all'utente come vuole chiamare il file di output print(\"Salvo il risultato con il nome:\") nomeFileDestinazione = input() #Apro il file in scrittura binaria PDF_Destinazione = open(nomeFileDestinazione, \"wb\") print('\\n') merger = PyPDF2.PdfFileMerger() print(\"Elaborazione di..\") for nomeFile in listaFiles: #Elaboro solo i file con estensione \".pdf\" if nomeFile.endswith('.pdf'): #stampo il nome del file print(nomeFile) #lo apro in lettura binaria pdfFileInput = open(nomeFile, \"rb\") #creo un'istanza della classe &lt;PdfFileReader&gt; sul file appena aperto PDF_Reader = PyPDF2.PdfFileReader(pdfFileInput) #Appendo il file PDF in coda all'oggetto merger merger.append(PDF_Reader) #chiudo il file aperto pdfFileInput.close() print('\\n') #Operazione di scrittura print(\"Scrittura su: \" + nomeFileDestinazione) merger.write(PDF_Destinazione) PDF_Destinazione.close() print(\"Finito..\") . backa&gt; next &lt;/div&gt; ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-04.html#pypdf2---merge-all-pdf",
    "relUrl": "/corsi/python/Lezioni/py-course-04.html#pypdf2---merge-all-pdf"
  },"259": {
    "doc": "Corso Python - 05",
    "title": "Corso Python - 05",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-04.html",
    "relUrl": "/corsi/python/Lezioni/py-course-04.html"
  },"260": {
    "doc": "Corso Python - 06",
    "title": "Liste",
    "content": "Abbiamo già visto implicitamente un’introduzione al tipo lista e in particolare come creare e iterare sugli elementi di una lista attraverso il ciclo for e la funzione range(). Il tipo dato lista è molto importante nel linguaggio python. Le liste sono un tipo di dato utilizzato per memorizzare diversi elementi in una singola variabile. Le liste sono uno dei 4 tipi di dati incorporati in Python utilizzati per memorizzare raccolte di dati, gli altri 3 sono Tuple, Set e Dictionary, tutti con qualità e utilizzo diversi. Vediamo le caratteristiche principali delle liste: . | Le liste possono contenere qualsiasi tipo di dato | Gli elementi della lista sono indicizzati, il primo elemento ha indice [0], il secondo elemento ha indice [1] .. A differenza della maggior parte dei linguaggi si possono usare anche indici negativi, [-1] si riferisce all’ultimo elemento, [-2] si riferisce al penultimo elemento ecc. | Gli elementi in una lista sono ordinati e l’ordine è stabilito dall’indice. | Dopo la creazione, è possibile aggiungere elementi, cambiare il valore degli elementi già esistenti o rimuoverli | Dal momento che le liste sono indicizzate è possibile avere elementi duplicati | La funzione len() ritorna il numero degli elementi presenti in una lista | L’operatore [::] permette lo slicing di liste ovvero la creazione di porzioni di liste a partire dalla lista a cui si applica l’operatore [::] | . w3schools - Python Lists . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-05.html#liste",
    "relUrl": "/corsi/python/Lezioni/py-course-05.html#liste"
  },"261": {
    "doc": "Corso Python - 06",
    "title": "Accesso agli elementi di una lista",
    "content": "L’accesso agli elementi di una lista si effettua tramite l’operatore [] . #indici 0 1 2 3 4 #indici -5 -4 -3 -2 -1 myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] print(myList[2]) #mela print(myList[-1]) #cachi print(len(myList)) #5 . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-05.html#accesso-agli-elementi-di-una-lista",
    "relUrl": "/corsi/python/Lezioni/py-course-05.html#accesso-agli-elementi-di-una-lista"
  },"262": {
    "doc": "Corso Python - 06",
    "title": "Modifica del valore degli elementi in una lista.",
    "content": "Per cambiare il valore degli elementi in una lista si utilizza l’operatore [] . #indici 0 1 2 3 4 #indici -5 -4 -3 -2 -1 myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] myList[-1] = \"arancia\" myList[2] = \"pera\" print(myList) myList[1:3] = [\"mandorla\", \"nocciola\"] print(myList) . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-05.html#modifica-del-valore-degli-elementi-in-una-lista",
    "relUrl": "/corsi/python/Lezioni/py-course-05.html#modifica-del-valore-degli-elementi-in-una-lista"
  },"263": {
    "doc": "Corso Python - 06",
    "title": "Aggiunta di elementi in una lista",
    "content": "Sono disponibili i metodi: . | append(elem): Appende elem in coda alla lista | insert(index, elem): Inserisce (senza nessun replace) elem alla posizione index facendo scalare di una posizione gli elementi dalla posizione index | extend(otherList): Appende in coda gli elementi della lista passata come parametro, otherList | . myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] myList2 = [\"mandorla\", \"nocciola\", \"noce\"] myList.append(\"anguria\") print(myList) #['banana', 'kiwi', 'mela', 'mandarino', 'cachi', 'anguria'] myList.insert(2, \"melone\") print(myList) #['banana', 'kiwi', 'melone', 'mela', 'mandarino', 'cachi', 'anguria'] myList.extend(myList2) print(myList) #['banana', 'kiwi', 'melone', 'mela', 'mandarino', 'cachi', 'anguria', 'mandorla', 'nocciola', 'noce'] . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-05.html#aggiunta-di-elementi-in-una-lista",
    "relUrl": "/corsi/python/Lezioni/py-course-05.html#aggiunta-di-elementi-in-una-lista"
  },"264": {
    "doc": "Corso Python - 06",
    "title": "Rimozione di elementi in una lista",
    "content": "Sono disponibili i metodi: . | remove(elem) : Toglie elem dalla lista | pop(?index): Toglie l’elemento corrispondente all’indice index passato come parametro opzionale. Se non viene passato nessun parametro toglie l’ultimo elemento. E’ possibile ottenere questo risultato anche con il comando del, specificando l’elemento, del myList[index] | clear(): Svuota la lista. La lista esiste ma è vuota. E’ possibile ottenere questo risultato anche con il comando del specificando il nome della lista del myList ma in questo caso elimina anche l’identificatore | . myList = ['banana', 'kiwi', 'melone', 'mela', 'mandarino', 'cachi', 'anguria', 'mandorla', 'nocciola', 'noce'] myList.remove(\"mandarino\") print(myList) #['banana', 'kiwi', 'melone', 'mela', 'cachi', 'anguria', 'mandorla', 'nocciola', 'noce'] myList.pop(2) print(myList) #['banana', 'kiwi', 'mela', 'cachi', 'anguria', 'mandorla', 'nocciola', 'noce'] myList.pop() print(myList) #['banana', 'kiwi', 'mela', 'cachi', 'anguria', 'mandorla', 'nocciola'] del myList[0] print(myList) #['kiwi', 'mela', 'cachi', 'anguria', 'mandorla', 'nocciola'] myList.clear() print(myList) #[] myList = ['banana', 'kiwi', 'melone', 'mela', 'mandarino', 'cachi', 'anguria', 'mandorla', 'nocciola', 'noce'] del myList print(myList) #NameError: name 'myList' is not defined . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-05.html#rimozione-di-elementi-in-una-lista",
    "relUrl": "/corsi/python/Lezioni/py-course-05.html#rimozione-di-elementi-in-una-lista"
  },"265": {
    "doc": "Corso Python - 06",
    "title": "Creazione di sotto liste, slicing ",
    "content": "Sintassi: mySubList = myList[?startIndex: ?endIndex: ?Step]: Ritorna una sotto lista a partire dalla lista a cui si applica lo slicing (myList). L’operatore [] può ricevere tre parametri opzionali separati da :. Il primo rappresenta l’indice di partenza (incluso), il secondo l’indice di fine (non incluso) e il terzo il passo. Se il primo parametro non è specificato si assume 0 come valore di partenza. Se il secondo parametro non è specificato si assume len(myList) - 1 come valore di fine cioè l’ultimo elemento della lista. Se il terzo parametro non è specificato si assume un incremento positivo unitario . #indici 0 1 2 3 4 #indici -5 -4 -3 -2 -1 myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] mySubList = myList[1:] print(mySubList) #['kiwi', 'mela', 'mandarino', 'cachi'] mySubList = myList[-2:] print(mySubList) #['mandarino', 'cachi'] mySubList = myList[2:4] print(mySubList) #['mela', 'mandarino'] mySubList = myList[::2] print(mySubList) #['banana', 'mela', 'cachi'] #Restituisce una copia &lt;non profonda&gt; di una lista #Non valido per liste annidate mySubList = myList[:] print(mySubList) #[\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] #Ordinamento inverso mySubList = myList[::-1] print(mySubList) #['cachi', 'mandarino', 'mela', 'kiwi', 'banana'] . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-05.html#creazione-di-sotto-liste-slicing-",
    "relUrl": "/corsi/python/Lezioni/py-course-05.html#creazione-di-sotto-liste-slicing-"
  },"266": {
    "doc": "Corso Python - 06",
    "title": "Corso Python - 06",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-05.html",
    "relUrl": "/corsi/python/Lezioni/py-course-05.html"
  },"267": {
    "doc": "Corso Python - 07",
    "title": "Copia di Liste",
    "content": "Abbiamo visto nel paragrafo precedente che per la copia di liste è sufficiente utilizzare l’operatore [:] ma che non vale per liste annidate. In questa lezione approfondiremo l’operazione di copia di elementi. Copia semplice, valida per liste non annidate: . myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] myList2 = myList[:] print(myList) #['banana', 'kiwi', 'mela', 'mandarino', 'cachi'] print(myList2) #['banana', 'kiwi', 'mela', 'mandarino', 'cachi'] . Cosa succede se eseguo la copia tramite il semplice assegnamento? . myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] myList2 = myList print(myList) #['banana', 'kiwi', 'mela', 'mandarino', 'cachi'] print(myList2) #['banana', 'kiwi', 'mela', 'mandarino', 'cachi'] . Sfruttando quindi l’operatore di assegnamento = non ottengo una copia dei valori ma una copia dei riferimenti. In pratica in questo modo myList e myList2 condividono gli stessi dati. Se modifico uno modifico anche l’altro . myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] myList2 = myList #Togliendo l'elemento da \"myList\" lo tolgo anche da \"myList2\" perchè condividono gli stessi elementi myList.remove(\"banana\") print(myList) #['kiwi', 'mela', 'mandarino', 'cachi'] # !!! print(myList2) #['kiwi', 'mela', 'mandarino', 'cachi'] . Ciò non accade con la copia poichè diventano due liste indipendenti: . myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] myList2 = myList[:] myList.remove(\"banana\") print(myList) #['kiwi', 'mela', 'mandarino', 'cachi'] print(myList2) #['banana', 'kiwi', 'mela', 'mandarino', 'cachi'] . Attenzione! Per liste più complicate come liste annidate l’operatore [:] non può essere utilizzato per la copia perchè effettuerebbe una copia per riferimento degli elementi annidati. In generale per effettuare una copia ricorsiva e profonda è necessario utilizzare la funzione deepcopy() del modulo copy. Per liste annidate l’operatore [:] fallisce: . myList = [\"banana\", \"kiwi\", \"mela\", [1, 2], \"cachi\"] myList2 = myList[:] myList.remove(\"banana\") myList2[3][0] = 12 # !!! la scrittura su myList2 ha scritto anche myList perchè la lista annidata è stata copiata per riferimento print(myList) #['kiwi', 'mela', [12, 2], 'cachi'] print(myList2) #'banana', 'kiwi', 'mela', [12, 2], 'cachi'] . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-06.html#copia-di-liste",
    "relUrl": "/corsi/python/Lezioni/py-course-06.html#copia-di-liste"
  },"268": {
    "doc": "Corso Python - 07",
    "title": "deepcopy()",
    "content": "Per la copia di liste e qualsiasi altro oggetto è possibile ed è consigliabile utilizzare una funzione deepcopy() del modulo copy che esegue una copia profonda quindi considera anche oggetti e liste annidate . import copy myList = [\"banana\", \"kiwi\", \"mela\", \"mandarino\", \"cachi\"] myList2 = copy.deepcopy(myList) myList.remove(\"banana\") print(myList) #['kiwi', 'mela', 'mandarino', 'cachi'] print(myList2) #['banana', 'kiwi', 'mela', 'mandarino', 'cachi'] . La funzione deepcopy() è l’unica che eseegue in modo affidabile la copia di elementi considerando eventuali elementi annidati. import copy myList = [\"banana\", \"kiwi\", \"mela\", [1, 2], \"cachi\"] myList2 = copy.deepcopy(myList) myList.remove(\"banana\") myList2[3][0] = 12 print(myList) #['kiwi', 'mela', [1, 2], 'cachi'] print(myList2) #['banana', 'kiwi', 'mela', [12, 2], 'cachi'] . backa&gt; next &lt;/div&gt; ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-06.html#deepcopy",
    "relUrl": "/corsi/python/Lezioni/py-course-06.html#deepcopy"
  },"269": {
    "doc": "Corso Python - 07",
    "title": "Corso Python - 07",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-06.html",
    "relUrl": "/corsi/python/Lezioni/py-course-06.html"
  },"270": {
    "doc": "Corso Python - 08",
    "title": "Le stringe",
    "content": "Le stringhe sono un tipo di dato immutabile in python . Questo significa che la copia di stringhe può essere fatta attraverso l’assegnamento tra i nomi (contrariamente a quanto accade per altri linguaggi come C++) poichè quando viene creata una copia tramite l’assegnamento non viene copiato il riferimento della stringa ma l’intero oggetto stringa. s1 = \"ciao\" s2 = s1 s2 = \"ciaociao\" print(s2) #ciaociao print(s1) #ciao . Ecco una dimostrazione approfondita andando ad scavare tra gli indirizzi in memoria con la funzione id . s1 = \"ciao\" print(id(s1)) #140440511029104 s2 = s1 print(id(s2)) #140440511029104 s2 = \"ciaociao\" print(id(s2)) #140440511029168 print(s2) #ciaociao print(s1) #ciao . Attenzione Eseguendo la copia s2 = s1 ancora non si assegna ad s2 un nuovo indirizzo in memoria per motivi di efficienza. Lo si assegna quando ad s2 si assegna un nuovo valore . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-07.html#le-stringe",
    "relUrl": "/corsi/python/Lezioni/py-course-07.html#le-stringe"
  },"271": {
    "doc": "Corso Python - 08",
    "title": "Interpolazione di stringhe - Metodo format()",
    "content": "Il metodo format() applicabile alle stringhe consente di inserire espressioni valutabili all’interno di stringhe w3schools - Python String format() Method. Il metodo format() formatta i valori specificati e li inserisce all’interno del segnaposto della stringa. Il segnaposto viene definito utilizzando le parentesi graffe: {}. Esempio: . #sintassi 1 txt = \"1Kg di sale da cucina a solo {price} euro!\" print(txt.format(price = 2)) #1Kg di sale da cucina a solo 2 euro! #sintassi 2 txt = \"1Kg di sale da cucina a solo {0} euro! Rimasti {1} pezzi\" print(txt.format(2, 500)) #1Kg di sale da cucina a solo 2 euro! Rimasti 500 pezzi . Esiste anche una sintassi leggermente diversa: . myList = [\"dentista\", \"17:00\"] print(f\"Evento: {myList[0]} - Ora: {myList[1]} \") #Evento: dentista - Ora: 17:00 . backa&gt; next &lt;/div&gt; ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-07.html#interpolazione-di-stringhe---metodo-format",
    "relUrl": "/corsi/python/Lezioni/py-course-07.html#interpolazione-di-stringhe---metodo-format"
  },"272": {
    "doc": "Corso Python - 08",
    "title": "Corso Python - 08",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-07.html",
    "relUrl": "/corsi/python/Lezioni/py-course-07.html"
  },"273": {
    "doc": "Corso Python - 09",
    "title": "PyPDF2 - Merge All pdf v2",
    "content": "Questa è una versione migliorata dello script Merge All pdf. Aggiunge dei controlli sull’estensione del file e sulla natura del file. Controlla infatti se un file termina con formati “strani” come “.pdF”, “PDf” considerandoli comunque validi e controlla eventuali falsi file trappola come cartella che termina con estensione “.pdf”. Faremo uso di: . | os.path.isfile(path+file): Ritorna true se il file specificato come parametro (eventualmente con un path relativo o assoluto) è realmente un file. | Metodo su stringhe .upper(): Ritorna una copia della stringa a cui si applica il metodo in caratteri maiscoli | chaining condition and: Permette la concatenazione di condizioni logiche. Ritorna true se tutte le condizioni concatenate sono true | . Script completo e migliorato . import PyPDF2 import os print(\"**********************************************\") print(\"Unisco i file pdf presenti in questa directory\") print(\"**********************************************\") listaFiles = os.listdir() for nomeFile in listaFiles: if nomeFile.endswith('.pdf'): print(nomeFile) print('\\n') #chiedo all'utente come vuole chiamare il file di output print(\"Salvo il risultato con il nome:\") nomeFileDestinazione = input() #Apro il file in scrittura binaria PDF_Destinazione = open(nomeFileDestinazione, \"wb\") print('\\n') merger = PyPDF2.PdfFileMerger() print(\"Elaborazione di..\") for nomeFile in listaFiles: #Elaboro solo i file con estensione \".pdf\" o \"PDF\" o \"PdF\" .. if os.path.isfile(nomeFile) and nomeFile.upper().endswith('.PDF'): #stampo il nome del file print(nomeFile) #lo apro in lettura binaria pdfFileInput = open(nomeFile, \"rb\") #creo un'istanza della classe &lt;PdfFileReader&gt; sul file appena aperto PDF_Reader = PyPDF2.PdfFileReader(pdfFileInput) #Appendo il file PDF in coda all'oggetto merger merger.append(PDF_Reader) #chiudo il file aperto pdfFileInput.close() print('\\n') #Operazione di scrittura print(\"Scrittura su: \" + nomeFileDestinazione) merger.write(PDF_Destinazione) PDF_Destinazione.close() print(\"Finito..\") . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-08.html#pypdf2---merge-all-pdf-v2",
    "relUrl": "/corsi/python/Lezioni/py-course-08.html#pypdf2---merge-all-pdf-v2"
  },"274": {
    "doc": "Corso Python - 09",
    "title": "Introduzione alla manipolazione dei docx",
    "content": "Con il seguente script inizieremo a manipolare i docx Da terminale puoi installare il modulo per la manipolazione dei docx con il comando: . pip install python-docx . Importa il modulo “python-docx” all’interno del tuo script con: . import docx . La documentazione ufficiale del modulo “python-docx” la puoi trovare su docx - documentazione. Del modulo “python-docx” utilizzeremo: . | docx.Document(docxFile): Chiama il costruttore della classe Document passando come parametro di inizializzazione il file “docx” che intendiamo elaborare. Ritorna un’istanza della classe Document . | Metodo sections della classe Document: applicato a un’istanza della classe Document restituisce le sezioni del documento “docx”- . | Metodo paragraphs della classe Document: applicato a un’istanza della classe Document restituisce una lista dell’oggetto Paragraph . | Metodo text della classe Paragraph: applicato a un’istanza della classe Paragraph restituisce il testo di un paragrafo . | . Utilizzeremo anche l’operatore * su stringa che permette di generare una ripetizione della stringa a cui si applica l’operatore. print(\"ciao \"*2 + \"!\") #ciao ciao ! . Script completo: . #Manipolazione docx import docx divina = docx.Document(\"divina1.docx\") sezioni = divina.sections print(\"il documento contine:\") #Utile quando ci sono diversi valori da valutare print(\"- {0} sezioni\".format(len(sezioni))) #altrenativa &gt;&gt;&gt; print(str( len(sezioni) ) + \" sezioni\" ) paragrafi = divina.paragraphs print(\"- {0} paragrafi\".format(len(paragrafi))) #4 sezioni print(\"\\nStampo i paragrafi..\") print(\"-\"*50) #Per ogni elemento p estratto dalla lista paragrafi.. for p in paragrafi: #p.text restituisce il testo di un paragrafo print(p.text) #questo metodo su stringa genera una ripetizione print(\"-\"*50) . backa&gt; next &lt;/div&gt; ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-08.html#introduzione-alla-manipolazione-dei-docx",
    "relUrl": "/corsi/python/Lezioni/py-course-08.html#introduzione-alla-manipolazione-dei-docx"
  },"275": {
    "doc": "Corso Python - 09",
    "title": "Corso Python - 09",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-08.html",
    "relUrl": "/corsi/python/Lezioni/py-course-08.html"
  },"276": {
    "doc": "Corso Python - 10",
    "title": "Python while()",
    "content": "Con il ciclo while possiamo eseguire un insieme di istruzioni fintanto che una condizione è vera. w3schools - Python While Loops . Sintassi: . while condition: #code . Esempio: . i = 1 while i &lt; 6: #1 &lt; 6, true #2 &lt; 6, true #3 &lt; 6, true #4 &lt; 6, true #5 &lt; 6, true #6 &lt; 6, false -&gt; exit print(i) #1 #2 #3 #4 #5 i = i + 1 #i = 2 #i = 3 #i = 4 #i = 5 #i = 6 # 1 # 2 # 3 # 4 # 5 . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-09.html#python-while",
    "relUrl": "/corsi/python/Lezioni/py-course-09.html#python-while"
  },"277": {
    "doc": "Corso Python - 10",
    "title": "Comando break",
    "content": "Con l’istruzione break possiamo interrompere il ciclo anche se la condizione while è vera: . Sintassi: . while condition: #code #code #.. break #esce . Esempio: . i = 1 while i &lt; 6: #1 &lt; 6, true #2 &lt; 6, true print(i) #1 #2 i = i + 1 #i = 2 #i = 3 if i == 3: #i = 2, false #i = 3, true -&gt; exit break # 1 # 2 . Con i cicli c’è sempre da tenere in considerazione quando viene effettuato il controllo delle condizioni di uscita ed entrata del ciclo e la sequenza con cui vengono eseguite le istruzioni all’interno del ciclo. Leggendo l’esempio di sopra non è chiaro se il programmatore con la condizione i == 3 vuole che venga stampato il numero 3 oppure no. Un’ottima strategia è quella di inserire tutte le condizioni di uscita del ciclo all’inizio ed eventuali istruzioni di controllo ciclo alla fine. Al centro del ciclo andranno tutte le istruzioni che verranno eseguite nel caso standard . i = 1 while i &lt; 6: #1 &lt; 6, true #2 &lt; 6, true #3 &lt; 6 #Condizione di uscita ciclo if i == 3: #i = 1, false #i = 2, false #i = 3, true -&gt; exit break print(i) #1 #2 #Condizione di controllo ciclo i = i + 1 #i = 2 #i = 3 # 1 # 2 . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-09.html#comando-break",
    "relUrl": "/corsi/python/Lezioni/py-course-09.html#comando-break"
  },"278": {
    "doc": "Corso Python - 10",
    "title": "Comando continue",
    "content": "Con l’istruzione continue possiamo interrompere l’iterazione corrente e continuare con la successiva . Sintassi: . while condition: #code #code #.. continue #esce . Esempio . i = 1 while i &lt; 6: #1 &lt; 6, true #2 &lt; 6, true #3 &lt; 6, true #4 &lt; 6, true #5 &lt; 6, true #6 &lt; 6, false -&gt; exit if i == 3: #i = 1, false #i = 2, false #i = 3, true #i = 4, false #i = 5, false print(\"Numero \" + i) #Numero 3 i = i + 1 #i = 4 continue #execute print(i) #1 #2 #4 #5 i = i + 1 #i = 2 #i = 3 #i = 4 #i = 5 #i = 6 # 1 # 2 # Numero 3 # 4 # 5 . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-09.html#comando-continue",
    "relUrl": "/corsi/python/Lezioni/py-course-09.html#comando-continue"
  },"279": {
    "doc": "Corso Python - 10",
    "title": "Alcune considerazioni finali",
    "content": "Python ha due comandi di loop primitivi: . | while loop | for loop | . E’ normale chiedersi quando usare uno e quando usare l’altro.. Riporto quindi una serie di caratteristiche dei due cicli iterativi in Python . | for loop è un ciclo enumerativo. Andrebbe utilizzato quando è noto a priori il numero di iterazioni totali | while loop è un ciclo indefinito. Andrebbe utilizzato quando non è noto a priori il numero di iterazioni totali | I comandi break e continue possono essere utilizzati indistintamente sia sul ciclo for che sul ciclo while | . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-09.html#alcune-considerazioni-finali",
    "relUrl": "/corsi/python/Lezioni/py-course-09.html#alcune-considerazioni-finali"
  },"280": {
    "doc": "Corso Python - 10",
    "title": "Corso Python - 10",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-09.html",
    "relUrl": "/corsi/python/Lezioni/py-course-09.html"
  },"281": {
    "doc": "Corso Python - 11",
    "title": "Esercizio Asta online v1",
    "content": "Il seguente script vuole simulare l’andamento di un’asta online con la seguente regola: . | L’asta verrà aggiudicata da chi avrà fatto un’offerta la più vicina alla media delle offerte degli altri | . L’utente dovrà inserire un’offerta in bit coin e una email che rappresenterà l’identificativo. E’ consentita un’unica offerta per utente! In questa prima parte ci occuperemo dell’acquisizione dati da tastiera e della generazione di una struttura dati adeguata. offerte = [] #dato booleano di controllo ciclo altre_offerte = True while altre_offerte: #offerta contiene l'offerte in bitcoin offerta = input(\"Inserisci l`offerta pervenuta (0 per terminare): \") #Converto il dato ricevuto da tastiera in intero offerta = int(offerta) #Il valore \"0\" è il terminatore if offerta == 0: altre_offerte = False continue if offerta &lt; 0: print(\"Non possono essere fatte offerte negative!\") continue #Se l'offerta supera i controlli chiedo l'email email = input(\"Inserire l`email dell`offerente: \") #Inserisco la coppia email-offerta nella lista delle offerte offerte.append([email, offerta]) print(\"Le offerte valide sono:\") print(offerte) . Che cosa succede se l’utente inserisce dei valori di input non atesi? Ad esempio, invece che inserire un numero inserisce una stringa o qualche carattere non previsto? . Vedremo nel capito successivo come trattare questi errori tramite il costrutto try Except . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-10.html#esercizio-asta-online-v1",
    "relUrl": "/corsi/python/Lezioni/py-course-10.html#esercizio-asta-online-v1"
  },"282": {
    "doc": "Corso Python - 11",
    "title": "Corso Python - 11",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-10.html",
    "relUrl": "/corsi/python/Lezioni/py-course-10.html"
  },"283": {
    "doc": "Corso Python - 12",
    "title": "Costrutto try Except",
    "content": "Quando si verifica un errore (o un’eccezione), Python normalmente si ferma e genera un messaggio di errore. w3schools - Python Try Except . Nell’esempio chiedo all’utente l’inserimento di un numero intero.. Fintanto che l’utente inserisce numeri interi tutto funziona correttamente ma quando per sbaglio l’utente inserisce un carattere non valido, un numero decimale o altro, che succede? . while 1: print(\"inserisci un numero intero..\") x = int(input()) if x == 0 break print(x) #input() = 1 #1 #input() = 2 #2 #input() = dd # #Traceback (most recent call last): # File \"test.py\", line 3, in &lt;module&gt; # x = int(input()) #ValueError: invalid literal for int() with base 10: 'dd' . Inserendo la stringa \"dd\" la conversione esplicita int() fallisce e restituisce un errore: . #Traceback (most recent call last): # File \"test.py\", line 3, in &lt;module&gt; # x = int(input()) #ValueError: invalid literal for int() with base 10: 'dd' . L’errore è di tipo ValueError e la descrizione è: invalid literal for int() with base 10: 'dd' che significa che la costante letterale dd inserita non è un tipo di dato valido per la conversione in base 10, cioè in un numero decimale. Come gestisco queste situazioni di errore? Il costrutto try Except permette la gestione di queste situazioni. Sintassi: . try: #code1 except #typeError: #code2 . Significa: prova (try) ad eseguire code1, se rilevi un’eccezione di tipo typeError esegui code2 ed “ignora” code1 ovvero fai finta che code1 non sia mai stato eseguito. Se non rilevi nessun errore nella fase di try allora esegui code1 . Esempio: . while 1: print(\"Inserisci un numero intero..\") try: x = int(input()) except ValueError: print(\"\\nNon è un numero intero, riprova..\") continue if x == 0: break print(\"\\nIl numero inserito è: \" + str(x) + \"\\n\") . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-11.html#costrutto-try-except",
    "relUrl": "/corsi/python/Lezioni/py-course-11.html#costrutto-try-except"
  },"284": {
    "doc": "Corso Python - 12",
    "title": "Corso Python - 12",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-11.html",
    "relUrl": "/corsi/python/Lezioni/py-course-11.html"
  },"285": {
    "doc": "Corso Python - 13",
    "title": "Introduzione alle espressioni regolari con Python",
    "content": "Una RegEx, o espressione regolare, è una sequenza di caratteri che forma un modello di ricerca. Le RegEx possono essere utilizzate per verificare se una stringa contiene il modello di ricerca specificato. Python ha un modulo integrato chiamato re, che può essere utilizzato per lavorare con le espressioni regolari. w3schools - Python RegEx . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-12.html#introduzione-alle-espressioni-regolari-con-python",
    "relUrl": "/corsi/python/Lezioni/py-course-12.html#introduzione-alle-espressioni-regolari-con-python"
  },"286": {
    "doc": "Corso Python - 13",
    "title": "Corso Python - 13",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-12.html",
    "relUrl": "/corsi/python/Lezioni/py-course-12.html"
  },"287": {
    "doc": "Corso Python - 14",
    "title": "Esercizio Asta online v2",
    "content": "Il seguente script vuole simulare l’andamento di un’asta online con la seguente regola: . | L’asta verrà aggiudicata da chi avrà fatto un’offerta la più vicina alla media delle offerte degli altri | . L’utente dovrà inserire un’offerta in bit coin e una email che rappresenterà l’identificativo. E’ consentita un’unica offerta per utente! In questa seconda parte ci occuperemo di inserire dei controlli aggiuntivi dei dati acquisiti. | Aggiungeremo la possibilità di inserire numeri decimali “floating point”. Per far ciò utilizzeremo la funzione di conversione esplicita da stringa (l’input da tastiera) a numero decimale, float() . | Rileveremo tutti gli errori legati ad un’inserimento di un dato float non valido come una stringa o qualche altro carattere (come ad esempio Invio) non interpretabile come numero decimale. Alla rivelazione dell’errore stamperemo il messaggio d’errore \"Formato non valido, riprova ..\". Utilizzeremo il costrutto try-except . | Aggiungeremo un’espressione regolare abbastanza semplice per il controllo del formato dell’email. Per far ciò utilizzeremo la funzione re.match(regExp, myVar) del modulo re. L’espressione regolare controlla se la stringa (nel nostro caso l’email) inizia ^ con la sequenza di caratteri minuscoli \"a-z\", maiuscoli \"A-Z\" o numerici \"0-9\" ripetuti. E’ seguita dal carattere @, continua con la sequenza di caratteri minuscoli, maiuscoli o numerici, prosegue con il carattere . ed p seguita dal dominio che per noi sarà nuovamente una sequenza di caratteri minuscoli, maiuscoli o numerici. | . import re offerte = [] altre_offerte = True while altre_offerte: offerta = input(\"Inserisci l`offerta pervenuta (0 per terminare): \") try: offerta = float(offerta) except ValueError: print(\"Formato non valido, riprova ...\") continue if offerta == 0: altre_offerte = False continue if offerta &lt; 0: print(\"Non possono essere fatte offerte negative!\") continue email = input(\"Inserire l`email dell`offerente: \") if not re.match(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\", email): print(\"Email non valida, riprova ...\") continue nuova_offerta = [offerta, email] print(offerte) . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-13.html#esercizio-asta-online-v2",
    "relUrl": "/corsi/python/Lezioni/py-course-13.html#esercizio-asta-online-v2"
  },"288": {
    "doc": "Corso Python - 14",
    "title": "Corso Python - 14",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-13.html",
    "relUrl": "/corsi/python/Lezioni/py-course-13.html"
  },"289": {
    "doc": "Corso Python - 15",
    "title": "Costrutto if ... in",
    "content": "Analogamente al costrutto for ... in il costrutto if ... in si applica a collezioni di elementi in cui si richiede la ricerca di un particolare elemento in una lista . if item in list: #code else: #code . Esempio: . myFruitsList = [\"banana\", \"mela\", \"kiwi\", \"mandarino\", \"mela\"] print(\"Inserisci il nome di un frutto\") itemToSearch = input() if itemToSearch in myFruitsList: print(\"C'è almeno un/una: \" + itemToSearch + \" nella lista\") else: print(\"Non è presente nessuno/a \" + itemToSearch + \" nella lista\") . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-14.html#costrutto-if--in",
    "relUrl": "/corsi/python/Lezioni/py-course-14.html#costrutto-if--in"
  },"290": {
    "doc": "Corso Python - 15",
    "title": "Esercizio Asta online v3",
    "content": "Il seguente script vuole simulare l’andamento di un’asta online con la seguente regola: . | L’asta verrà aggiudicata da chi avrà fatto un’offerta la più vicina alla media delle offerte degli altri | . L’utente dovrà inserire un’offerta in bit coin e una email che rappresenterà l’identificativo. E’ consentita un’unica offerta per utente! In questa terza parte contrellero che la coppia utente/offerta sia unica utilizzando il costrutto if ... in . import re offerte = [] altre_offerte = True while altre_offerte: offerta = input(\"Inserisci l`offerta pervenuta (0 per terminare): \") try: offerta = float(offerta) except ValueError: print(\"Formato non valido, riprova ...\") continue if offerta == 0: altre_offerte = False continue if offerta &lt; 0: print(\"Non possono essere fatte offerte negative!\") continue email = input(\"Inserire l`email dell`offerente: \") if not re.match(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\", email): print(\"Email non valida, riprova ...\") continue nuova_offerta = [email, offerta] # controllo valido solo se viene fatta la stessa offerta con la stessa mail ... limitato! if nuova_offerta in offerte: print(\"Questo utente ha già fatto la sua unica offerta ... respinto!\") continue else: offerte.append(nuova_offerta) print(\"Le offerte valide sono:\") print(offerte) . Come si vede una coppia identica utente/bit coin viene catturata e rifiutata ma è ancora permesso che un utente possa fare più offerte . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-14.html#esercizio-asta-online-v3",
    "relUrl": "/corsi/python/Lezioni/py-course-14.html#esercizio-asta-online-v3"
  },"291": {
    "doc": "Corso Python - 15",
    "title": "Corso Python - 15",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-14.html",
    "relUrl": "/corsi/python/Lezioni/py-course-14.html"
  },"292": {
    "doc": "Corso Python - 16",
    "title": "Introduzione alle Funzioni",
    "content": "Le funzioni vanno definite prima di utilizzarle . Una funzione è un blocco di codice che viene eseguito solo quando viene chiamata. È possibile passare dei valori, chiamati parametri, in una funzione. Una funzione può restituire dei valori come risultato. In Python una funzione viene definita utilizzando la parola chiave def. w3schools - Python Functions . #definizione di una funzione def myFunc(param) #code #chiamata di una funzione myFunc(value1) . Esempio: . def saluta(nome): print(\"ciao: \" + nome +\"!\") saluta(\"Emil\") saluta(\"Tobias\") saluta(\"Linus\") # ciao: Emil! # ciao: Tobias! # ciao: Linus! . ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-15.html#introduzione-alle-funzioni",
    "relUrl": "/corsi/python/Lezioni/py-course-15.html#introduzione-alle-funzioni"
  },"293": {
    "doc": "Corso Python - 16",
    "title": "Esercizio Asta online v4",
    "content": "Il seguente script vuole simulare l’andamento di un’asta online con la seguente regola: . | L’asta verrà aggiudicata da chi avrà fatto un’offerta la più vicina alla media delle offerte degli altri | . L’utente dovrà inserire un’offerta in bit coin e una email che rappresenterà l’identificativo. In questa quarte parte introdurremo la funzione stampa_lista(lista_offerte) che riceve in ingresso la lista delle offerte e stampa il risultato secondo un formato specifico e la funzione inserisci_offerte() che rappresenta l’acquisizione dati da tastiera da parte dell’utente e il controllo sull’integrità dei dati ricevuti. Di fatto la complessità dello script si riduce alla chiamta di due funzioni: inserisci_offerte() e stampa_lista . import re def stampa_lista(lista_offerte): for offerta in lista_offerte: print(f\"Email Offerente: {offerta[0]} - Offerta: {offerta[1]} \") def inserisci_offerte(): lista = [] altre_offerte = True while altre_offerte: offerta = input(\"Inserisci l`offerta pervenuta (0 per terminare): \") try: offerta = float(offerta) except ValueError: print(\"Formato non valido, riprova ...\") continue if offerta == 0: altre_offerte = False # USCITA DAL CICLO continue if offerta &lt; 0: print(\"Non possono essere fatte offerte negative!\") continue email = input(\"Inserire l`email dell`offerente: \") if not re.match(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\", email): print(\"Email non valida, riprova ...\") continue nuova_offerta = [email, offerta] # controllo valido solo se viene fatta la stessa offerta con la stessa mail ... limitato! if nuova_offerta in lista: print(\"Questo utente ha già fatto la sua unica offerta ... respinto!\") continue else: lista.append(nuova_offerta) return lista # grazie all`uso di funzioni la complessità del programma principale # è drasticamente ridotta offerte = inserisci_offerte() stampa_lista(offerte) . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-15.html#esercizio-asta-online-v4",
    "relUrl": "/corsi/python/Lezioni/py-course-15.html#esercizio-asta-online-v4"
  },"294": {
    "doc": "Corso Python - 16",
    "title": "Corso Python - 16",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-15.html",
    "relUrl": "/corsi/python/Lezioni/py-course-15.html"
  },"295": {
    "doc": "Corso Python - 17",
    "title": "Esercizio Asta online v5",
    "content": "Il seguente script vuole simulare l’andamento di un’asta online con la seguente regola: . | L’asta verrà aggiudicata da chi avrà fatto un’offerta la più vicina alla media delle offerte degli altri | . L’utente dovrà inserire un’offerta in bit coin e una email che rappresenterà l’identificativo. In questa quinta parte introdurremo le funzioni: . | trova_email(email, lista_offerte): Riceve come parametro una stringa digitata in input dall’utente che rappresenta l’identificativo utente, email e la lista di tutte le offerte, lista_offerte. Ritorna un boolean True se trova l’identificativo email ricevuto come parametro come identificativo nella lista_offerte. Questa funzione controlla quindi se un utente ha già fatto un’offerta. | media_offerte(lista_offerte): Riceve come parametro la lista di tutte le offert lista_offerte, calcola la media dei valori delle offerte che rappresentano i bit coin e ne ritorna il valore. Ritorna quindi un valore float . | minimo(lista_offerte): Riceve come parametro la lista di tutte le offert lista_offerte, calcola il minimo dei valori delle offerte che rappresentano i bit coin e ne ritorna il valore. Ritorna quindi un valore float . | massimo(lista_offerte): Riceve come parametro la lista di tutte le offert lista_offerte, calcola il massimo dei valori delle offerte che rappresentano i bit coin e ne ritorna il valore. Ritorna quindi un valore float . | . import re def trova_email(email, lista_offerte): trovato = False for offerta in lista_offerte: if offerta[0] == email: trovato = True break return trovato def media_offerte(lista_offerte): somma = 0.0 for offerta in lista_offerte: somma += offerta[1] return somma / len(lista_offerte) # si assume che la lista non sia vuota def minimo(lista_offerte): #non si parte mai da un valore assoluto #prelevo solo il valore numerico dell'offerta #min è un numero float min = lista_offerte[0][1] #lista_offerte[1:] ritorna una lista dal primo elemento fino all'ultimo #Itero ogni elemento della lista lista_offerte a partire dal primo for offerta in lista_offerte[1:]: #se trovo un elemento più piccolo dell'attuale &lt;min&gt;, aggiorno min if offerta[1] &lt; min: min = offerta[1] return min # si assume che la lista non sia vuota def massimo(lista_offerte): max = lista_offerte[0][1] for offerta in lista_offerte[1:]: if offerta[1] &gt; max: max = offerta[1] return max def stampa_lista(lista_offerte): for offerta in lista_offerte: print(f\"Email Offerente: {offerta[0]} - Offerta: {offerta[1]} \") def inserisci_offerte(): lista = [] altre_offerte = True while altre_offerte: offerta = input(\"Inserisci l`offerta pervenuta (0 per terminare): \") try: offerta = float(offerta) except ValueError: print(\"Formato non valido, riprova ...\") continue if offerta == 0: altre_offerte = False # USCITA DAL CICLO continue if offerta &lt; 0: print(\"Non possono essere fatte offerte negative!\") continue email = input(\"Inserire l`email dell`offerente: \") if not re.match(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\", email): print(\"Email non valida, riprova ...\") continue nuova_offerta = [email, offerta] # controllo valido solo se viene fatta la stessa offerta con la stessa mail ... limitato! # if nuova_offerta in offerte: # print(\"Questo utente ha già fatto la sua unica offerta ... respinto!\") # continue # else: # offerte.append(nuova_offerta) if trova_email(email, lista): print(\"Questo utente ha già fatto la sua unica offerta ... respinto!\") continue else: lista.append(nuova_offerta) return lista # grazie all`uso di funzioni la complessità del programma principale # è drasticamente ridotta offerte = inserisci_offerte() stampa_lista(offerte) print(f\"Offerta Media: {media_offerte(offerte)}\") print(f\"Offerta minima: {minimo(offerte)}\") . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-16.html#esercizio-asta-online-v5",
    "relUrl": "/corsi/python/Lezioni/py-course-16.html#esercizio-asta-online-v5"
  },"296": {
    "doc": "Corso Python - 17",
    "title": "Corso Python - 17",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-16.html",
    "relUrl": "/corsi/python/Lezioni/py-course-16.html"
  },"297": {
    "doc": "Corso Python - 18",
    "title": "Python - List Comprehension",
    "content": "List Comprehension offre una sintassi più breve quando si desidera creare un nuovo elenco basato sui valori di un elenco esistente. w3schools - Python - List Comprehension . E’ una sorta di RegEx utilizzata per il tipo List. Sintassi. newlist = [expression for item in iterable if condition == True] . Nell’esempio che segue costruisco una lista non utilizzando List Comprehension: . fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"] newlist = [] #La nuova lista conterrà soltanto elementi che contengono il carattere \"a\" for x in fruits: if \"a\" in x: newlist.append(x) print(newlist) #[\"apple\", \"banana\", \"mango\"] . Il solito esempio utilizzando List Comprehension: . fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"] #List Comprehension newlist = [x for x in fruits if \"a\" in x] print(newlist) . E’ una sintassi molto vicina alla sintassi del linguaggio matematico.. Può essere infatti tradotto nel seguente modo: « Cerca le “x” all’interno della lista “fruits” tali che il carattere “a” è contenuto in “x”» . Nel seguente esempio elenco i numeri dispari da 0 a 100 con una sola espressione List Comprehension: . #Cerca le x da 0 a 100 tali che il risultato della divisione intera tra x e 2 moltiplicato successivamente per 2 sia diverso da x #es: 3/2 = 1 &gt;&gt; 1*2 = 2 &gt;&gt; 3!=2 &gt;&gt; print #es: 4/2 = 2 &gt;&gt; 2*2 = 4 &gt;&gt; 4=4 print([x for x in range(0, 100) if x // 2 * 2 != x]) . back next ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-17.html#python---list-comprehension",
    "relUrl": "/corsi/python/Lezioni/py-course-17.html#python---list-comprehension"
  },"298": {
    "doc": "Corso Python - 18",
    "title": "Corso Python - 18",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-17.html",
    "relUrl": "/corsi/python/Lezioni/py-course-17.html"
  },"299": {
    "doc": "Corso Python - 19",
    "title": "Esercizio Asta online v6",
    "content": "Il seguente script vuole simulare l’andamento di un’asta online con la seguente regola: . | L’asta verrà aggiudicata da chi avrà fatto un’offerta la più vicina alla media delle offerte degli altri | . L’utente dovrà inserire un’offerta in bit coin e una email che rappresenterà l’identificativo. In questa sesta e ultima parte introdurremo le funzioni: . | offerta_minima(lista_offerte): riceve la lista_offerte come parametro e ne identifica la lista con l’offerta minima. E’ simile alla funzione minimo(lista_offerte) solo che invece di ritornare il valore decimale dell’offerta minima ritorna una lista comprendente la coppia email/offerta con offerta minima. | offerta_massima(lista_offerte): riceve la lista_offerte come parametro e ne identifica la lista con l’offerta massima. E’ simile alla funzione massimo(lista_offerte) solo che invece di ritornare il valore decimale dell’offerta massima ritorna una lista comprendente la coppia email/offerta con offerta massima. | . Lo script filtrerà inoltre le offerte che hanno una tolleranza del 10% calcolata sul valore medio. Infine, è stata definita una funzione SIMULA_inserisci_offerte() per evitare di inserire i dati da tastiera e testare lo script . import re def SIMULA_inserisci_offerte(): return [ ['a@a.com', 1], ['b@b.com', 3.3], ['c@c.com', 4.1], ['d@d.com', 3.8], ['e@e.com', 12] ] def trova_email(email, lista_offerte): trovato = False for offerta in lista_offerte: if offerta[0] == email: trovato = True break return trovato def media_offerte(lista_offerte): somma = 0.0 for offerta in lista_offerte: somma += offerta[1] return somma / len(lista_offerte) # si assume che la lista non sia vuota def minimo(lista_offerte): min = lista_offerte[0][1] for offerta in lista_offerte[1:]: if offerta[1] &lt; min: min = offerta[1] return min # invece del solo valore minimo restituisce # l`intera offerta [email, valore_offerta] def offerta_minima(lista_offerte): min = lista_offerte[0] for offerta in lista_offerte[1:]: if offerta[1] &lt; min[1]: min = offerta #ritorna la coppia &lt;email, valore_offerta&gt; corrispondente al minimo di \"valore_offerta\" return min # si assume che la lista non sia vuota def massimo(lista_offerte): max = lista_offerte[0][1] for offerta in lista_offerte[1:]: if offerta[1] &gt; max: max = offerta[1] return max # invece del solo valore massimo restituisce # l`intera offerta [email, valore_offerta] def offerta_massima(lista_offerte): max = lista_offerte[0] for offerta in lista_offerte[1:]: if offerta[1] &gt; max[1]: max = offerta return max def stampa_lista(lista_offerte): for offerta in lista_offerte: print(f\"Email Offerente: {offerta[0]} - Offerta: {offerta[1]} \") def inserisci_offerte(): lista = [] altre_offerte = True while altre_offerte: offerta = input(\"Inserisci l`offerta pervenuta (0 per terminare): \") try: offerta = float(offerta) except ValueError: print(\"Formato non valido, riprova ...\") continue if offerta == 0: altre_offerte = False # USCITA DAL CICLO continue if offerta &lt; 0: print(\"Non possono essere fatte offerte negative!\") continue email = input(\"Inserire l`email dell`offerente: \") if not re.match(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\", email): print(\"Email non valida, riprova ...\") continue nuova_offerta = [email, offerta] if trova_email(email, lista): print(\"Questo utente ha già fatto la sua unica offerta ... respinto!\") continue else: lista.append(nuova_offerta) return lista print (\"\"\" Il seguente script vuole simulare l\\'andamento di un\\'asta online con la seguente regola: &lt;&lt; L\\'asta verrà aggiudicata da chi avrà fatto un'offerta la più vicina alla media delle offerte degli altri.&gt;&gt; L'utente dovrà inserire un'offerta in bit coin e una email che rappresenterà l'identificativo\"\"\") print(\"-\"*40) # grazie all`uso di funzioni la complessità del programma principale # è drasticamente ridotta print(\"\\nStampo una lista di offerte predefinite, evito l'input da tastiera\") offerte = SIMULA_inserisci_offerte() stampa_lista(offerte) print(\"-\"*40) # eliminiamo l`offerta minima e massima print(\"\\nElimino l'offerta più alta e l'offerta più bassa\") offerte.remove(offerta_minima(offerte)) offerte.remove(offerta_massima(offerte)) stampa_lista(offerte) print(\"-\"*40) # costruiamo una nuova lista con gli elementi rimasti # che non si discostano più del 10% dalla media dei rimasti offerta_media = media_offerte(offerte) print(f\"Media: {offerta_media}\") tolleranza = offerta_media/100*10 print(f\"Tolleranza 10%: {tolleranza}\") print(\"-\"*40) offerte_filtrate = [x for x in offerte if abs(x[1]-offerta_media) &lt; tolleranza] print(\"\\nOfferte filtrate in base alla tolleranza..\") stampa_lista(offerte_filtrate) #Il seguente script vuole simulare l'andamento di un'asta online con la seguente regola: #&lt;&lt; L'asta verrà aggiudicata da chi avrà fatto un'offerta la più vicina alla media delle offerte degli altri.&gt;&gt; #L'utente dovrà inserire un'offerta in bit coin e una email che rappresenterà l'identificativo #---------------------------------------- # #Stampo una lista di offerte predefinite, evito l'input da tastiera #Email Offerente: a@a.com - Offerta: 1 #Email Offerente: b@b.com - Offerta: 3.3 #Email Offerente: c@c.com - Offerta: 4.1 #Email Offerente: d@d.com - Offerta: 3.8 #Email Offerente: e@e.com - Offerta: 12 #---------------------------------------- # #Elimino l'offerta più alta e l'offerta più bassa #Email Offerente: b@b.com - Offerta: 3.3 #Email Offerente: c@c.com - Offerta: 4.1 #Email Offerente: d@d.com - Offerta: 3.8 #---------------------------------------- #Media: 3.733333333333333 #Tolleranza 10%: 0.3733333333333333 #---------------------------------------- # #Offerte filtrate in base alla tolleranza.. #Email Offerente: c@c.com - Offerta: 4.1 #Email Offerente: d@d.com - Offerta: 3.8 . back ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-18.html#esercizio-asta-online-v6",
    "relUrl": "/corsi/python/Lezioni/py-course-18.html#esercizio-asta-online-v6"
  },"300": {
    "doc": "Corso Python - 19",
    "title": "Corso Python - 19",
    "content": " ",
    "url": "http://localhost:4000/corsi/python/Lezioni/py-course-18.html",
    "relUrl": "/corsi/python/Lezioni/py-course-18.html"
  },"301": {
    "doc": "Python",
    "title": "Python",
    "content": " ",
    "url": "http://localhost:4000/python/",
    "relUrl": "/python/"
  },"302": {
    "doc": "Tutorial",
    "title": "Tutorial",
    "content": " ",
    "url": "http://localhost:4000/tutorial/",
    "relUrl": "/tutorial/"
  },"303": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "content": "Jekyll è un semplice generatore di siti statici, compatibile con i blog, per siti personali, di progetto o di organizzazione. Scritto in Ruby da Tom Preston-Werner, co-fondatore di GitHub, è distribuito con licenza open source MIT. Consente di creare un sito statico grazie alla sola conoscenza del linguaggio markdown supportato nativamente da GitHub. Non è quindi richiesta una conoscenza dei linguaggi html e css. Dispone di una enorme quantità di temi gratuiti i quali consentono personalizzazioni più o meno avanzate. Per chi conosce i linguaggi html e css sarà possibile aggiungere elementi o modificare lo stile a piacimento. ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html"
  },"304": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Indice",
    "content": ". | Prerequisiti e installazione . | Installazione di jekyll su Ubuntu | . | Crea il tuo primo sito | Pubblica il sito su GitHub Pages | Temi jekyll . | Come personalizzare un tema jekyll . | Aggiunta css | Aggiunta html | . | . | Personalizzazioni avanzate | . ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#indice",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#indice"
  },"305": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Prerequisiti e installazione",
    "content": "Come ho già detto, non è richiesta una conoscenza dei linguaggi html e css a patto che tu conosca il linguaggio markdown. Jekyll si occuperà di convertire, tra le altre cose, la tue pagine markdown in pagine html. Per chi avesse la necessità di modificare il layout standard aggiungendo elementi o modificando lo stile nativo del tema al di fuori delle possibilità offerte dal creatore del tema sarà tuttavia richiesta una conoscenza intermedia dei linguaggi html e css. E’ inoltre necessaria la conoscenza di git per la comunicazione con GitHUb . Sei pronto? . Per prima cosa devi installare jekyll e git per il tuo sistema operativo. Installazione di jekyll su Ubuntu . Devi installare tutte le dipendenze: . | ruby | rubygems | gcc | make | . Il seguente comando installa tutte le dipendenze necessarie: . sudo apt-get install ruby-full build-essential zlib1g-dev . Evita di installare i pacchetti RubyGems (chiamati gems) come utente root. Invece, imposta una directory di installazione gem per il tuo account utente. I seguenti comandi aggiungeranno variabili d’ambiente al tuo file ~ / .bashrc per configurare il percorso di installazione di gem: . echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrc echo 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrc echo 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrc source ~/.bashrc . Installa jekyll e bundler . gem install jekyll bundler . Jekyll on Ubuntu . Con questa procedura installerai l’ultima versione di jekyll. Per verificare la versione installata digita: . jekyll -v . In generale la versione di jekyll appena installata differisce da quella utilizzata da GitHub Pages per il deploy (pubblicazione) di una pagina web. Per verificare la versione utilizzata da GitHub Pages, visita GitHub pages - Dependency versions. Per evitare problemi consiglio di allinearsi alla versione di jekyll utilizzata da GitHub Pages ma solo in fase di creazione di un nuovo sito, quindi con un’installazione locale alla directory contente il progetto. Nei prossimi passaggi vedremo come fare.. ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#prerequisiti-e-installazione",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#prerequisiti-e-installazione"
  },"306": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Crea il tuo primo sito",
    "content": "Crea una nuova directory con un nome a piacere, ad esempio myWebPage. Apri il terminale all’interno della repository appena creata e digita il comando per creare una nuova base per il sito. jekyll new . Adesso, lanciando il comando: . jekyll serve . Dovrebbe rispondere con qualcosa del genere: . Configuration file: /home/s/Repository/myWebPage/_config.yml Source: /home/s/Repository/myWebPage Destination: /home/s/Repository/myWebPage/_site Incremental build: disabled. Enable with --incremental Generating... Jekyll Feed: Generating feed for posts done in 0.211 seconds. Auto-regeneration: enabled for '/home/s/Repository/myWebPage' Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop. Raggiungi l’indirizzo indicato dal campo Server address, nel mio caso http://127.0.0.1:4000/, da terminale è sufficiente un Ctrl + click o semplicemente copiando l’indirizzo su browser web. A questo punto dovresti vedere l’anteprima del tuo sito. Di default verrà impostato un tema dal nome minima . Non ti preoccupare adesso dei contenuti, avrai modo di configurarli con calma una volta finito il setup. Come dicevo, adesso ti consiglio di allinearti alla versione di jekyll utilizzata da GitHub Pages. Apri la directory del progetto, nel mio caso myWebPage. Troverai una serie di file: . La nostra concentrazione per adesso va ai file Gemfile, Gemfile.lock e _config.yml. Apri il file Gemfile, troverai questo contenuto scritto nel linguaggio Ruby: . source \"https://rubygems.org\" # Hello! This is where you manage which Jekyll version is used to run. # When you want to use a different version, change it below, save the # file and run `bundle install`. Run Jekyll with `bundle exec`, like so: # # bundle exec jekyll serve # # This will help ensure the proper Jekyll version is running. # Happy Jekylling! gem \"jekyll\", \"~&gt; 4.1.1\" # This is the default theme for new Jekyll sites. You may change this to anything you like. gem \"minima\", \"~&gt; 2.5\" # If you want to use GitHub Pages, remove the \"gem \"jekyll\"\" above and # uncomment the line below. To upgrade, run `bundle update github-pages`. # gem \"github-pages\", group: :jekyll_plugins # If you have any plugins, put them here! group :jekyll_plugins do gem \"jekyll-feed\", \"~&gt; 0.12\" end # Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem # and associated library. platforms :mingw, :x64_mingw, :mswin, :jruby do gem \"tzinfo\", \"~&gt; 1.2\" gem \"tzinfo-data\" end # Performance-booster for watching directories on Windows gem \"wdm\", \"~&gt; 0.1.1\", :platforms =&gt; [:mingw, :x64_mingw, :mswin] . Tra i commenti del file troviamo diverse indicazioni su come procedere per utilizzare GitHub Pages. In particolare devi impostare la versione di jekyll utilizzata da GitHub, nel mio caso 3.9.0, consultabile da GitHub pages - Dependency versions. gem \"jekyll\", \"~&gt; 3.9.0\" . e devi inserire anche la direttiva giusta per github-pages con l’attuale versione di GitHub Pages consultabile sempre da GitHub pages - Dependency versions. Nel mio caso la versione è la 209 . gem \"github-pages\", \"~&gt; 209\", group: :jekyll_plugins . Il file completo sarà: . source \"https://rubygems.org\" # Hello! This is where you manage which Jekyll version is used to run. # When you want to use a different version, change it below, save the # file and run `bundle install`. Run Jekyll with `bundle exec`, like so: # # bundle exec jekyll serve # # This will help ensure the proper Jekyll version is running. # Happy Jekylling! gem \"jekyll\", \"~&gt; 3.9.0\" # This is the default theme for new Jekyll sites. You may change this to anything you like. gem \"minima\" #gem \"minima\", \"~&gt; 2.5\" # If you want to use GitHub Pages, remove the \"gem \"jekyll\"\" above and # uncomment the line below. To upgrade, run `bundle update github-pages`. gem \"github-pages\", \"~&gt; 209\", group: :jekyll_plugins # If you have any plugins, put them here! group :jekyll_plugins do gem \"jekyll-feed\", \"~&gt; 0.12\" end # Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem # and associated library. platforms :mingw, :x64_mingw, :mswin, :jruby do gem \"tzinfo\", \"~&gt; 1.2\" gem \"tzinfo-data\" end # Performance-booster for watching directories on Windows gem \"wdm\", \"~&gt; 0.1.1\", :platforms =&gt; [:mingw, :x64_mingw, :mswin] . A questo punto puoi salvare ed eliminare il file Gemfile.lock. Questo file infatti contiene tutte le dipendenze ed è generato a partire dal file Gemfile. Ne dovrai generare uno nuovo. Da terminale, all’interno della directory del progetto digita: . bundle install . Verrà generato un nuovo Gemfile.lock con tutte le dipendenze necessarie per GitHub Pages. Adesso, per lanciare l’anteprima della pagina, non puoi più utilizzare il comando jekyll serve poichè tale comando invocherà la versione di jekyll installata globalmente sul tuo PC e quindi risulteresti non allineato. Dovrai lanciare il comando bundle exec jekyll serve come suggerito dal file Gemfile in modo da garantire che venga eseguita la versione di jekyll indicata dal file Gemfile e non quella installata su PC. Digita quindi: . bundle exec jekyll serve . A questo punto sei quasi pronto per pubblicare il tuo sito tramite GitHub Pages. ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#crea-il-tuo-primo-sito",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#crea-il-tuo-primo-sito"
  },"307": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Pubblica il sito su GitHub Pages",
    "content": "Crea una repository vuota e pubblica su GitHub. Ti consiglio di dare lo stesso nome della directory utilizzata nel progetto, nel mio caso myWebPage. Il nome appena creato coinciderà con la subdirectory dell’indirizzo della propria pagina web che nel mio caso sarà: https://sidiri-8bit.github.io/myWebPage/. Adesso torna alla directory del progetto e aggiungiamo quindi il subpath myWebPage all’interno del file _config.yml, . baseurl: \"/myWebPage\" # the subpath of your site, e.g. /blog . Il file completo sarà una cosa del genere: . # Welcome to Jekyll! title: Your awesome title email: your-email@example.com description: &gt;- # this means to ignore newlines until \"baseurl:\" Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description. baseurl: \"/myWebPage\" # the subpath of your site, e.g. /blog url: \"\" # the base hostname &amp; protocol for your site, e.g. http://example.com twitter_username: jekyllrb github_username: jekyll # Build settings theme: minima plugins: - jekyll-feed . A questo punto lancia nuovamente il comando: . bundle exec jekyll serve . Bene, sei pronto a trasformare la directory nella repository GitHub che ospiterà la tua pagina web. Tramite git digita: . git init git add . git commit -m \"initial\" git branch -M master git remote add origin git@github.com:sidiri-8bit/myWebPage.git git push -u origin master . e search results) and in your feed.xml site description. baseurl: “” # the subpath of your site, e.g. /blog #url: “” # the base hostname &amp; protocol for your site, e.g. http://example.com twitter_username: jekyllrb github_username: jekyll ina web. Apri la Repository e vai su Settings, sezione GitHub Pages. Seleziona il branch master, premi il tasto Save, una volta aggiornata la pagina, se torni alla sezione GitHub Pages dovresti trovare: . Your site is published at https://sidiri-8bit.github.io/myWebPage/ . Cliccando sul link dovresti visualizzare la tua pagina. Sei online! . Attenzione al branch! Fintanto che farai le modifiche al sito ed eseguirai push sul branch master, GitHub effettuerà il deploy in automatico della tua pagina. Per evitare il deploy puoi utilizzare un altro branch, un branch di lavoro qualsiasi ad esempio changes ma ricorda che affinchè la pagina possa essere caricata dovrai effettuare il merge del tuo branch changes con il branch master . Non importa specificare un subpath per il tuo sito! Se non vuoi specificare un subpath e pubblicare il sito come “https://[username].github.io/” la procedura è semplificata. Crea una repository con il nome [username].github.io. Nel mio caso sarà sidiri-8bit.github.io. La repository [username].github.io è speciale, infatti GitHub la identifica già come una repository pronta ad ospitare una pagina web e ad effettuare il deploy in automatico sul branch master. L’unica cosa che dovrai fare è caricare il contenuto del tuo sito su questa repository togliendo dal file _config.yml il subpath indicato attraverso parametro baseurl. Riporto il file _config.yml completo: . # Welcome to Jekyll! title: Your awesome title email: your-email@example.com description: &gt;- # this means to ignore newlines until \"baseurl:\" Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description. baseurl: \"\" # the subpath of your site, e.g. /blog #url: \"\" # the base hostname &amp; protocol for your site, e.g. http://example.com twitter_username: jekyllrb github_username: jekyll # Build settings theme: minima# Exclude from processing. plugins: - jekyll-feed . ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#pubblica-il-sito-su-github-pages",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#pubblica-il-sito-su-github-pages"
  },"308": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Temi jekyll",
    "content": "Adesso vedrai come impostare il tema just-the-docs . Questo tema, non essendo tra quelli ufficialmente supportati da GitHub va aggiunto in un atro modo. Ovviamente questa guida vale anche per altri temi. Modifica il Gemfile inserendo al posto di: . gem \"minima\" . Il tema just-the-docs: . gem \"just-the-docs\" . Modifica file _config.yml inserendo al posto di: . theme: minima . remote_theme: pmarsceill/just-the-docs . Adesso cancella il file Gemfile.lock e lancia nuovamente: . bundle install . Per vedere l’anteprima lancia nuovamente il comando: . bundle exec jekyll serve . A questo punto esegui il commit e il push delle modifiche. git add . git commit -m \"add other theme\" git push . Verrà eseguito il deploy in automatico. L’anteprima di questo tema è una cosa del genere: . ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#temi-jekyll",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#temi-jekyll"
  },"309": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Come personalizzare un tema jekyll",
    "content": "Stai utilizzando un tema ma vorresti personalizzarlo a tuo piacimento aggiungendo stile css o elelmenti html? . Normalmente ogni tema dispone di una documentazione per la personalizzazione della propria pagina. Si tratta in generale di impostare certi parametri di alto livello nel file _config.yml o definire alcune variabili in qualche file ad un path particolare. Ad esempio per il tema just-the-docs è possibile creare un file con un nome a piacimento ad esempio my_schema.scss ad un percorso specifico, _sass/color_schemes/my_schema.scss e settare certe variabili (definite dal tema) come: . $link-color: $purple-100; $sidebar-color: $grey-lt-100; $content-width: 1000px; . consentendo di cambiare certi colori o ridefinire alcuni margini o proporzioni. Questo file deve essere aggiunto come build settings inserendo la seguente riga nel file _config.yml: . color_scheme: my_schema . Ovviamente queste modifiche sono limitate alle possibilità definite dal creatore del tema. Aggiunta css . Per aver accesso ad una personalizzazione più profonda in genere viene data la possibilità di ridefinire completamente lo stile css sovraiscrivendo solo gli attributi che ci interessano. Nel caso del tema just-the-docs viene data la possibilità di creare un file con il nome specifico custom.scss al path _sass/custom/custom.scss. In questo modo utilizzando le regole css è possibile cambiare lo stile di ogni elemento della pagina. Purtroppo, essendo un’operazione di basso livello richiede una conoscenza approfondita del linguaggio css e di comprendere la logica di layout con cui è stata progettata la pagina. Ti dovrai armare di pazienza e dello strumento Ispeziona del browser per risalire al selettore giusto per ottenere la modifica che ti serve. Potrete trovare inoltre lo stile completo css all’interno della cartella _site, nel mio caso si trova al path _site/assets/css/just-the-docs-default.css. Personalmente ho modificato abbondantemente lo stile css . Aggiunta html . Se non ti basta modificare lo stile css e vuoi aggiungere anche elementi html si può fare come sempre con una procedura di basso livello cioè sovraiscrivendo la pagina html che dovrebbe occuparsi di aggiungere questi elementi. Da terminale, all’interno della root del tuo progetto digita bundle info [nome-tema]. In questo caso utilizzando il tema just-the-docs sarà: . bundle info just-the-docs . Risponderà con il path di installazione del tema . * just-the-docs (0.3.3) Summary: A modern, highly customizable, and responsive Jekyll theme for documention with built-in search. Homepage: https://github.com/pmarsceill/just-the-docs Path: /home/s/gems/gems/just-the-docs-0.3.3 . Raggiungi questa posizione e naviga tra le directory. Troverai le pagine html che generano il tuo sito. Devi copiare la pagina che ti interessa all’interno del tuo progetto allo stesso path. Personalmente, per il tema just-the-docs, ho copiato la pagina default.html all’interno della directory _layouts e le pagine footer.html, head.html, nav.html all’interno della directory _includes. Dopo averle incollate localmente rispettando i path ho iniziato ad apportre delle modifiche, aggiungendo social-link o un logo, modificando il footer di default o la nav-bar. Per caricare le nuove modifiche è sufficiente lanciare il comando: . bundle exec jekyll serve . ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#come-personalizzare-un-tema-jekyll",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#come-personalizzare-un-tema-jekyll"
  },"310": {
    "doc": "Crea il tuo sito tramite GitHub Pages e jekyll",
    "title": "Personalizzazioni avanzate",
    "content": "Nel file yml come abbiamo già visto, sono definite delle variabili come title, description, github_username richiamate dalle pagine html attraverso la sintassi: . Ho dovuto usare un’immagine perchè jekyll cercherebbe di applicare la valorizzazione . # Welcome to Jekyll! title: Your awesome title email: your-email@example.com description: &gt;- # this means to ignore newlines until \"baseurl:\" Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description. baseurl: \"\" # the subpath of your site, e.g. /blog #url: \"\" # the base hostname &amp; protocol for your site, e.g. http://example.com twitter_username: jekyllrb github_username: jekyll # Build settings theme: minima plugins: - jekyll-feed . Io ad esempio ho utilizzato la variabile github_username per aggiungere un icona che punti al mio account github: . ",
    "url": "http://localhost:4000/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#personalizzazioni-avanzate",
    "relUrl": "/tutorial/website-jekyll-githubPages/website-jekyll-githubPages.html#personalizzazioni-avanzate"
  }
}
